{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * Circular 3D chart data label.\n */\nimport { isNullOrUndefined, ChildProperty, Property, Complex, extend, getValue, createElement } from '@syncfusion/ej2-base';\nimport { Border } from '../../common/model/base';\nimport { measureText, Rect } from '@syncfusion/ej2-svg-base';\nimport { textRender } from '../../common/model/constants';\nimport { appendChildElement, colorNameToHex, convertHexToColor, getFontStyle, getTemplateFunction, measureElementRect, isOverlap, textTrim } from '../../common/utils/helper';\n/**\n * Configures the fonts in the circular 3D data label.\n */\nvar CircularChart3DDataLabelFont = /** @class */function (_super) {\n  __extends(CircularChart3DDataLabelFont, _super);\n  function CircularChart3DDataLabelFont() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  __decorate([Property('Normal')], CircularChart3DDataLabelFont.prototype, \"fontStyle\", void 0);\n  __decorate([Property('16px')], CircularChart3DDataLabelFont.prototype, \"size\", void 0);\n  __decorate([Property('Normal')], CircularChart3DDataLabelFont.prototype, \"fontWeight\", void 0);\n  __decorate([Property('')], CircularChart3DDataLabelFont.prototype, \"color\", void 0);\n  __decorate([Property('Segoe UI')], CircularChart3DDataLabelFont.prototype, \"fontFamily\", void 0);\n  __decorate([Property(1)], CircularChart3DDataLabelFont.prototype, \"opacity\", void 0);\n  return CircularChart3DDataLabelFont;\n}(ChildProperty);\nexport { CircularChart3DDataLabelFont };\n/**\n * Defines the appearance of the connector line for the circular 3D chart.\n */\nvar CircularChart3DConnector = /** @class */function (_super) {\n  __extends(CircularChart3DConnector, _super);\n  function CircularChart3DConnector() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  __decorate([Property(null)], CircularChart3DConnector.prototype, \"color\", void 0);\n  __decorate([Property(1)], CircularChart3DConnector.prototype, \"width\", void 0);\n  __decorate([Property(null)], CircularChart3DConnector.prototype, \"length\", void 0);\n  __decorate([Property('')], CircularChart3DConnector.prototype, \"dashArray\", void 0);\n  return CircularChart3DConnector;\n}(ChildProperty);\nexport { CircularChart3DConnector };\n/**\n * Configures the data label settings for circular 3D chart.\n */\nvar CircularChart3DDataLabelSettings = /** @class */function (_super) {\n  __extends(CircularChart3DDataLabelSettings, _super);\n  function CircularChart3DDataLabelSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  __decorate([Property(false)], CircularChart3DDataLabelSettings.prototype, \"visible\", void 0);\n  __decorate([Property(null)], CircularChart3DDataLabelSettings.prototype, \"name\", void 0);\n  __decorate([Property('transparent')], CircularChart3DDataLabelSettings.prototype, \"fill\", void 0);\n  __decorate([Property('Inside')], CircularChart3DDataLabelSettings.prototype, \"position\", void 0);\n  __decorate([Property(0)], CircularChart3DDataLabelSettings.prototype, \"angle\", void 0);\n  __decorate([Property(false)], CircularChart3DDataLabelSettings.prototype, \"enableRotation\", void 0);\n  __decorate([Complex({\n    width: null,\n    color: null\n  }, Border)], CircularChart3DDataLabelSettings.prototype, \"border\", void 0);\n  __decorate([Complex({\n    fontFamily: null,\n    size: '12px',\n    fontStyle: 'Normal',\n    fontWeight: '400',\n    color: null\n  }, CircularChart3DDataLabelFont)], CircularChart3DDataLabelSettings.prototype, \"font\", void 0);\n  __decorate([Complex({}, CircularChart3DConnector)], CircularChart3DDataLabelSettings.prototype, \"connectorStyle\", void 0);\n  __decorate([Property(null)], CircularChart3DDataLabelSettings.prototype, \"template\", void 0);\n  __decorate([Property('')], CircularChart3DDataLabelSettings.prototype, \"format\", void 0);\n  return CircularChart3DDataLabelSettings;\n}(ChildProperty);\nexport { CircularChart3DDataLabelSettings };\n/**\n * The 'CircularChartDataLabel3D' module used to render dataLabel in circular 3D charts.\n */\nvar CircularChartDataLabel3D = /** @class */function (_super) {\n  __extends(CircularChartDataLabel3D, _super);\n  function CircularChartDataLabel3D() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Renders data labels for a circular 3D series on the given chart.\n   *\n   * @param {CircularChart3DSeries} series - The circular 3D series for which data labels are to be rendered.\n   * @param {CircularChart3D} chart - The circular 3D chart instance.\n   * @returns {void}\n   * @private\n   */\n  CircularChartDataLabel3D.prototype.renderDataLabel = function (series, chart) {\n    var templateId = chart.element.id + '-series-' + series.index + '-data-label-collections';\n    series.labelBound = isNullOrUndefined(series.labelBound) ? new Rect(Infinity, Infinity, -Infinity, -Infinity) : series.labelBound;\n    series.dataLabelElement = createElement('div', {\n      id: templateId\n    });\n    for (var i = 0; i < series.points.length; i++) {\n      var point = series.points[i];\n      var pointText = this.getDatalabelText(series.dataLabel.format, chart, point.text ? point.text : isNullOrUndefined(point.y) ? '' : point.y.toString());\n      var border = {\n        width: series.dataLabel.border.width,\n        color: series.dataLabel.border.color,\n        dashArray: series.dataLabel.border.dashArray\n      };\n      var argsFont = extend({}, getValue('properties', series.dataLabel.font), null, true);\n      var argsData = {\n        cancel: false,\n        name: textRender,\n        series: series,\n        point: point,\n        text: pointText,\n        border: border,\n        color: series.dataLabel.fill,\n        template: series.dataLabel.template,\n        font: argsFont\n      };\n      chart.trigger(textRender, argsData);\n      point.argsData = argsData;\n      if (point.visible && !argsData.cancel && !isNullOrUndefined(point.y)) {\n        this.draw3DDataLabel(series, point.index, point, chart);\n      }\n    }\n    if (series.dataLabel.template) {\n      appendChildElement(false, document.getElementById(chart.element.id + '_Secondary_Element'), series.dataLabelElement, chart.redraw, false, 'x', 'y', null, '', false, false, null);\n    }\n  };\n  /**\n   * Creates a data label template for a specific data point in a 3D series.\n   *\n   * @param {HTMLElement} parentElement - The parent HTML element to which the data label template is attached.\n   * @param {CircularChart3DSeries} series - The 3D series to which the data point belongs.\n   * @param {CircularChart3DDataLabelSettingsModel} dataLabel - The style settings for data labels.\n   * @param {CircularChart3DPoints} point - The data point for which the data label template is created.\n   * @param {CircularChart3DTextRenderEventArgs} data - The text render event arguments.\n   * @param {number} labelIndex - The index of the data label.\n   * @param {boolean} redraw - Indicates whether the template should be redrawn.\n   * @param {CircularChart3DLocation} location - The location values for the data label.\n   * @param {CircularChart3D} chart - The circular 3D chart instance.\n   * @returns {void}\n   * @private\n   */\n  CircularChartDataLabel3D.prototype.createDataLabelTemplate = function (parentElement, series, dataLabel, point, data, labelIndex, redraw, location, chart) {\n    var childElement = this.createTemplate(createElement('div', {\n      id: chart.element.id + '-series-' + series.index + '-data-label-' + labelIndex,\n      styles: 'position: absolute;background-color:' + data.color + ';' + getFontStyle(dataLabel.font, chart.themeStyle.datalabelFont) + ';border:' + data.border.width + 'px solid ' + data.border.color + ';'\n    }), data.template, chart, point, series, chart.element.id + '-data-label-');\n    this.calculateTemplateLabelSize(parentElement, childElement, point, series, dataLabel, redraw, location);\n  };\n  /**\n   * Calculates the size of a data label template for a specific data point in a 3D series.\n   *\n   * @param {HTMLElement} parentElement - The parent HTML element containing the data label template.\n   * @param {HTMLElement} childElement - The child HTML element representing the data label template.\n   * @param {CircularChart3DPoints} point - The data point for which the data label template size is calculated.\n   * @param {CircularChart3DSeries} series - The circular 3D series to which the data point belongs.\n   * @param {CircularChart3DDataLabelSettingsModel} dataLabel - The style for data labels.\n   * @param {boolean} redraw - Indicates whether the template should be redrawn.\n   * @param {CircularChart3DLocation} location - The location values for the data label.\n   * @param {boolean} isReactCallback - Indicates whether the callback is associated with React.\n   * @returns {void}\n   */\n  CircularChartDataLabel3D.prototype.calculateTemplateLabelSize = function (parentElement, childElement, point, series, dataLabel, redraw, location, isReactCallback) {\n    var elementRect = measureElementRect(childElement, redraw, isReactCallback);\n    childElement.style.left = location.x - elementRect.width / 2 + 'px';\n    childElement.style.top = location.y - elementRect.height + 'px';\n    appendChildElement(false, parentElement, childElement, redraw, true, 'left', 'top');\n  };\n  /**\n   * Creates a template element for rendering data labels associated with a specific data point in a 3D series.\n   *\n   * @param {HTMLElement} childElement - The child HTML element to contain the template content.\n   * @param {string | Function} content - The content or function for the data label template.\n   * @param {CircularChart3D} chart - The circular 3D chart instance.\n   * @param {CircularChart3DPoints} point - The data point for which the template is created (optional).\n   * @param {CircularChart3DSeries} series - The 3D series to which the data point belongs (optional).\n   * @param {string} dataLabelId - The ID for the data label element (optional).\n   * @returns {HTMLElement} - The created template element.\n   */\n  CircularChartDataLabel3D.prototype.createTemplate = function (childElement, content, chart, point, series, dataLabelId) {\n    var templateFn = getTemplateFunction(content);\n    var templateElement;\n    try {\n      var tempObject = {\n        chart: chart,\n        series: series,\n        point: point\n      };\n      var templateId = dataLabelId + '-template';\n      var elementData = templateFn ? templateFn(tempObject, chart, templateId, dataLabelId) : [];\n      if (elementData.length) {\n        templateElement = Array.prototype.slice.call(elementData);\n        var len = templateElement.length;\n        for (var i = 0; i < len; i++) {\n          childElement.appendChild(templateElement[i]);\n        }\n      }\n      var reactCallback = void 0;\n      if (chart.isReact) {\n        chart.renderReactTemplates(reactCallback);\n      }\n    } catch (e) {\n      return childElement;\n    }\n    return childElement;\n  };\n  /**\n   * Draws a 3D data label for a circular 3D series.\n   * This method is responsible for drawing a 3D data label for a circular 3D series.\n   *\n   * @param {CircularChart3DSeries} series - The CircularChart3DSeries to which the data label belongs.\n   * @param {number} pointIndex - The index of the data label point in the series.\n   * @param  {CircularChart3DPoints} point - The CircularChart3DPoints representing the 3D point of the data label.\n   * @param {CircularChart3D} chart - The circular 3D chart instance.\n   * @returns {void}\n   */\n  CircularChartDataLabel3D.prototype.draw3DDataLabel = function (series, pointIndex, point, chart) {\n    var connectorHeight = series.dataLabel.connectorStyle.length ? parseFloat(series.dataLabel.connectorStyle.length) : series.dataLabel.connectorStyle.length;\n    var radius;\n    var pointX;\n    var pointY;\n    var degree;\n    var commonEventArgs = {\n      data: null\n    };\n    var location = {\n      x: 0,\n      y: 0\n    };\n    var seriesIndex = series.index;\n    var center = point.symbolLocation.center;\n    var dradius = point.symbolLocation.radius * series.coefficient;\n    if (isNullOrUndefined(connectorHeight)) {\n      connectorHeight = measureText(point.argsData.text, series.dataLabel.font, chart.themeStyle.datalabelFont).height;\n    }\n    if (series != null && series.dataLabel.position !== 'Inside') {\n      radius = point.symbolLocation.radius + connectorHeight;\n    } else if (series != null) {\n      radius = dradius + (point.symbolLocation.radius - dradius) / 2;\n    }\n    pointX = location.x = center.x + parseFloat(point.argsData.font.size) / 3 + radius * Math.cos(point.symbolLocation.angle);\n    pointY = location.y = center.y + parseFloat(point.argsData.font.size) / 3 + radius * Math.sin(point.symbolLocation.angle);\n    commonEventArgs.data = {\n      text: point.argsData.text,\n      location: {\n        x: pointX,\n        y: pointY\n      },\n      series: series,\n      pointIndex: pointIndex,\n      seriesIndex: seriesIndex\n    };\n    commonEventArgs.data.Text = commonEventArgs.data.text;\n    var size = measureText(point.argsData.text, series.dataLabel.font, chart.themeStyle.datalabelFont);\n    pointX = location.x = commonEventArgs.data.location.x;\n    pointY = location.y = commonEventArgs.data.location.y;\n    var tag = !series.dataLabel.template ? 'text' : 'template';\n    var saturationColor = this.getSaturatedColor(point, point.argsData.color, chart);\n    var element = {\n      width: size.width,\n      height: size.height,\n      fill: saturationColor,\n      label: commonEventArgs.data,\n      textAnchor: 'middle',\n      tag: tag,\n      font: point.argsData.font,\n      angle: 0,\n      id: chart.element.id + '-svg-data-label-text-' + pointIndex,\n      child: chart.groupElement\n    };\n    if (chart.circularChartLegend3DModule && chart.legendSettings.visible && point.visible && series.dataLabel.position === 'Outside') {\n      var rect = chart.circularChartLegend3DModule.legendBounds;\n      var legendpadding = chart.legendSettings.border.width / 2;\n      rect = new Rect(rect.x - legendpadding, rect.y - legendpadding, rect.width + 2 * legendpadding, rect.height + 2 * legendpadding);\n      var labelRegion = new Rect(element.label.location.x + size.width / 2 + 20, element.label.location.y + 2.5, element.width, element.height);\n      if (isOverlap(labelRegion, rect)) {\n        if (chart.circularChartLegend3DModule.position === 'Right') {\n          element.width = rect.x - labelRegion.x;\n        } else if (chart.circularChartLegend3DModule.position === 'Left') {\n          element.width = labelRegion.x - (rect.x + rect.width);\n          if (element.width < 0) {\n            element.width += labelRegion.width;\n            element.label.location.x = rect.x + rect.width - size.width / 2 + 20;\n          }\n        }\n        if (labelRegion && element.width < labelRegion.width) {\n          element.label.text = textTrim(element.width, element.label.text, series.dataLabel.font, chart.enableRtl, chart.themeStyle.datalabelFont);\n        }\n        if (element.label.text.length === 3 && element.label.text.indexOf('...') > -1) {\n          return;\n        }\n      }\n    }\n    var connectorPoints;\n    if (series.dataLabel.position !== 'Inside') {\n      connectorPoints = this.updateConnectorLine(point, pointIndex, series, connectorHeight, chart);\n    }\n    if (series.dataLabel.template && series.dataLabel.position !== 'Inside') {\n      var childElement = this.createTemplate(createElement('div', {\n        id: chart.element.id + '-series-data-label-' + 0,\n        styles: 'position: absolute;background-color:' + point.argsData.color + ';' + getFontStyle(point.argsData.font, chart.themeStyle.datalabelFont) + ';border:' + point.argsData.border.width + 'px solid ' + point.argsData.border.color + ';'\n      }), point.argsData.template, chart, point, series, chart.element.id + '-data-label-');\n      size = measureText(childElement.textContent, series.dataLabel.font, chart.themeStyle.datalabelFont);\n    }\n    if (chart.circularChartLegend3DModule && chart.legendSettings.visible && series.dataLabel.position === 'Outside') {\n      chart.visibleSeries[0].findMaxBounds(chart.visibleSeries[0].labelBound, {\n        x: pointX,\n        y: pointY,\n        width: size.width,\n        height: size.height\n      });\n    }\n    var padding = 0;\n    var heightPadding = 0;\n    var textAngle = point.symbolLocation.angle;\n    if (series.dataLabel.position !== 'Inside') {\n      if (textAngle > 1.5 && textAngle < 1.8 || textAngle > 1.3 && textAngle < 1.5 || textAngle > 4.5 && textAngle < 4.8 || textAngle > 4.3 && textAngle < 4.5) {\n        location.x = connectorPoints.x;\n        location.y = connectorPoints.y;\n        textAngle = connectorPoints.angle;\n      }\n      if (textAngle < Math.PI / 2 || textAngle >= Math.PI / 2 + Math.PI) {\n        padding = size.width / 2 + 20;\n        heightPadding = 5 / 2;\n      } else {\n        padding = -(size.width / 2 + (point.argsData.color !== 'transparent' || point.argsData.border.color ? 25 : 20));\n        heightPadding = 5 / 2;\n      }\n    }\n    if (!point.argsData.template && commonEventArgs.data.text !== '') {\n      var element_1 = {\n        tag: 'dataLabel',\n        series: series,\n        point: point,\n        pointIndex: pointIndex,\n        id: chart.element.id + '-svg-' + seriesIndex + '-data-label-' + pointIndex,\n        child: chart.groupElement\n      };\n      var angle = void 0;\n      var transform = '';\n      if (series.dataLabel.enableRotation) {\n        angle = degree = series.dataLabel.angle;\n        if (angle === 0) {\n          var toDegrees = function (angle) {\n            return angle * (180 / Math.PI);\n          };\n          var midAngle = toDegrees(point.symbolLocation.angle);\n          if (series.dataLabel.position === 'Outside') {\n            degree = 0;\n          } else if (midAngle >= 90 && midAngle <= 260) {\n            degree = midAngle + 180;\n            location.x = location.x - parseFloat(point.argsData.font.size) / 2;\n          } else {\n            degree = midAngle;\n          }\n        } else {\n          degree = angle > 360 ? angle - 360 : angle < -360 ? angle + 360 : angle;\n        }\n        transform = 'rotate(' + degree + ',' + location.x + ',' + location.y + ')';\n      }\n      element_1.transform = transform;\n      var borderElement = chart.polygon.createTextElement(chart.vector.vector3D(pointX + padding, pointY + heightPadding, point.symbolLocation.z ? point.symbolLocation.z : 0), element_1, 0, -size.height);\n      chart.circular3DPolygon.push(borderElement);\n    }\n    element.angle = series.dataLabel.enableRotation ? series.dataLabel.angle !== 0 ? series.dataLabel.angle : degree : 0;\n    var polygon = chart.polygon.createTextElement(chart.vector.vector3D(location.x + padding, location.y + heightPadding, -1), element, 0, -size.height);\n    chart.circular3DPolygon.push(polygon);\n  };\n  /**\n   * To find saturated color for datalabel.\n   *\n   * @param {CircularChart3DPoints} point - The point to get the color saturation.\n   * @param {string} color - The color to be saturated.\n   * @param {CircularChart3D} chart - The circular 3D chart instance.\n   * @returns {string} - The saturated color computed for the data label.\n   */\n  CircularChartDataLabel3D.prototype.getSaturatedColor = function (point, color, chart) {\n    var saturatedColor;\n    saturatedColor = color === 'transparent' ? this.getLabelBackground(point, chart) : color;\n    saturatedColor = saturatedColor === 'transparent' ? chart.theme.indexOf('Dark') > -1 || chart.theme.indexOf('HighContrast') > -1 ? 'black' : 'white' : saturatedColor;\n    var rgbValue = convertHexToColor(colorNameToHex(saturatedColor));\n    var contrast = Math.round((rgbValue.r * 299 + rgbValue.g * 587 + rgbValue.b * 114) / 1000);\n    return chart.theme === 'Bootstrap5' ? '#212529' : chart.theme === 'Bootstrap5Dark' ? '#DEE2E6' : contrast >= 128 ? chart.theme.indexOf('Tailwind3') > -1 ? '#4B5563' : 'black' : chart.theme.indexOf('Tailwind3') > -1 ? '#D1D5DB' : 'white';\n  };\n  /**\n   * To find background color for the datalabel.\n   *\n   * @param {CircularChart3DPoints} point - The point to get the color saturation.\n   * @param {CircularChart3D} chart - The circular 3D chart instance.\n   * @returns {string} - The background color computed for the data label.\n   */\n  CircularChartDataLabel3D.prototype.getLabelBackground = function (point, chart) {\n    return point.argsData.series.dataLabel.position === 'Outside' ? chart.background || chart.themeStyle.background : !point.y ? chart.theme.indexOf('dark') ? 'white' : 'black' : point.color;\n  };\n  /**\n   * Gets the data label text based on a specified format, chart configuration, and input label text.\n   *\n   * @param {string} labelFormat - The format string for the data label.\n   * @param {CircularChart3D} chart - The Circular 3D chart instance.\n   * @param {string} labelText - The original label text to be formatted.\n   * @returns {string} - The formatted data label text.\n   */\n  CircularChartDataLabel3D.prototype.getDatalabelText = function (labelFormat, chart, labelText) {\n    if (Number(labelText)) {\n      var customLabelFormat = labelFormat.match('{value}') !== null;\n      var format = chart.intl.getNumberFormat({\n        format: customLabelFormat ? '' : labelFormat,\n        useGrouping: chart.useGroupingSeparator\n      });\n      labelText = customLabelFormat ? labelFormat.replace('{value}', format(parseFloat(labelText))) : format(parseFloat(labelText));\n    }\n    return labelText;\n  };\n  /**\n   * Updates the connector line for a 3D point in a circular 3D series.\n   *\n   * @param {CircularChart3DPoints} point - The CircularChart3DPoints representing the 3D point.\n   * @param {number} pointIndex - The index of the point in the series.\n   * @param {CircularChart3DSeries} series - The instance of the circular 3D series.\n   * @param {number} connectorHeight - The height of the connector line.\n   * @param {CircularChart3D} chart - The circular 3D chart instance.\n   * @returns {void}\n   */\n  CircularChartDataLabel3D.prototype.updateConnectorLine = function (point, pointIndex, series, connectorHeight, chart) {\n    var drawPoints = [];\n    var symbolLocation = point.symbolLocation;\n    var x = symbolLocation.center.x + Math.cos(symbolLocation.angle) * symbolLocation.radius;\n    var y = symbolLocation.center.y + Math.sin(symbolLocation.angle) * symbolLocation.radius;\n    drawPoints.push({\n      x: x,\n      y: y\n    });\n    var labelRadiusFromOrigin = symbolLocation.radius + connectorHeight;\n    var angle = symbolLocation.angle;\n    x = symbolLocation.center.x + Math.cos(angle) * labelRadiusFromOrigin;\n    y = symbolLocation.center.y + Math.sin(angle) * labelRadiusFromOrigin;\n    drawPoints.push({\n      x: x,\n      y: y\n    });\n    var padding;\n    if (angle < Math.PI / 2 || angle >= Math.PI / 2 + Math.PI) {\n      padding = 10;\n    } else {\n      padding = -10;\n    }\n    drawPoints.push({\n      x: x + padding,\n      y: y\n    });\n    this.drawLineSegment(drawPoints, pointIndex, series, chart);\n    return {\n      x: x,\n      y: y,\n      angle: angle\n    };\n  };\n  /**\n   * Draws a line segment based on the provided points in 3D space for the circular 3D series.\n   *\n   * @param {CircularChart3DLocation[]} drawpoints - An array of CircularChart3DLocation representing the points in 3D space.\n   * @param {number} pointIndex - The index of the point in the series.\n   * @param {CircularChart3DSeries} series - The instance of the circular 3D series to which the point belongs.\n   * @param {CircularChart3D} chart - The circular 3D chart instance.\n   * @returns {void}\n   */\n  CircularChartDataLabel3D.prototype.drawLineSegment = function (drawpoints, pointIndex, series, chart) {\n    var vectorPoints = [];\n    for (var i = 0; i < drawpoints.length; i++) {\n      vectorPoints.push(chart.vector.vector3D(drawpoints[i].x, drawpoints[i].y, 0));\n    }\n    var seriesIndex = series.index;\n    var color = series.points[pointIndex].color;\n    var stroke = series.dataLabel.connectorStyle.color ? series.dataLabel.connectorStyle.color : color;\n    var line = {\n      width: series.dataLabel.connectorStyle.width,\n      stroke: stroke,\n      child: chart.groupElement,\n      tag: 'polyline',\n      dashArray: series.dataLabel.connectorStyle.dashArray,\n      id: chart.element.id + '-datalabel-series-' + seriesIndex + '-connector-' + pointIndex\n    };\n    var ploygon = chart.polygon.createPolyline(vectorPoints, line);\n    chart.circular3DPolygon.push(ploygon);\n  };\n  /**\n   * Gets the module name for the circular 3D data label.\n   *\n   * @returns {string} - The module name, which is 'CircularChartDataLabel3D'.\n   */\n  CircularChartDataLabel3D.prototype.getModuleName = function () {\n    return 'CircularChartDataLabel3D';\n  };\n  /**\n   * Destroys the circular 3D chart data label.\n   *\n   * @returns {void}\n   * @private\n   */\n  CircularChartDataLabel3D.prototype.destroy = function () {\n    /**\n     * Destroy method performed here.\n     */\n  };\n  return CircularChartDataLabel3D;\n}(ChildProperty);\nexport { CircularChartDataLabel3D };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","isNullOrUndefined","ChildProperty","Property","Complex","extend","getValue","createElement","Border","measureText","Rect","textRender","appendChildElement","colorNameToHex","convertHexToColor","getFontStyle","getTemplateFunction","measureElementRect","isOverlap","textTrim","CircularChart3DDataLabelFont","_super","apply","CircularChart3DConnector","CircularChart3DDataLabelSettings","width","color","fontFamily","size","fontStyle","fontWeight","CircularChartDataLabel3D","renderDataLabel","series","chart","templateId","element","id","index","labelBound","Infinity","dataLabelElement","points","point","pointText","getDatalabelText","dataLabel","format","text","y","toString","border","dashArray","argsFont","font","argsData","cancel","name","fill","template","trigger","visible","draw3DDataLabel","document","getElementById","redraw","createDataLabelTemplate","parentElement","data","labelIndex","location","childElement","createTemplate","styles","themeStyle","datalabelFont","calculateTemplateLabelSize","isReactCallback","elementRect","style","left","x","top","height","content","dataLabelId","templateFn","templateElement","tempObject","elementData","slice","call","len","appendChild","reactCallback","isReact","renderReactTemplates","e","pointIndex","connectorHeight","connectorStyle","parseFloat","radius","pointX","pointY","degree","commonEventArgs","seriesIndex","center","symbolLocation","dradius","coefficient","position","Math","cos","angle","sin","Text","tag","saturationColor","getSaturatedColor","label","textAnchor","child","groupElement","circularChartLegend3DModule","legendSettings","rect","legendBounds","legendpadding","labelRegion","enableRtl","indexOf","connectorPoints","updateConnectorLine","textContent","visibleSeries","findMaxBounds","padding","heightPadding","textAngle","PI","element_1","transform","enableRotation","toDegrees","midAngle","borderElement","polygon","createTextElement","vector","vector3D","z","circular3DPolygon","push","saturatedColor","getLabelBackground","theme","rgbValue","contrast","round","g","background","labelFormat","labelText","Number","customLabelFormat","match","intl","getNumberFormat","useGrouping","useGroupingSeparator","replace","drawPoints","labelRadiusFromOrigin","drawLineSegment","drawpoints","vectorPoints","stroke","line","ploygon","createPolyline","getModuleName","destroy"],"sources":["C:/Users/mkfun/Desktop/ct assignment/admin/node_modules/@syncfusion/ej2-charts/src/circularchart3d/renderer/dataLabel.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * Circular 3D chart data label.\n */\nimport { isNullOrUndefined, ChildProperty, Property, Complex, extend, getValue, createElement } from '@syncfusion/ej2-base';\nimport { Border } from '../../common/model/base';\nimport { measureText, Rect } from '@syncfusion/ej2-svg-base';\nimport { textRender } from '../../common/model/constants';\nimport { appendChildElement, colorNameToHex, convertHexToColor, getFontStyle, getTemplateFunction, measureElementRect, isOverlap, textTrim } from '../../common/utils/helper';\n/**\n * Configures the fonts in the circular 3D data label.\n */\nvar CircularChart3DDataLabelFont = /** @class */ (function (_super) {\n    __extends(CircularChart3DDataLabelFont, _super);\n    function CircularChart3DDataLabelFont() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property('Normal')\n    ], CircularChart3DDataLabelFont.prototype, \"fontStyle\", void 0);\n    __decorate([\n        Property('16px')\n    ], CircularChart3DDataLabelFont.prototype, \"size\", void 0);\n    __decorate([\n        Property('Normal')\n    ], CircularChart3DDataLabelFont.prototype, \"fontWeight\", void 0);\n    __decorate([\n        Property('')\n    ], CircularChart3DDataLabelFont.prototype, \"color\", void 0);\n    __decorate([\n        Property('Segoe UI')\n    ], CircularChart3DDataLabelFont.prototype, \"fontFamily\", void 0);\n    __decorate([\n        Property(1)\n    ], CircularChart3DDataLabelFont.prototype, \"opacity\", void 0);\n    return CircularChart3DDataLabelFont;\n}(ChildProperty));\nexport { CircularChart3DDataLabelFont };\n/**\n * Defines the appearance of the connector line for the circular 3D chart.\n */\nvar CircularChart3DConnector = /** @class */ (function (_super) {\n    __extends(CircularChart3DConnector, _super);\n    function CircularChart3DConnector() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property(null)\n    ], CircularChart3DConnector.prototype, \"color\", void 0);\n    __decorate([\n        Property(1)\n    ], CircularChart3DConnector.prototype, \"width\", void 0);\n    __decorate([\n        Property(null)\n    ], CircularChart3DConnector.prototype, \"length\", void 0);\n    __decorate([\n        Property('')\n    ], CircularChart3DConnector.prototype, \"dashArray\", void 0);\n    return CircularChart3DConnector;\n}(ChildProperty));\nexport { CircularChart3DConnector };\n/**\n * Configures the data label settings for circular 3D chart.\n */\nvar CircularChart3DDataLabelSettings = /** @class */ (function (_super) {\n    __extends(CircularChart3DDataLabelSettings, _super);\n    function CircularChart3DDataLabelSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property(false)\n    ], CircularChart3DDataLabelSettings.prototype, \"visible\", void 0);\n    __decorate([\n        Property(null)\n    ], CircularChart3DDataLabelSettings.prototype, \"name\", void 0);\n    __decorate([\n        Property('transparent')\n    ], CircularChart3DDataLabelSettings.prototype, \"fill\", void 0);\n    __decorate([\n        Property('Inside')\n    ], CircularChart3DDataLabelSettings.prototype, \"position\", void 0);\n    __decorate([\n        Property(0)\n    ], CircularChart3DDataLabelSettings.prototype, \"angle\", void 0);\n    __decorate([\n        Property(false)\n    ], CircularChart3DDataLabelSettings.prototype, \"enableRotation\", void 0);\n    __decorate([\n        Complex({ width: null, color: null }, Border)\n    ], CircularChart3DDataLabelSettings.prototype, \"border\", void 0);\n    __decorate([\n        Complex({ fontFamily: null, size: '12px', fontStyle: 'Normal', fontWeight: '400', color: null }, CircularChart3DDataLabelFont)\n    ], CircularChart3DDataLabelSettings.prototype, \"font\", void 0);\n    __decorate([\n        Complex({}, CircularChart3DConnector)\n    ], CircularChart3DDataLabelSettings.prototype, \"connectorStyle\", void 0);\n    __decorate([\n        Property(null)\n    ], CircularChart3DDataLabelSettings.prototype, \"template\", void 0);\n    __decorate([\n        Property('')\n    ], CircularChart3DDataLabelSettings.prototype, \"format\", void 0);\n    return CircularChart3DDataLabelSettings;\n}(ChildProperty));\nexport { CircularChart3DDataLabelSettings };\n/**\n * The 'CircularChartDataLabel3D' module used to render dataLabel in circular 3D charts.\n */\nvar CircularChartDataLabel3D = /** @class */ (function (_super) {\n    __extends(CircularChartDataLabel3D, _super);\n    function CircularChartDataLabel3D() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Renders data labels for a circular 3D series on the given chart.\n     *\n     * @param {CircularChart3DSeries} series - The circular 3D series for which data labels are to be rendered.\n     * @param {CircularChart3D} chart - The circular 3D chart instance.\n     * @returns {void}\n     * @private\n     */\n    CircularChartDataLabel3D.prototype.renderDataLabel = function (series, chart) {\n        var templateId = chart.element.id + '-series-' + series.index + '-data-label-collections';\n        series.labelBound = isNullOrUndefined(series.labelBound) ? new Rect(Infinity, Infinity, -Infinity, -Infinity) : series.labelBound;\n        series.dataLabelElement = createElement('div', { id: templateId });\n        for (var i = 0; i < series.points.length; i++) {\n            var point = series.points[i];\n            var pointText = this.getDatalabelText(series.dataLabel.format, chart, point.text ? point.text : isNullOrUndefined(point.y) ? '' : point.y.toString());\n            var border = { width: series.dataLabel.border.width, color: series.dataLabel.border.color,\n                dashArray: series.dataLabel.border.dashArray };\n            var argsFont = (extend({}, getValue('properties', series.dataLabel.font), null, true));\n            var argsData = {\n                cancel: false, name: textRender, series: series, point: point,\n                text: pointText, border: border, color: series.dataLabel.fill, template: series.dataLabel.template, font: argsFont\n            };\n            chart.trigger(textRender, argsData);\n            point.argsData = argsData;\n            if (point.visible && !argsData.cancel && !isNullOrUndefined(point.y)) {\n                this.draw3DDataLabel(series, point.index, point, chart);\n            }\n        }\n        if (series.dataLabel.template) {\n            appendChildElement(false, document.getElementById(chart.element.id + '_Secondary_Element'), series.dataLabelElement, chart.redraw, false, 'x', 'y', null, '', false, false, null);\n        }\n    };\n    /**\n     * Creates a data label template for a specific data point in a 3D series.\n     *\n     * @param {HTMLElement} parentElement - The parent HTML element to which the data label template is attached.\n     * @param {CircularChart3DSeries} series - The 3D series to which the data point belongs.\n     * @param {CircularChart3DDataLabelSettingsModel} dataLabel - The style settings for data labels.\n     * @param {CircularChart3DPoints} point - The data point for which the data label template is created.\n     * @param {CircularChart3DTextRenderEventArgs} data - The text render event arguments.\n     * @param {number} labelIndex - The index of the data label.\n     * @param {boolean} redraw - Indicates whether the template should be redrawn.\n     * @param {CircularChart3DLocation} location - The location values for the data label.\n     * @param {CircularChart3D} chart - The circular 3D chart instance.\n     * @returns {void}\n     * @private\n     */\n    CircularChartDataLabel3D.prototype.createDataLabelTemplate = function (parentElement, series, dataLabel, point, data, labelIndex, redraw, location, chart) {\n        var childElement = this.createTemplate(createElement('div', {\n            id: chart.element.id + '-series-' + series.index + '-data-label-' + labelIndex,\n            styles: 'position: absolute;background-color:' + data.color + ';' +\n                getFontStyle(dataLabel.font, chart.themeStyle.datalabelFont) + ';border:' + data.border.width + 'px solid ' + data.border.color + ';'\n        }), data.template, chart, point, series, chart.element.id + '-data-label-');\n        this.calculateTemplateLabelSize(parentElement, childElement, point, series, dataLabel, redraw, location);\n    };\n    /**\n     * Calculates the size of a data label template for a specific data point in a 3D series.\n     *\n     * @param {HTMLElement} parentElement - The parent HTML element containing the data label template.\n     * @param {HTMLElement} childElement - The child HTML element representing the data label template.\n     * @param {CircularChart3DPoints} point - The data point for which the data label template size is calculated.\n     * @param {CircularChart3DSeries} series - The circular 3D series to which the data point belongs.\n     * @param {CircularChart3DDataLabelSettingsModel} dataLabel - The style for data labels.\n     * @param {boolean} redraw - Indicates whether the template should be redrawn.\n     * @param {CircularChart3DLocation} location - The location values for the data label.\n     * @param {boolean} isReactCallback - Indicates whether the callback is associated with React.\n     * @returns {void}\n     */\n    CircularChartDataLabel3D.prototype.calculateTemplateLabelSize = function (parentElement, childElement, point, series, dataLabel, redraw, location, isReactCallback) {\n        var elementRect = measureElementRect(childElement, redraw, isReactCallback);\n        childElement.style.left = (location.x - (elementRect.width / 2)) + 'px';\n        childElement.style.top = (location.y - elementRect.height) + 'px';\n        appendChildElement(false, parentElement, childElement, redraw, true, 'left', 'top');\n    };\n    /**\n     * Creates a template element for rendering data labels associated with a specific data point in a 3D series.\n     *\n     * @param {HTMLElement} childElement - The child HTML element to contain the template content.\n     * @param {string | Function} content - The content or function for the data label template.\n     * @param {CircularChart3D} chart - The circular 3D chart instance.\n     * @param {CircularChart3DPoints} point - The data point for which the template is created (optional).\n     * @param {CircularChart3DSeries} series - The 3D series to which the data point belongs (optional).\n     * @param {string} dataLabelId - The ID for the data label element (optional).\n     * @returns {HTMLElement} - The created template element.\n     */\n    CircularChartDataLabel3D.prototype.createTemplate = function (childElement, content, chart, point, series, dataLabelId) {\n        var templateFn = getTemplateFunction(content);\n        var templateElement;\n        try {\n            var tempObject = { chart: chart, series: series, point: point };\n            var templateId = dataLabelId + '-template';\n            var elementData = templateFn ? templateFn(tempObject, chart, templateId, dataLabelId) : [];\n            if (elementData.length) {\n                templateElement = Array.prototype.slice.call(elementData);\n                var len = templateElement.length;\n                for (var i = 0; i < len; i++) {\n                    childElement.appendChild(templateElement[i]);\n                }\n            }\n            var reactCallback = void 0;\n            if (chart.isReact) {\n                chart.renderReactTemplates(reactCallback);\n            }\n        }\n        catch (e) {\n            return childElement;\n        }\n        return childElement;\n    };\n    /**\n     * Draws a 3D data label for a circular 3D series.\n     * This method is responsible for drawing a 3D data label for a circular 3D series.\n     *\n     * @param {CircularChart3DSeries} series - The CircularChart3DSeries to which the data label belongs.\n     * @param {number} pointIndex - The index of the data label point in the series.\n     * @param  {CircularChart3DPoints} point - The CircularChart3DPoints representing the 3D point of the data label.\n     * @param {CircularChart3D} chart - The circular 3D chart instance.\n     * @returns {void}\n     */\n    CircularChartDataLabel3D.prototype.draw3DDataLabel = function (series, pointIndex, point, chart) {\n        var connectorHeight = series.dataLabel.connectorStyle.length ?\n            parseFloat(series.dataLabel.connectorStyle.length) : series.dataLabel.connectorStyle.length;\n        var radius;\n        var pointX;\n        var pointY;\n        var degree;\n        var commonEventArgs = { data: null };\n        var location = { x: 0, y: 0 };\n        var seriesIndex = series.index;\n        var center = point.symbolLocation.center;\n        var dradius = point.symbolLocation.radius * series.coefficient;\n        if (isNullOrUndefined(connectorHeight)) {\n            connectorHeight = measureText(point.argsData.text, series.dataLabel.font, chart.themeStyle.datalabelFont).height;\n        }\n        if (series != null && series.dataLabel.position !== 'Inside') {\n            radius = point.symbolLocation.radius + connectorHeight;\n        }\n        else if (series != null) {\n            radius = dradius + (point.symbolLocation.radius - dradius) / 2;\n        }\n        pointX = location.x = center.x + (parseFloat(point.argsData.font.size) / 3) + radius * Math.cos(point.symbolLocation.angle);\n        pointY = location.y = center.y + (parseFloat(point.argsData.font.size) / 3) + radius * Math.sin(point.symbolLocation.angle);\n        commonEventArgs.data = {\n            text: point.argsData.text, location: { x: pointX, y: pointY },\n            series: series, pointIndex: pointIndex, seriesIndex: seriesIndex\n        };\n        commonEventArgs.data.Text = commonEventArgs.data.text;\n        var size = measureText(point.argsData.text, series.dataLabel.font, chart.themeStyle.datalabelFont);\n        pointX = location.x = commonEventArgs.data.location.x;\n        pointY = location.y = commonEventArgs.data.location.y;\n        var tag = (!series.dataLabel.template) ? 'text' : 'template';\n        var saturationColor = this.getSaturatedColor(point, point.argsData.color, chart);\n        var element = { width: size.width, height: size.height, fill: saturationColor, label: commonEventArgs.data, textAnchor: 'middle', tag: tag, font: point.argsData.font, angle: 0, id: chart.element.id + '-svg-data-label-text-' + pointIndex, child: chart.groupElement };\n        if (chart.circularChartLegend3DModule && chart.legendSettings.visible && point.visible && series.dataLabel.position === 'Outside') {\n            var rect = chart.circularChartLegend3DModule.legendBounds;\n            var legendpadding = chart.legendSettings.border.width / 2;\n            rect = new Rect(rect.x - legendpadding, rect.y - legendpadding, rect.width +\n                (2 * legendpadding), rect.height + (2 * legendpadding));\n            var labelRegion = new Rect(element.label.location.x + (size.width / 2) + 20, element.label.location.y + 2.5, element.width, element.height);\n            if (isOverlap(labelRegion, rect)) {\n                if (chart.circularChartLegend3DModule.position === 'Right') {\n                    element.width = rect.x - labelRegion.x;\n                }\n                else if (chart.circularChartLegend3DModule.position === 'Left') {\n                    element.width = labelRegion.x - (rect.x + rect.width);\n                    if (element.width < 0) {\n                        element.width += labelRegion.width;\n                        element.label.location.x = rect.x + rect.width - (size.width / 2) + 20;\n                    }\n                }\n                if (labelRegion && element.width < labelRegion.width) {\n                    element.label.text = textTrim(element.width, element.label.text, series.dataLabel.font, chart.enableRtl, chart.themeStyle.datalabelFont);\n                }\n                if (element.label.text.length === 3 && element.label.text.indexOf('...') > -1) {\n                    return;\n                }\n            }\n        }\n        var connectorPoints;\n        if (series.dataLabel.position !== 'Inside') {\n            connectorPoints = this.updateConnectorLine(point, pointIndex, series, connectorHeight, chart);\n        }\n        if (series.dataLabel.template && series.dataLabel.position !== 'Inside') {\n            var childElement = this.createTemplate(createElement('div', {\n                id: chart.element.id + '-series-data-label-' + 0,\n                styles: 'position: absolute;background-color:' + point.argsData.color + ';' +\n                    getFontStyle(point.argsData.font, chart.themeStyle.datalabelFont) + ';border:' + point.argsData.border.width + 'px solid ' + point.argsData.border.color + ';'\n            }), point.argsData.template, chart, point, series, chart.element.id + '-data-label-');\n            size = measureText(childElement.textContent, series.dataLabel.font, chart.themeStyle.datalabelFont);\n        }\n        if (chart.circularChartLegend3DModule && chart.legendSettings.visible && (series.dataLabel.position === 'Outside')) {\n            chart.visibleSeries[0].findMaxBounds(chart.visibleSeries[0].labelBound, { x: pointX, y: pointY, width: size.width, height: size.height });\n        }\n        var padding = 0;\n        var heightPadding = 0;\n        var textAngle = point.symbolLocation.angle;\n        if (series.dataLabel.position !== 'Inside') {\n            if ((textAngle > 1.5 && textAngle < 1.8) || (textAngle > 1.3 && textAngle < 1.5) ||\n                (textAngle > 4.5 && textAngle < 4.8) || (textAngle > 4.3 && textAngle < 4.5)) {\n                location.x = connectorPoints.x;\n                location.y = connectorPoints.y;\n                textAngle = connectorPoints.angle;\n            }\n            if (textAngle < (Math.PI / 2) || textAngle >= (Math.PI / 2) + Math.PI) {\n                padding = (size.width / 2) + 20;\n                heightPadding = 5 / 2;\n            }\n            else {\n                padding = -((size.width / 2) + (point.argsData.color !== 'transparent' || point.argsData.border.color ? 25 : 20));\n                heightPadding = 5 / 2;\n            }\n        }\n        if (!point.argsData.template && commonEventArgs.data.text !== '') {\n            var element_1 = { tag: 'dataLabel', series: series, point: point, pointIndex: pointIndex, id: chart.element.id + '-svg-' + seriesIndex + '-data-label-' + pointIndex, child: chart.groupElement };\n            var angle = void 0;\n            var transform = '';\n            if (series.dataLabel.enableRotation) {\n                angle = degree = series.dataLabel.angle;\n                if (angle === 0) {\n                    var toDegrees = function (angle) { return angle * (180 / Math.PI); };\n                    var midAngle = toDegrees(point.symbolLocation.angle);\n                    if (series.dataLabel.position === 'Outside') {\n                        degree = 0;\n                    }\n                    else if (midAngle >= 90 && midAngle <= 260) {\n                        degree = midAngle + 180;\n                        location.x = location.x - (parseFloat(point.argsData.font.size) / 2);\n                    }\n                    else {\n                        degree = midAngle;\n                    }\n                }\n                else {\n                    degree = (angle > 360) ? angle - 360 : (angle < -360) ? angle + 360 : angle;\n                }\n                transform = 'rotate(' + degree + ',' + (location.x) + ',' + (location.y) + ')';\n            }\n            element_1.transform = transform;\n            var borderElement = chart.polygon.createTextElement(chart.vector.vector3D(pointX + padding, pointY + heightPadding, (point.symbolLocation.z) ?\n                point.symbolLocation.z : 0), element_1, 0, -size.height);\n            chart.circular3DPolygon.push(borderElement);\n        }\n        element.angle = series.dataLabel.enableRotation ? series.dataLabel.angle !== 0 ? series.dataLabel.angle : degree : 0;\n        var polygon = chart.polygon.createTextElement(chart.vector.vector3D(location.x + padding, location.y + heightPadding, -1), element, 0, -size.height);\n        chart.circular3DPolygon.push(polygon);\n    };\n    /**\n     * To find saturated color for datalabel.\n     *\n     * @param {CircularChart3DPoints} point - The point to get the color saturation.\n     * @param {string} color - The color to be saturated.\n     * @param {CircularChart3D} chart - The circular 3D chart instance.\n     * @returns {string} - The saturated color computed for the data label.\n     */\n    CircularChartDataLabel3D.prototype.getSaturatedColor = function (point, color, chart) {\n        var saturatedColor;\n        saturatedColor = color === 'transparent' ? this.getLabelBackground(point, chart) : color;\n        saturatedColor = (saturatedColor === 'transparent') ? ((chart.theme.indexOf('Dark') > -1 || chart.theme.indexOf('HighContrast') > -1) ? 'black' : 'white') : saturatedColor;\n        var rgbValue = convertHexToColor(colorNameToHex(saturatedColor));\n        var contrast = Math.round((rgbValue.r * 299 + rgbValue.g * 587 + rgbValue.b * 114) / 1000);\n        return chart.theme === 'Bootstrap5' ? '#212529' : chart.theme === 'Bootstrap5Dark' ? '#DEE2E6' : contrast >= 128 ? chart.theme.indexOf('Tailwind3') > -1 ? '#4B5563' : 'black' : chart.theme.indexOf('Tailwind3') > -1 ? '#D1D5DB' : 'white';\n    };\n    /**\n     * To find background color for the datalabel.\n     *\n     * @param {CircularChart3DPoints} point - The point to get the color saturation.\n     * @param {CircularChart3D} chart - The circular 3D chart instance.\n     * @returns {string} - The background color computed for the data label.\n     */\n    CircularChartDataLabel3D.prototype.getLabelBackground = function (point, chart) {\n        return point.argsData.series.dataLabel.position === 'Outside' ?\n            chart.background || chart.themeStyle.background : !point.y ? chart.theme.indexOf('dark') ? 'white' : 'black' : point.color;\n    };\n    /**\n     * Gets the data label text based on a specified format, chart configuration, and input label text.\n     *\n     * @param {string} labelFormat - The format string for the data label.\n     * @param {CircularChart3D} chart - The Circular 3D chart instance.\n     * @param {string} labelText - The original label text to be formatted.\n     * @returns {string} - The formatted data label text.\n     */\n    CircularChartDataLabel3D.prototype.getDatalabelText = function (labelFormat, chart, labelText) {\n        if (Number(labelText)) {\n            var customLabelFormat = labelFormat.match('{value}') !== null;\n            var format = chart.intl.getNumberFormat({\n                format: customLabelFormat ? '' : labelFormat,\n                useGrouping: chart.useGroupingSeparator\n            });\n            labelText = customLabelFormat ? labelFormat.replace('{value}', format(parseFloat(labelText))) : format(parseFloat(labelText));\n        }\n        return labelText;\n    };\n    /**\n     * Updates the connector line for a 3D point in a circular 3D series.\n     *\n     * @param {CircularChart3DPoints} point - The CircularChart3DPoints representing the 3D point.\n     * @param {number} pointIndex - The index of the point in the series.\n     * @param {CircularChart3DSeries} series - The instance of the circular 3D series.\n     * @param {number} connectorHeight - The height of the connector line.\n     * @param {CircularChart3D} chart - The circular 3D chart instance.\n     * @returns {void}\n     */\n    CircularChartDataLabel3D.prototype.updateConnectorLine = function (point, pointIndex, series, connectorHeight, chart) {\n        var drawPoints = [];\n        var symbolLocation = point.symbolLocation;\n        var x = symbolLocation.center.x + Math.cos(symbolLocation.angle) * symbolLocation.radius;\n        var y = symbolLocation.center.y + Math.sin(symbolLocation.angle) * symbolLocation.radius;\n        drawPoints.push({ x: x, y: y });\n        var labelRadiusFromOrigin = symbolLocation.radius + connectorHeight;\n        var angle = symbolLocation.angle;\n        x = symbolLocation.center.x + Math.cos(angle) * labelRadiusFromOrigin;\n        y = symbolLocation.center.y + Math.sin(angle) * labelRadiusFromOrigin;\n        drawPoints.push({ x: x, y: y });\n        var padding;\n        if (angle < (Math.PI / 2) || angle >= (Math.PI / 2) + Math.PI) {\n            padding = 10;\n        }\n        else {\n            padding = -10;\n        }\n        drawPoints.push({ x: x + padding, y: y });\n        this.drawLineSegment(drawPoints, pointIndex, series, chart);\n        return ({ x: x, y: y, angle: angle });\n    };\n    /**\n     * Draws a line segment based on the provided points in 3D space for the circular 3D series.\n     *\n     * @param {CircularChart3DLocation[]} drawpoints - An array of CircularChart3DLocation representing the points in 3D space.\n     * @param {number} pointIndex - The index of the point in the series.\n     * @param {CircularChart3DSeries} series - The instance of the circular 3D series to which the point belongs.\n     * @param {CircularChart3D} chart - The circular 3D chart instance.\n     * @returns {void}\n     */\n    CircularChartDataLabel3D.prototype.drawLineSegment = function (drawpoints, pointIndex, series, chart) {\n        var vectorPoints = [];\n        for (var i = 0; i < drawpoints.length; i++) {\n            vectorPoints.push(chart.vector.vector3D(drawpoints[i].x, drawpoints[i].y, 0));\n        }\n        var seriesIndex = series.index;\n        var color = series.points[pointIndex].color;\n        var stroke = series.dataLabel.connectorStyle.color ? series.dataLabel.connectorStyle.color : color;\n        var line = {\n            width: series.dataLabel.connectorStyle.width,\n            stroke: stroke,\n            child: chart.groupElement,\n            tag: 'polyline',\n            dashArray: series.dataLabel.connectorStyle.dashArray,\n            id: chart.element.id + '-datalabel-series-' + seriesIndex + '-connector-' + pointIndex\n        };\n        var ploygon = chart.polygon.createPolyline(vectorPoints, line);\n        chart.circular3DPolygon.push(ploygon);\n    };\n    /**\n     * Gets the module name for the circular 3D data label.\n     *\n     * @returns {string} - The module name, which is 'CircularChartDataLabel3D'.\n     */\n    CircularChartDataLabel3D.prototype.getModuleName = function () {\n        return 'CircularChartDataLabel3D';\n    };\n    /**\n     * Destroys the circular 3D chart data label.\n     *\n     * @returns {void}\n     * @private\n     */\n    CircularChartDataLabel3D.prototype.destroy = function () {\n        /**\n         * Destroy method performed here.\n         */\n    };\n    return CircularChartDataLabel3D;\n}(ChildProperty));\nexport { CircularChartDataLabel3D };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}