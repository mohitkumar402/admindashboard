{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * AccumulationChart base file\n */\nimport { Property, ChildProperty, Complex, createElement, Browser, animationMode, extend } from '@syncfusion/ej2-base';\nimport { isNullOrUndefined, getValue } from '@syncfusion/ej2-base';\nimport { DataManager } from '@syncfusion/ej2-data';\nimport { Border, Font, Animation, EmptyPointSettings, Connector, Accessibility } from '../../common/model/base';\nimport { Rect, PathOption, measureText } from '@syncfusion/ej2-svg-base';\nimport { stringToNumber, appendChildElement, subtractRect } from '../../common/utils/helper';\nimport { seriesRender, pointRender } from '../../common/model/constants';\nimport { getSeriesColor } from '../../common/model/theme';\nimport { getElement, firstToLowerCase } from '../../common/utils/helper';\nimport { BaseSelection } from '../../common/user-interaction/selection';\nimport { LegendOptions } from '../../common/legend/legend';\n/**\n * Configures the annotation settings for an accumulation chart.\n * Annotations are used to highlight or provide additional information about specific points or regions in the accumulation chart.\n */\nvar AccumulationAnnotationSettings = /** @class */function (_super) {\n  __extends(AccumulationAnnotationSettings, _super);\n  function AccumulationAnnotationSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  __decorate([Property(null)], AccumulationAnnotationSettings.prototype, \"content\", void 0);\n  __decorate([Property('0')], AccumulationAnnotationSettings.prototype, \"x\", void 0);\n  __decorate([Property('0')], AccumulationAnnotationSettings.prototype, \"y\", void 0);\n  __decorate([Property('Pixel')], AccumulationAnnotationSettings.prototype, \"coordinateUnits\", void 0);\n  __decorate([Property('Chart')], AccumulationAnnotationSettings.prototype, \"region\", void 0);\n  __decorate([Property('Middle')], AccumulationAnnotationSettings.prototype, \"verticalAlignment\", void 0);\n  __decorate([Property('Center')], AccumulationAnnotationSettings.prototype, \"horizontalAlignment\", void 0);\n  __decorate([Property(null)], AccumulationAnnotationSettings.prototype, \"description\", void 0);\n  return AccumulationAnnotationSettings;\n}(ChildProperty);\nexport { AccumulationAnnotationSettings };\n/**\n * This class provides options to customize the appearance and behavior of data labels within a series.\n */\nvar AccumulationDataLabelSettings = /** @class */function (_super) {\n  __extends(AccumulationDataLabelSettings, _super);\n  function AccumulationDataLabelSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  __decorate([Property(false)], AccumulationDataLabelSettings.prototype, \"visible\", void 0);\n  __decorate([Property(true)], AccumulationDataLabelSettings.prototype, \"showZero\", void 0);\n  __decorate([Property(null)], AccumulationDataLabelSettings.prototype, \"name\", void 0);\n  __decorate([Property('transparent')], AccumulationDataLabelSettings.prototype, \"fill\", void 0);\n  __decorate([Property('Inside')], AccumulationDataLabelSettings.prototype, \"position\", void 0);\n  __decorate([Property(5)], AccumulationDataLabelSettings.prototype, \"rx\", void 0);\n  __decorate([Property(5)], AccumulationDataLabelSettings.prototype, \"ry\", void 0);\n  __decorate([Property(0)], AccumulationDataLabelSettings.prototype, \"angle\", void 0);\n  __decorate([Property(false)], AccumulationDataLabelSettings.prototype, \"enableRotation\", void 0);\n  __decorate([Complex({\n    width: null,\n    color: null\n  }, Border)], AccumulationDataLabelSettings.prototype, \"border\", void 0);\n  __decorate([Complex({\n    fontFamily: null,\n    size: null,\n    fontStyle: null,\n    fontWeight: null,\n    color: null\n  }, Font)], AccumulationDataLabelSettings.prototype, \"font\", void 0);\n  __decorate([Complex({}, Connector)], AccumulationDataLabelSettings.prototype, \"connectorStyle\", void 0);\n  __decorate([Property(null)], AccumulationDataLabelSettings.prototype, \"template\", void 0);\n  __decorate([Property('')], AccumulationDataLabelSettings.prototype, \"format\", void 0);\n  __decorate([Property(null)], AccumulationDataLabelSettings.prototype, \"maxWidth\", void 0);\n  __decorate([Property('Ellipsis')], AccumulationDataLabelSettings.prototype, \"textOverflow\", void 0);\n  __decorate([Property('Normal')], AccumulationDataLabelSettings.prototype, \"textWrap\", void 0);\n  return AccumulationDataLabelSettings;\n}(ChildProperty);\nexport { AccumulationDataLabelSettings };\n/**\n * The `PieCenter` class provides options to set the center position for the Pie series in a chart.\n */\nvar PieCenter = /** @class */function (_super) {\n  __extends(PieCenter, _super);\n  function PieCenter() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  __decorate([Property('50%')], PieCenter.prototype, \"x\", void 0);\n  __decorate([Property('50%')], PieCenter.prototype, \"y\", void 0);\n  return PieCenter;\n}(ChildProperty);\nexport { PieCenter };\n/**\n * The `AccPoints` class is used to define and manage the data points within a series of accumulation charts.\n *\n * @public\n */\nvar AccPoints = /** @class */function () {\n  function AccPoints() {\n    /** Accumulation point visibility. */\n    this.visible = true;\n    /** Accumulation point symbol location. */\n    this.symbolLocation = null;\n    /** @private */\n    this.region = null;\n    /** @private */\n    this.labelRegion = null;\n    /** @private */\n    this.labelVisible = true;\n    this.regions = null;\n    /** @private */\n    this.isExplode = false;\n    /** @private */\n    this.isClubbed = false;\n    /** @private */\n    this.isSliced = false;\n    /** @private  */\n    this.argsData = null;\n    /** @private */\n    this.isLabelUpdated = null;\n    /** @private */\n    this.initialLabelRegion = null;\n  }\n  return AccPoints;\n}();\nexport { AccPoints };\n/**\n * Configures the series in the accumulation chart.\n */\nvar AccumulationSeries = /** @class */function (_super) {\n  __extends(AccumulationSeries, _super);\n  function AccumulationSeries() {\n    /**\n     * Specifies the data source for the series. It can be an array of JSON objects, or an instance of DataManager.\n     * ```html\n     * <div id='Pie'></div>\n     * ```\n     * ```typescript\n     * let dataManager: DataManager = new DataManager({\n     *    url: 'https://services.syncfusion.com/js/production/api/orders'\n     * });\n     * let query: Query = new Query().take(5);\n     * let pie: AccumulationChart = new AccumulationChart({\n     * ...\n     *     series: [{\n     *        dataSource: dataManager,\n     *        xName: 'CustomerID',\n     *        yName: 'Freight',\n     *        query: query\n     *    }],\n     * ...\n     * });\n     * pie.appendTo('#Pie');\n     * ```\n     *\n     * @default ''\n     */\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /** @private */\n    _this.points = [];\n    /** @private */\n    _this.clubbedPoints = [];\n    /** @private */\n    _this.sumOfPoints = 0;\n    /** @private */\n    _this.isRectSeries = true;\n    /** @private */\n    _this.clipRect = new Rect(0, 0, 0, 0);\n    /** @private */\n    _this.category = 'Series';\n    /** @private */\n    _this.rightSidePoints = [];\n    /** @private */\n    _this.leftSidePoints = [];\n    return _this;\n  }\n  /**\n   * To refresh the Datamanager for series.\n   *\n   * @private\n   * @param {AccumulationChart} accumulation - The accumulation chart control.\n   * @param {boolean} render - Specifies whether to render the accumulation chart after refreshing the DataManager.\n   * @returns {void}\n   */\n  AccumulationSeries.prototype.refreshDataManager = function (accumulation, render) {\n    var _this = this;\n    this.accumulation = accumulation;\n    this.radius = this.radius ? this.radius : Browser.isDevice && this.dataLabel.position === 'Outside' ? '40%' : '80%';\n    var dateSource = this.dataSource || accumulation.dataSource;\n    if (!(dateSource instanceof DataManager) && isNullOrUndefined(this.query)) {\n      this.dataManagerSuccess({\n        result: dateSource,\n        count: dateSource.length\n      }, accumulation, render);\n      return;\n    }\n    var dataManager = this.dataModule.getData(this.dataModule.generateQuery().requiresCount());\n    dataManager.then(function (e) {\n      return _this.dataManagerSuccess(e, accumulation);\n    });\n  };\n  /**\n   * To get points on dataManager is success.\n   *\n   * @private\n   * @param {Object} e - The data manager result object.\n   * @param {Object} e.result - The result of the data manager process.\n   * @param {number} e.count - The count of items in the result.\n   * @param {AccumulationChart} accumulation - The accumulation chart control.\n   * @param {boolean} render - Specifies whether to render the accumulation chart after retrieving the points.\n   * @returns {void}\n   */\n  AccumulationSeries.prototype.dataManagerSuccess = function (e, accumulation, render) {\n    if (render === void 0) {\n      render = true;\n    }\n    var argsData = {\n      name: seriesRender,\n      series: this,\n      data: e.result\n    };\n    accumulation.allowServerDataBinding = false;\n    accumulation.trigger(seriesRender, argsData);\n    this.resultData = e.result !== '' ? e.result : [];\n    if (!accumulation.isBlazor && !render) {\n      this.getPoints(this.resultData, accumulation); // To update datasource using onPropertyChanged method. incident id: 290690\n    }\n    if (++accumulation.seriesCounts === accumulation.visibleSeries.length && render || window['Blazor'] && !render && accumulation.seriesCounts === 1) {\n      this.getPoints(this.resultData, accumulation);\n      accumulation.refreshChart();\n    }\n  };\n  /**\n   * To find points from result data.\n   *\n   * @private\n   * @param {Object} result - The result of the process.\n   * @param {AccumulationChart} accumulation - The accumulation chart control.\n   * @returns {void}\n   */\n  AccumulationSeries.prototype.getPoints = function (result, accumulation) {\n    var length = Object.keys(result).length;\n    this.sumOfPoints = 0;\n    if (length === 0) {\n      // fix for Pie datalabels are not removed for empty datasource\n      this.points = [];\n      return null;\n    }\n    this.findSumOfPoints(result);\n    this.points = [];\n    this.clubbedPoints = [];\n    this.sumOfClub = 0;\n    var point;\n    var colors = this.palettes.length ? this.palettes : getSeriesColor(accumulation.theme);\n    var clubValue = stringToNumber(this.groupTo, this.sumOfPoints);\n    for (var i = 0; i < length; i++) {\n      point = this.setPoints(result, i, colors, accumulation);\n      if (!this.isClub(point, clubValue, i)) {\n        if (isNullOrUndefined(point.y)) {\n          point.visible = false;\n        }\n        this.pushPoints(point, colors);\n      } else {\n        point.index = this.clubbedPoints.length;\n        point.isExplode = true;\n        this.clubbedPoints.push(point);\n        point.isSliced = true;\n      }\n    }\n    this.lastGroupTo = this.groupTo;\n    if (this.sumOfClub > 0) {\n      var clubPoint_1 = this.generateClubPoint();\n      this.pushPoints(clubPoint_1, colors);\n      var pointsLength_1 = this.points.length - 1;\n      this.clubbedPoints.map(function (point) {\n        point.index += pointsLength_1;\n        point.color = clubPoint_1.color;\n      });\n    }\n    if (this.clubbedPoints.length && this.explode && this.type === 'Pie' && (this.explodeAll || this.points[this.points.length - 1].index === this.explodeIndex)) {\n      this.points.splice(this.points.length - 1, 1);\n      this.points = this.points.concat(this.clubbedPoints);\n    }\n  };\n  AccumulationSeries.prototype.generateClubPoint = function () {\n    var clubPoint = new AccPoints();\n    clubPoint.isClubbed = true;\n    clubPoint.x = 'Others';\n    clubPoint.y = this.sumOfClub;\n    clubPoint.text = clubPoint.originalText = clubPoint.x + ': ' + this.sumOfClub;\n    clubPoint.sliceRadius = '80%';\n    return clubPoint;\n  };\n  /**\n   * Method to set point index and color.\n   *\n   * @param {AccPoints} point - The point data.\n   * @param {string[]} colors - The array of colors used in the accumulation chart.\n   * @returns {void}\n   */\n  AccumulationSeries.prototype.pushPoints = function (point, colors) {\n    point.index = this.points.length;\n    point.isExplode = this.explodeAll || point.index === this.explodeIndex;\n    point.color = point.color || colors[point.index % colors.length];\n    this.points.push(point);\n  };\n  /**\n   * Method to find club point.\n   *\n   * @param {AccPoints} point - The point data.\n   * @param {number} clubValue - The club value for accumulation chart.\n   * @param {number} index - The index of the point in the data set.\n   * @returns {boolean} - false\n   */\n  AccumulationSeries.prototype.isClub = function (point, clubValue, index) {\n    if (!isNullOrUndefined(clubValue)) {\n      if (this.groupMode === 'Value' && Math.abs(point.y) <= clubValue) {\n        this.sumOfClub += Math.abs(point.y);\n        return true;\n      } else if (this.groupMode === 'Point' && index >= clubValue) {\n        this.sumOfClub += Math.abs(point.y);\n        return true;\n      }\n    }\n    return false;\n  };\n  /**\n   * Method to find sum of points in the series.\n   *\n   * @param {Object} result - The result of the process.\n   * @returns {void}\n   */\n  AccumulationSeries.prototype.findSumOfPoints = function (result) {\n    var length = Object.keys(result).length;\n    for (var i = 0; i < length; i++) {\n      if (!isNullOrUndefined(result[i]) && !isNullOrUndefined(result[i][this.yName]) && !isNaN(result[i][this.yName])) {\n        this.sumOfPoints += Math.abs(result[i][this.yName]);\n      }\n    }\n  };\n  /**\n   * Method to set points x, y and text from data source.\n   *\n   * @param {Object} data - The data containing information for the points.\n   * @param {number} i - The index of the current point in the data set.\n   * @param {string[]} colors - The array of colors used in the accumulation chart.\n   * @param {AccumulationChart} accumulation - The accumulation chart control.\n   * @returns {AccPoints} - The point data retrieved from the specified index.\n   */\n  AccumulationSeries.prototype.setPoints = function (data, i, colors, accumulation) {\n    var point = new AccPoints();\n    point.x = getValue(this.xName, data[i]);\n    point.y = getValue(this.yName, data[i]);\n    point.legendImageUrl = getValue(this.legendImageUrl, data[i]);\n    point.color = getValue(this.pointColorMapping, data[i]);\n    point.text = point.originalText = getValue(this.dataLabel.name || '', data[i]);\n    point.tooltip = getValue(this.tooltipMappingName || '', data[i]);\n    point.sliceRadius = getValue(this.radius, data[i]);\n    point.sliceRadius = isNullOrUndefined(point.sliceRadius) ? '80%' : point.sliceRadius;\n    point.separatorY = accumulation.intl.formatNumber(point.y, {\n      useGrouping: accumulation.useGroupingSeparator\n    });\n    this.setAccEmptyPoint(point, i, data);\n    return point;\n  };\n  /**\n   * Method render the series elements for accumulation chart.\n   *\n   * @private\n   * @param {AccumulationChart} accumulation - The AccumulationChart control.\n   * @param {boolean} redraw - Specifies whether to redraw the points.\n   * @returns {void}\n   */\n  AccumulationSeries.prototype.renderSeries = function (accumulation, redraw) {\n    var seriesGroup = redraw ? getElement(accumulation.element.id + '_Series_' + this.index) : accumulation.renderer.createGroup({\n      id: accumulation.element.id + '_Series_' + this.index\n    });\n    this.renderPoints(accumulation, seriesGroup, redraw);\n    var datalabelGroup;\n    if (accumulation.accumulationDataLabelModule && this.dataLabel.visible) {\n      datalabelGroup = accumulation.renderer.createGroup({\n        id: accumulation.element.id + '_datalabel_Series_' + this.index\n      });\n      datalabelGroup.style.visibility = (this.animation.enable && animationMode !== 'Disable' || animationMode === 'Enable') && accumulation.animateSeries && this.type === 'Pie' ? 'hidden' : 'visible';\n      this.renderDataLabel(accumulation, datalabelGroup, redraw);\n    }\n    if (this.type === 'Pie') {\n      if (!accumulation.redraw) {\n        this.findMaxBounds(this.labelBound, this.accumulationBound);\n      }\n      accumulation.pieSeriesModule.animateSeries(accumulation, this.animation, this, seriesGroup, this.borderRadius, this.points);\n    }\n    if (!accumulation.redraw && accumulation.accumulationLegendModule) {\n      this.labelBound.x -= accumulation.explodeDistance;\n      this.labelBound.y -= accumulation.explodeDistance;\n      this.labelBound.height += accumulation.explodeDistance - this.labelBound.y;\n      this.labelBound.width += accumulation.explodeDistance - this.labelBound.x;\n    }\n  };\n  /**\n   * Method render the points elements for accumulation chart series.\n   *\n   * @param {AccumulationChart} accumulation - The AccumulationChart control.\n   * @param {Element} seriesGroup - The group element to contain the point elements.\n   * @param {boolean} redraw - Specifies whether to redraw the points.\n   * @param {boolean} previouRadius - Specifies the previous radius of the pie when animating the individual series point.\n   * @param {boolean} previousCenter - Specifies the previous center of the pie when animating the individual series point.\n   * @param {boolean} pointAnimation - Specifies whether the point based animation is enabled.\n   * @returns {void}\n   */\n  AccumulationSeries.prototype.renderPoints = function (accumulation, seriesGroup, redraw, previouRadius, previousCenter, pointAnimation) {\n    var pointId = accumulation.element.id + '_Series_' + this.index + '_Point_';\n    var option;\n    var patternFill;\n    var options = [];\n    var visiblePoints = [];\n    var patterns = ['Chessboard', 'Dots', 'DiagonalForward', 'Crosshatch', 'Pacman', 'DiagonalBackward', 'Grid', 'Turquoise', 'Star', 'Triangle', 'Circle', 'Tile', 'HorizontalDash', 'VerticalDash', 'Rectangle', 'Box', 'VerticalStripe', 'HorizontalStripe', 'Bubble'];\n    for (var _i = 0, _a = this.points; _i < _a.length; _i++) {\n      var point = _a[_i];\n      point.percentage = +(point.y / this.sumOfPoints * 100).toFixed(2);\n      var argsData = {\n        cancel: false,\n        name: pointRender,\n        series: this,\n        point: point,\n        fill: point.color,\n        border: this.isEmpty(point) ? {\n          width: this.emptyPointSettings.border.width,\n          color: this.emptyPointSettings.border.color\n        } : {\n          width: this.border.width,\n          color: this.border.color\n        },\n        pattern: this.applyPattern ? patterns[point.index % patterns.length] : 'None'\n      };\n      accumulation.trigger(pointRender, argsData);\n      point.color = argsData.fill;\n      patternFill = point.color;\n      if (this.applyPattern) {\n        var selection = new BaseSelection(accumulation);\n        patternFill = selection.pattern(accumulation, point.color, point.index, argsData.pattern, this.opacity);\n      }\n      option = new PathOption(pointId + point.index, patternFill, argsData.border.width || 1, argsData.border.color || point.color, this.opacity, argsData.series.dashArray, '');\n      if (this.funnelMode === 'Trapezoidal' && this.type === 'Funnel') {\n        options.push(option);\n        if (point.visible) {\n          visiblePoints.push(point);\n        }\n      } else {\n        accumulation[firstToLowerCase(this.type) + 'SeriesModule'].renderPoint(point, this, accumulation, option, seriesGroup, redraw, previouRadius, previousCenter, pointAnimation);\n      }\n    }\n    if (this.funnelMode === 'Trapezoidal' && this.type === 'Funnel') {\n      accumulation[firstToLowerCase(this.type) + 'SeriesModule'].renderTrapezoidalFunnel(this, visiblePoints, accumulation, options, seriesGroup, redraw);\n    } else {\n      appendChildElement(false, accumulation.getSeriesElement(), seriesGroup, redraw);\n    }\n  };\n  /**\n   * Method render the datalabel elements for accumulation chart.\n   *\n   * @param {AccumulationChart} accumulation - The AccumulationChart control.\n   * @param {Element} datalabelGroup - The group element to contain the data label elements.\n   * @param {boolean} redraw - Specifies whether to redraw the data labels.\n   * @returns {void}\n   */\n  AccumulationSeries.prototype.renderDataLabel = function (accumulation, datalabelGroup, redraw) {\n    accumulation.accumulationDataLabelModule.findAreaRect();\n    var element = createElement('div', {\n      id: accumulation.element.id + '_Series_0' + '_DataLabelCollections'\n    });\n    this.leftSidePoints = [];\n    this.rightSidePoints = [];\n    var firstQuarter = [];\n    var secondQuarter = [];\n    for (var _i = 0, _a = this.points; _i < _a.length; _i++) {\n      var point = _a[_i];\n      if (point.visible) {\n        if (this.dataLabel.showZero || !this.dataLabel.showZero && (point.y !== 0 || point.y === 0 && this.emptyPointSettings.mode === 'Zero')) {\n          accumulation.accumulationDataLabelModule.renderDataLabel(point, this.dataLabel, datalabelGroup, this.points, this.index, element, redraw);\n        }\n      }\n      if (point.midAngle >= 90 && point.midAngle <= 270) {\n        this.leftSidePoints.push(point);\n      } else {\n        if (point.midAngle >= 0 && point.midAngle <= 90) {\n          secondQuarter.push(point);\n        } else {\n          firstQuarter.push(point);\n        }\n      }\n    }\n    firstQuarter.sort(function (a, b) {\n      return a.midAngle - b.midAngle;\n    });\n    secondQuarter.sort(function (a, b) {\n      return a.midAngle - b.midAngle;\n    });\n    this.leftSidePoints.sort(function (a, b) {\n      return a.midAngle - b.midAngle;\n    });\n    this.rightSidePoints = firstQuarter.concat(secondQuarter);\n    accumulation.accumulationDataLabelModule.drawDataLabels(this, this.dataLabel, datalabelGroup, element, redraw);\n    if (this.dataLabel.template !== null && element.childElementCount) {\n      var dataLabelCallBack = accumulation.accumulationDataLabelModule.drawDataLabels.bind(accumulation.accumulationDataLabelModule, this, this.dataLabel, datalabelGroup, element, redraw);\n      if (accumulation.isReact) {\n        accumulation.renderReactTemplates(dataLabelCallBack);\n      }\n      appendChildElement(false, getElement(accumulation.element.id + '_Secondary_Element'), element, redraw);\n    }\n    appendChildElement(false, accumulation.getSeriesElement(), datalabelGroup, redraw);\n  };\n  /**\n   * To find maximum bounds for smart legend placing.\n   *\n   * @private\n   * @param {Rect} totalbound - The total bounding rect.\n   * @param {Rect} bound - The bounding rect to be compared.\n   * @returns {void}\n   */\n  AccumulationSeries.prototype.findMaxBounds = function (totalbound, bound) {\n    totalbound.x = bound.x < totalbound.x ? bound.x : totalbound.x;\n    totalbound.y = bound.y < totalbound.y ? bound.y : totalbound.y;\n    totalbound.height = bound.y + bound.height > totalbound.height ? bound.y + bound.height : totalbound.height;\n    totalbound.width = bound.x + bound.width > totalbound.width ? bound.x + bound.width : totalbound.width;\n  };\n  /**\n   * Finds the maximum width of the labels for legend placement.\n   *\n   * @private\n   * @returns {number} The maximum label width.\n   */\n  AccumulationSeries.prototype.findMaxLabelWidth = function () {\n    var max;\n    for (var i = 0; i < this.points.length; i++) {\n      max = this.points[0].textSize.width;\n      if (max < this.points[i].textSize.width) {\n        max = this.points[i].textSize.width;\n      }\n    }\n    return max;\n  };\n  /**\n   * To set empty point value for null points.\n   *\n   * @private\n   * @param {AccPoints} point - The point to set as empty.\n   * @param {number} i - The index of the point in the data set.\n   * @param {Object} data - The data object.\n   * @returns {void}\n   */\n  AccumulationSeries.prototype.setAccEmptyPoint = function (point, i, data) {\n    if (!(isNullOrUndefined(point.y) || isNaN(point.y))) {\n      return null;\n    }\n    point.color = this.emptyPointSettings.fill || point.color;\n    switch (this.emptyPointSettings.mode) {\n      case 'Zero':\n        point.y = 0;\n        point.visible = true;\n        break;\n      case 'Average':\n        {\n          var previous = data[i - 1] ? data[i - 1][this.yName] || 0 : 0;\n          var next = data[i + 1] ? data[i + 1][this.yName] || 0 : 0;\n          point.y = (Math.abs(previous) + Math.abs(next)) / 2;\n          this.sumOfPoints += point.y;\n          point.visible = true;\n          break;\n        }\n      default:\n        point.visible = false;\n        break;\n    }\n  };\n  /**\n   * Updates the data source for the series.\n   *\n   * @function setData\n   * @param {Object} data – Updated data source for the series.\n   * @param {number} duration – The duration for the animation.\n   * @returns {void}\n   */\n  AccumulationSeries.prototype.setData = function (data, duration) {\n    if (!data) {\n      return null;\n    }\n    var samePoints = false;\n    if (this.dataSource.length === data.length) {\n      samePoints = true;\n      for (var i = 0; i < data.length; i++) {\n        if (this.dataSource[i][this.xName] === data[i][this.xName]) {\n          var point = this.points[i];\n          var existingPoint = this.dataSource[i];\n          if (existingPoint[this.yName] !== data[i][this.yName]) {\n            point.y = data[i][this.yName];\n            this.dataSource[i] = data[i];\n          }\n        } else {\n          samePoints = false;\n          break;\n        }\n      }\n    }\n    if (!samePoints) {\n      this.dataSource = data;\n    } else {\n      this.sumOfPoints = 0;\n      var visiblePoints = [];\n      for (var i = 0; i < this.resultData.length; i++) {\n        if (this.points[i] && this.points[i].visible) {\n          visiblePoints.push(this.resultData[i]);\n        }\n      }\n      this.findSumOfPoints(visiblePoints);\n      this.accumulation.redraw = this.borderRadius ? false : this.accumulation.enableAnimation;\n      this.accumulation.animateSeries = false;\n      var chartDuration = this.accumulation.duration;\n      this.accumulation.duration = isNullOrUndefined(duration) ? 500 : duration;\n      this.accumulation[firstToLowerCase(this.type) + 'SeriesModule'].initProperties(this.accumulation, this);\n      this.renderPoints(this.accumulation, getElement(this.accumulation.element.id + '_Series_' + this.index), this.accumulation.redraw, null, null, true);\n      if (this.accumulation.centerLabel.text) {\n        this.accumulation.renderCenterLabel(true, true);\n      }\n      if (this.accumulation.annotationModule) {\n        this.accumulation.annotationModule.renderAnnotations(getElement(this.accumulation.element.id + '_Secondary_Element'));\n      }\n      if (this.accumulation.accumulationDataLabelModule && this.dataLabel.visible) {\n        this.renderDataLabel(this.accumulation, getElement(this.accumulation.element.id + '_datalabel_Series_' + this.index), this.accumulation.redraw);\n      }\n      this.accumulation.redraw = false;\n      this.accumulation.duration = chartDuration;\n    }\n  };\n  /**\n   * Adds a data point to the data source for the series.\n   *\n   * @function addPoint\n   * @param {Object} dataPoint - The data point to be added.\n   * @param {number} duration – The duration for the animation.\n   * @returns {void}\n   */\n  AccumulationSeries.prototype.addPoint = function (dataPoint, duration) {\n    var maxWidth;\n    if (this.accumulation.series[0].dataLabel.visible) {\n      maxWidth = this.findMaxLabelWidth();\n    }\n    this.dataSource.push(dataPoint);\n    this.resultData = this.dataSource;\n    this.sumOfPoints = 0;\n    var visiblepoints = [];\n    for (var i = 0; i < this.resultData.length; i++) {\n      if (this.points[i] && this.points[i].visible) {\n        visiblepoints.push(this.resultData[i]);\n      } else if (i === this.resultData.length - 1) {\n        visiblepoints.push(this.resultData[i]);\n      }\n    }\n    this.findSumOfPoints(visiblepoints);\n    var pointIndex = this.points.length === 0 ? 0 : this.points[this.points.length - 1].index + 1;\n    var colors = this.palettes.length ? this.palettes : getSeriesColor(this.accumulation.theme);\n    var point = this.setPoints(this.dataSource, pointIndex, colors, this.accumulation);\n    this.pushPoints(point, colors);\n    this.accumulation.redraw = this.borderRadius ? false : this.accumulation.enableAnimation;\n    var chartDuration = this.accumulation.duration;\n    this.accumulation.duration = isNullOrUndefined(duration) ? 500 : duration;\n    this.updateSeries(getElement(this.accumulation.element.id + '_Series_' + this.index), maxWidth, 'addPoint');\n    this.accumulation.redraw = false;\n    this.accumulation.duration = chartDuration;\n  };\n  /**\n   * Removes a data point from the series data source at the specified index.\n   *\n   * @function removePoint\n   * @param {number} index – The index of the data point to be removed from the series.\n   * @param {number} duration – The duration for the animation.\n   * @returns {void}\n   */\n  AccumulationSeries.prototype.removePoint = function (index, duration) {\n    var dataSource = extend([], this.dataSource, null, true);\n    var chartDuration = this.accumulation.duration;\n    if (dataSource.length > 0 && index >= 0 && index < dataSource.length) {\n      this.sumOfPoints = 0;\n      var removepoints = [];\n      for (var i = 0; i < this.dataSource.length; i++) {\n        if (i !== index && this.points[i] && this.points[i].visible) {\n          removepoints.push(this.dataSource[i]);\n        }\n      }\n      dataSource.splice(index, 1);\n      this.dataSource.splice(index, 1);\n      this.findSumOfPoints(removepoints);\n      this.accumulation.redraw = this.borderRadius ? false : this.accumulation.enableAnimation;\n      this.accumulation.duration = isNullOrUndefined(duration) ? 500 : duration;\n      this.points.splice(index, 1);\n      for (var i = index; i < this.points.length; i++) {\n        var point = this.points[i];\n        point.index = i;\n        point.y = this.points[i].y;\n      }\n      var element = getElement(this.accumulation.element.id + '_Series_0_Point_' + this.points.length);\n      if (element) {\n        element.parentNode.removeChild(element);\n      }\n      this.updateSeries(getElement(this.accumulation.element.id + '_Series_' + this.index), undefined, 'removePoint', index);\n      this.accumulation.redraw = false;\n      this.accumulation.duration = chartDuration;\n    }\n  };\n  /**\n   * Update the series based on addPoint and removePoint function.\n   *\n   * @param {Element} seriesGroup - Series group needs to be update.\n   * @param {number} maxLabelWidth - Specifies the maximum label width.\n   * @param {string} updatePoint - Specifies remove or add point.\n   * @param {number} index - specifies point index to remove.\n   * @returns {void}\n   */\n  AccumulationSeries.prototype.updateSeries = function (seriesGroup, maxLabelWidth, updatePoint, index) {\n    var previousRadius = this.accumulation[firstToLowerCase(this.type) + 'SeriesModule'].radius;\n    var previousCenter = this.accumulation[firstToLowerCase(this.type) + 'SeriesModule'].center;\n    var previousLegendBounds;\n    if (this.accumulation.legendSettings.visible) {\n      if (updatePoint === 'addPoint') {\n        this.accumulation.accumulationLegendModule.legendCollections.push(new LegendOptions(this.points[this.points.length - 1].x.toString(), this.points[this.points.length - 1].color, this.legendShape, this.points[this.points.length - 1].visible, this.type, this.points[this.points.length - 1].legendImageUrl, null, null, this.points[this.points.length - 1].index, this.index));\n      } else {\n        this.accumulation.accumulationLegendModule.legendCollections.splice(index, 1);\n        for (var i = index; i < this.accumulation.accumulationLegendModule.legendCollections.length; i++) {\n          this.accumulation.accumulationLegendModule.legendCollections[i].pointIndex = i;\n        }\n      }\n      if (this.accumulation.accumulationLegendModule.legendCollections.length >= 1) {\n        previousLegendBounds = this.accumulation.accumulationLegendModule.legendBounds;\n        this.accumulation.accumulationLegendModule.calculateLegendBounds(this.accumulation.initialClipRect, this.accumulation.availableSize, null, previousLegendBounds, true);\n        if (this.dataLabel && this.dataLabel.position === 'Outside' && (this.accumulation.legendSettings.position === 'Bottom' || this.accumulation.legendSettings.position === 'Top') ? previousLegendBounds.height !== this.accumulation.accumulationLegendModule.legendBounds.height : previousLegendBounds.width !== this.accumulation.accumulationLegendModule.legendBounds.width) {\n          var titleHeight = this.accumulation.title ? measureText(this.accumulation.title, this.accumulation.titleStyle, this.accumulation.themeStyle.chartTitleFont).height * this.accumulation.titleCollection.length : 0;\n          var subTitleHeight = this.accumulation.subTitle ? measureText(this.accumulation.subTitle, this.accumulation.subTitleStyle, this.accumulation.themeStyle.chartSubTitleFont).height * this.accumulation.subTitleCollection.length : 0;\n          this.accumulation.initialClipRect = new Rect(this.accumulation.margin.left, this.accumulation.margin.top, this.accumulation.availableSize.width, this.accumulation.availableSize.height);\n          subtractRect(this.accumulation.initialClipRect, new Rect(0, subTitleHeight + titleHeight, this.accumulation.margin.right + this.accumulation.margin.left, this.accumulation.margin.bottom + this.accumulation.margin.top));\n          this.accumulation.accumulationLegendModule.calculateLegendBounds(this.accumulation.initialClipRect, this.accumulation.availableSize, null);\n        }\n      }\n    }\n    this.accumulation[firstToLowerCase(this.type) + 'SeriesModule'].initProperties(this.accumulation, this);\n    this.renderPoints(this.accumulation, seriesGroup, this.accumulation.redraw, previousRadius, previousCenter, true);\n    if (previousLegendBounds && (this.accumulation.legendSettings.position === 'Bottom' || this.accumulation.legendSettings.position === 'Top' ? previousLegendBounds.height !== this.accumulation.accumulationLegendModule.legendBounds.height : previousLegendBounds.width !== this.accumulation.accumulationLegendModule.legendBounds.width) && this.accumulation.centerLabel.text) {\n      this.accumulation.renderCenterLabel(true, true);\n    }\n    if (this.accumulation.annotationModule) {\n      this.accumulation.annotationModule.renderAnnotations(getElement(this.accumulation.element.id + '_Secondary_Element'));\n    }\n    if (this.accumulation.accumulationDataLabelModule && this.dataLabel.visible) {\n      var datalabelGroup = this.accumulation.renderer.createGroup({\n        id: this.accumulation.element.id + '_datalabel_Series_' + this.index\n      });\n      this.renderDataLabel(this.accumulation, datalabelGroup, this.accumulation.redraw);\n    }\n    if (this.accumulation.legendSettings.visible) {\n      if (this.type === 'Pie') {\n        if (this.dataLabel.visible && this.points[this.points.length - 1] && this.points[this.points.length - 1].textSize.width > maxLabelWidth && this.accumulation.legendSettings.position !== 'Top' && this.accumulation.legendSettings.position !== 'Bottom') {\n          this.accumulation.visibleSeries[0].findMaxBounds(this.accumulation.visibleSeries[0].labelBound, this.points[this.points.length - 1].labelRegion);\n          this.findMaxBounds(this.labelBound, this.accumulationBound);\n          this.labelBound.x -= this.accumulation.explodeDistance;\n          this.labelBound.y -= this.accumulation.explodeDistance;\n          this.labelBound.height += this.accumulation.explodeDistance - this.labelBound.y;\n          this.labelBound.width += this.accumulation.explodeDistance - this.labelBound.x;\n        }\n        this.accumulation.accumulationLegendModule.getSmartLegendLocation(this.accumulation.visibleSeries[0].labelBound, this.accumulation.accumulationLegendModule.legendBounds, this.accumulation.margin);\n      }\n      this.accumulation.accumulationLegendModule.renderLegend(this.accumulation, this.accumulation.legendSettings, this.accumulation.accumulationLegendModule.legendBounds, this.accumulation.redraw, true);\n    }\n  };\n  /**\n   * To find point is empty.\n   *\n   * @param {AccPoints} point - The point to check.\n   * @returns {boolean} - True if the point is empty, otherwise false.\n   */\n  AccumulationSeries.prototype.isEmpty = function (point) {\n    return point.color === this.emptyPointSettings.fill;\n  };\n  __decorate([Property('')], AccumulationSeries.prototype, \"dataSource\", void 0);\n  __decorate([Property()], AccumulationSeries.prototype, \"query\", void 0);\n  __decorate([Property('')], AccumulationSeries.prototype, \"xName\", void 0);\n  __decorate([Property('')], AccumulationSeries.prototype, \"name\", void 0);\n  __decorate([Property('')], AccumulationSeries.prototype, \"tooltipMappingName\", void 0);\n  __decorate([Property('')], AccumulationSeries.prototype, \"yName\", void 0);\n  __decorate([Property(true)], AccumulationSeries.prototype, \"visible\", void 0);\n  __decorate([Complex({\n    color: null,\n    width: 0\n  }, Border)], AccumulationSeries.prototype, \"border\", void 0);\n  __decorate([Complex(null, Animation)], AccumulationSeries.prototype, \"animation\", void 0);\n  __decorate([Property('SeriesType')], AccumulationSeries.prototype, \"legendShape\", void 0);\n  __decorate([Property('')], AccumulationSeries.prototype, \"legendImageUrl\", void 0);\n  __decorate([Property('')], AccumulationSeries.prototype, \"pointColorMapping\", void 0);\n  __decorate([Property(false)], AccumulationSeries.prototype, \"applyPattern\", void 0);\n  __decorate([Property(null)], AccumulationSeries.prototype, \"selectionStyle\", void 0);\n  __decorate([Property(null)], AccumulationSeries.prototype, \"groupTo\", void 0);\n  __decorate([Property('Value')], AccumulationSeries.prototype, \"groupMode\", void 0);\n  __decorate([Complex({}, AccumulationDataLabelSettings)], AccumulationSeries.prototype, \"dataLabel\", void 0);\n  __decorate([Property([])], AccumulationSeries.prototype, \"palettes\", void 0);\n  __decorate([Property(0)], AccumulationSeries.prototype, \"startAngle\", void 0);\n  __decorate([Property(null)], AccumulationSeries.prototype, \"endAngle\", void 0);\n  __decorate([Property(null)], AccumulationSeries.prototype, \"radius\", void 0);\n  __decorate([Property('0')], AccumulationSeries.prototype, \"innerRadius\", void 0);\n  __decorate([Property('Pie')], AccumulationSeries.prototype, \"type\", void 0);\n  __decorate([Property(true)], AccumulationSeries.prototype, \"enableTooltip\", void 0);\n  __decorate([Property(false)], AccumulationSeries.prototype, \"explode\", void 0);\n  __decorate([Property('30%')], AccumulationSeries.prototype, \"explodeOffset\", void 0);\n  __decorate([Property(false)], AccumulationSeries.prototype, \"explodeAll\", void 0);\n  __decorate([Property(null)], AccumulationSeries.prototype, \"explodeIndex\", void 0);\n  __decorate([Complex({\n    mode: 'Drop'\n  }, EmptyPointSettings)], AccumulationSeries.prototype, \"emptyPointSettings\", void 0);\n  __decorate([Property(0)], AccumulationSeries.prototype, \"gapRatio\", void 0);\n  __decorate([Property('80%')], AccumulationSeries.prototype, \"width\", void 0);\n  __decorate([Property('80%')], AccumulationSeries.prototype, \"height\", void 0);\n  __decorate([Property('20%')], AccumulationSeries.prototype, \"neckWidth\", void 0);\n  __decorate([Property('20%')], AccumulationSeries.prototype, \"neckHeight\", void 0);\n  __decorate([Property('Linear')], AccumulationSeries.prototype, \"pyramidMode\", void 0);\n  __decorate([Property('Standard')], AccumulationSeries.prototype, \"funnelMode\", void 0);\n  __decorate([Property(1)], AccumulationSeries.prototype, \"opacity\", void 0);\n  __decorate([Property('0')], AccumulationSeries.prototype, \"dashArray\", void 0);\n  __decorate([Complex({}, Accessibility)], AccumulationSeries.prototype, \"accessibility\", void 0);\n  __decorate([Property(0)], AccumulationSeries.prototype, \"borderRadius\", void 0);\n  return AccumulationSeries;\n}(ChildProperty);\nexport { AccumulationSeries };\n/**\n * method to get series from index.\n *\n * @private\n * @param {number} index - The index of the series to retrieve.\n * @param {AccumulationSeries[]} visibleSeries - The array of visible series in the chart.\n * @returns {AccumulationSeries} - The series retrieved from the specified index.\n */\nexport function getSeriesFromIndex(index, visibleSeries) {\n  for (var _i = 0, visibleSeries_1 = visibleSeries; _i < visibleSeries_1.length; _i++) {\n    var series = visibleSeries_1[_i];\n    if (index === series.index) {\n      return series;\n    }\n  }\n  return visibleSeries[0];\n}\n/**\n * method to get point from index.\n *\n * @private\n * @param {number} index - The index of the point to retrieve.\n * @param {AccPoints[]} points - The array of points in the data set.\n * @returns {AccPoints} - The point retrieved from the specified index.\n */\nexport function pointByIndex(index, points) {\n  for (var _i = 0, points_1 = points; _i < points_1.length; _i++) {\n    var point = points_1[_i];\n    if (point.index === index) {\n      return point;\n    }\n  }\n  return null;\n}","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","Property","ChildProperty","Complex","createElement","Browser","animationMode","extend","isNullOrUndefined","getValue","DataManager","Border","Font","Animation","EmptyPointSettings","Connector","Accessibility","Rect","PathOption","measureText","stringToNumber","appendChildElement","subtractRect","seriesRender","pointRender","getSeriesColor","getElement","firstToLowerCase","BaseSelection","LegendOptions","AccumulationAnnotationSettings","_super","apply","AccumulationDataLabelSettings","width","color","fontFamily","size","fontStyle","fontWeight","PieCenter","AccPoints","visible","symbolLocation","region","labelRegion","labelVisible","regions","isExplode","isClubbed","isSliced","argsData","isLabelUpdated","initialLabelRegion","AccumulationSeries","_this","points","clubbedPoints","sumOfPoints","isRectSeries","clipRect","category","rightSidePoints","leftSidePoints","refreshDataManager","accumulation","render","radius","isDevice","dataLabel","position","dateSource","dataSource","query","dataManagerSuccess","result","count","dataManager","dataModule","getData","generateQuery","requiresCount","then","e","name","series","data","allowServerDataBinding","trigger","resultData","isBlazor","getPoints","seriesCounts","visibleSeries","window","refreshChart","keys","findSumOfPoints","sumOfClub","point","colors","palettes","theme","clubValue","groupTo","setPoints","isClub","y","pushPoints","index","push","lastGroupTo","clubPoint_1","generateClubPoint","pointsLength_1","map","explode","type","explodeAll","explodeIndex","splice","concat","clubPoint","x","text","originalText","sliceRadius","groupMode","Math","abs","yName","isNaN","xName","legendImageUrl","pointColorMapping","tooltip","tooltipMappingName","separatorY","intl","formatNumber","useGrouping","useGroupingSeparator","setAccEmptyPoint","renderSeries","redraw","seriesGroup","element","id","renderer","createGroup","renderPoints","datalabelGroup","accumulationDataLabelModule","style","visibility","animation","enable","animateSeries","renderDataLabel","findMaxBounds","labelBound","accumulationBound","pieSeriesModule","borderRadius","accumulationLegendModule","explodeDistance","height","previouRadius","previousCenter","pointAnimation","pointId","option","patternFill","options","visiblePoints","patterns","_i","_a","percentage","toFixed","cancel","fill","border","isEmpty","emptyPointSettings","pattern","applyPattern","selection","opacity","dashArray","funnelMode","renderPoint","renderTrapezoidalFunnel","getSeriesElement","findAreaRect","firstQuarter","secondQuarter","showZero","mode","midAngle","sort","a","drawDataLabels","template","childElementCount","dataLabelCallBack","bind","isReact","renderReactTemplates","totalbound","bound","findMaxLabelWidth","max","textSize","previous","next","setData","duration","samePoints","existingPoint","enableAnimation","chartDuration","initProperties","centerLabel","renderCenterLabel","annotationModule","renderAnnotations","addPoint","dataPoint","maxWidth","visiblepoints","pointIndex","updateSeries","removePoint","removepoints","parentNode","removeChild","undefined","maxLabelWidth","updatePoint","previousRadius","center","previousLegendBounds","legendSettings","legendCollections","toString","legendShape","legendBounds","calculateLegendBounds","initialClipRect","availableSize","titleHeight","title","titleStyle","themeStyle","chartTitleFont","titleCollection","subTitleHeight","subTitle","subTitleStyle","chartSubTitleFont","subTitleCollection","margin","left","top","right","bottom","getSmartLegendLocation","renderLegend","getSeriesFromIndex","visibleSeries_1","pointByIndex","points_1"],"sources":["C:/Users/mkfun/Desktop/ct assignment/admin/node_modules/@syncfusion/ej2-charts/src/accumulation-chart/model/acc-base.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * AccumulationChart base file\n */\nimport { Property, ChildProperty, Complex, createElement, Browser, animationMode, extend } from '@syncfusion/ej2-base';\nimport { isNullOrUndefined, getValue } from '@syncfusion/ej2-base';\nimport { DataManager } from '@syncfusion/ej2-data';\nimport { Border, Font, Animation, EmptyPointSettings, Connector, Accessibility } from '../../common/model/base';\nimport { Rect, PathOption, measureText } from '@syncfusion/ej2-svg-base';\nimport { stringToNumber, appendChildElement, subtractRect } from '../../common/utils/helper';\nimport { seriesRender, pointRender } from '../../common/model/constants';\nimport { getSeriesColor } from '../../common/model/theme';\nimport { getElement, firstToLowerCase } from '../../common/utils/helper';\nimport { BaseSelection } from '../../common/user-interaction/selection';\nimport { LegendOptions } from '../../common/legend/legend';\n/**\n * Configures the annotation settings for an accumulation chart.\n * Annotations are used to highlight or provide additional information about specific points or regions in the accumulation chart.\n */\nvar AccumulationAnnotationSettings = /** @class */ (function (_super) {\n    __extends(AccumulationAnnotationSettings, _super);\n    function AccumulationAnnotationSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property(null)\n    ], AccumulationAnnotationSettings.prototype, \"content\", void 0);\n    __decorate([\n        Property('0')\n    ], AccumulationAnnotationSettings.prototype, \"x\", void 0);\n    __decorate([\n        Property('0')\n    ], AccumulationAnnotationSettings.prototype, \"y\", void 0);\n    __decorate([\n        Property('Pixel')\n    ], AccumulationAnnotationSettings.prototype, \"coordinateUnits\", void 0);\n    __decorate([\n        Property('Chart')\n    ], AccumulationAnnotationSettings.prototype, \"region\", void 0);\n    __decorate([\n        Property('Middle')\n    ], AccumulationAnnotationSettings.prototype, \"verticalAlignment\", void 0);\n    __decorate([\n        Property('Center')\n    ], AccumulationAnnotationSettings.prototype, \"horizontalAlignment\", void 0);\n    __decorate([\n        Property(null)\n    ], AccumulationAnnotationSettings.prototype, \"description\", void 0);\n    return AccumulationAnnotationSettings;\n}(ChildProperty));\nexport { AccumulationAnnotationSettings };\n/**\n * This class provides options to customize the appearance and behavior of data labels within a series.\n */\nvar AccumulationDataLabelSettings = /** @class */ (function (_super) {\n    __extends(AccumulationDataLabelSettings, _super);\n    function AccumulationDataLabelSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property(false)\n    ], AccumulationDataLabelSettings.prototype, \"visible\", void 0);\n    __decorate([\n        Property(true)\n    ], AccumulationDataLabelSettings.prototype, \"showZero\", void 0);\n    __decorate([\n        Property(null)\n    ], AccumulationDataLabelSettings.prototype, \"name\", void 0);\n    __decorate([\n        Property('transparent')\n    ], AccumulationDataLabelSettings.prototype, \"fill\", void 0);\n    __decorate([\n        Property('Inside')\n    ], AccumulationDataLabelSettings.prototype, \"position\", void 0);\n    __decorate([\n        Property(5)\n    ], AccumulationDataLabelSettings.prototype, \"rx\", void 0);\n    __decorate([\n        Property(5)\n    ], AccumulationDataLabelSettings.prototype, \"ry\", void 0);\n    __decorate([\n        Property(0)\n    ], AccumulationDataLabelSettings.prototype, \"angle\", void 0);\n    __decorate([\n        Property(false)\n    ], AccumulationDataLabelSettings.prototype, \"enableRotation\", void 0);\n    __decorate([\n        Complex({ width: null, color: null }, Border)\n    ], AccumulationDataLabelSettings.prototype, \"border\", void 0);\n    __decorate([\n        Complex({ fontFamily: null, size: null, fontStyle: null, fontWeight: null, color: null }, Font)\n    ], AccumulationDataLabelSettings.prototype, \"font\", void 0);\n    __decorate([\n        Complex({}, Connector)\n    ], AccumulationDataLabelSettings.prototype, \"connectorStyle\", void 0);\n    __decorate([\n        Property(null)\n    ], AccumulationDataLabelSettings.prototype, \"template\", void 0);\n    __decorate([\n        Property('')\n    ], AccumulationDataLabelSettings.prototype, \"format\", void 0);\n    __decorate([\n        Property(null)\n    ], AccumulationDataLabelSettings.prototype, \"maxWidth\", void 0);\n    __decorate([\n        Property('Ellipsis')\n    ], AccumulationDataLabelSettings.prototype, \"textOverflow\", void 0);\n    __decorate([\n        Property('Normal')\n    ], AccumulationDataLabelSettings.prototype, \"textWrap\", void 0);\n    return AccumulationDataLabelSettings;\n}(ChildProperty));\nexport { AccumulationDataLabelSettings };\n/**\n * The `PieCenter` class provides options to set the center position for the Pie series in a chart.\n */\nvar PieCenter = /** @class */ (function (_super) {\n    __extends(PieCenter, _super);\n    function PieCenter() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property('50%')\n    ], PieCenter.prototype, \"x\", void 0);\n    __decorate([\n        Property('50%')\n    ], PieCenter.prototype, \"y\", void 0);\n    return PieCenter;\n}(ChildProperty));\nexport { PieCenter };\n/**\n * The `AccPoints` class is used to define and manage the data points within a series of accumulation charts.\n *\n * @public\n */\nvar AccPoints = /** @class */ (function () {\n    function AccPoints() {\n        /** Accumulation point visibility. */\n        this.visible = true;\n        /** Accumulation point symbol location. */\n        this.symbolLocation = null;\n        /** @private */\n        this.region = null;\n        /** @private */\n        this.labelRegion = null;\n        /** @private */\n        this.labelVisible = true;\n        this.regions = null;\n        /** @private */\n        this.isExplode = false;\n        /** @private */\n        this.isClubbed = false;\n        /** @private */\n        this.isSliced = false;\n        /** @private  */\n        this.argsData = null;\n        /** @private */\n        this.isLabelUpdated = null;\n        /** @private */\n        this.initialLabelRegion = null;\n    }\n    return AccPoints;\n}());\nexport { AccPoints };\n/**\n * Configures the series in the accumulation chart.\n */\nvar AccumulationSeries = /** @class */ (function (_super) {\n    __extends(AccumulationSeries, _super);\n    function AccumulationSeries() {\n        /**\n         * Specifies the data source for the series. It can be an array of JSON objects, or an instance of DataManager.\n         * ```html\n         * <div id='Pie'></div>\n         * ```\n         * ```typescript\n         * let dataManager: DataManager = new DataManager({\n         *    url: 'https://services.syncfusion.com/js/production/api/orders'\n         * });\n         * let query: Query = new Query().take(5);\n         * let pie: AccumulationChart = new AccumulationChart({\n         * ...\n         *     series: [{\n         *        dataSource: dataManager,\n         *        xName: 'CustomerID',\n         *        yName: 'Freight',\n         *        query: query\n         *    }],\n         * ...\n         * });\n         * pie.appendTo('#Pie');\n         * ```\n         *\n         * @default ''\n         */\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /** @private */\n        _this.points = [];\n        /** @private */\n        _this.clubbedPoints = [];\n        /** @private */\n        _this.sumOfPoints = 0;\n        /** @private */\n        _this.isRectSeries = true;\n        /** @private */\n        _this.clipRect = new Rect(0, 0, 0, 0);\n        /** @private */\n        _this.category = 'Series';\n        /** @private */\n        _this.rightSidePoints = [];\n        /** @private */\n        _this.leftSidePoints = [];\n        return _this;\n    }\n    /**\n     * To refresh the Datamanager for series.\n     *\n     * @private\n     * @param {AccumulationChart} accumulation - The accumulation chart control.\n     * @param {boolean} render - Specifies whether to render the accumulation chart after refreshing the DataManager.\n     * @returns {void}\n     */\n    AccumulationSeries.prototype.refreshDataManager = function (accumulation, render) {\n        var _this = this;\n        this.accumulation = accumulation;\n        this.radius = this.radius ? this.radius : (Browser.isDevice && this.dataLabel.position === 'Outside') ? '40%' : '80%';\n        var dateSource = this.dataSource || accumulation.dataSource;\n        if (!(dateSource instanceof DataManager) && isNullOrUndefined(this.query)) {\n            this.dataManagerSuccess({ result: dateSource, count: dateSource.length }, accumulation, render);\n            return;\n        }\n        var dataManager = this.dataModule.getData(this.dataModule.generateQuery().requiresCount());\n        dataManager.then(function (e) { return _this.dataManagerSuccess(e, accumulation); });\n    };\n    /**\n     * To get points on dataManager is success.\n     *\n     * @private\n     * @param {Object} e - The data manager result object.\n     * @param {Object} e.result - The result of the data manager process.\n     * @param {number} e.count - The count of items in the result.\n     * @param {AccumulationChart} accumulation - The accumulation chart control.\n     * @param {boolean} render - Specifies whether to render the accumulation chart after retrieving the points.\n     * @returns {void}\n     */\n    AccumulationSeries.prototype.dataManagerSuccess = function (e, accumulation, render) {\n        if (render === void 0) { render = true; }\n        var argsData = {\n            name: seriesRender, series: this, data: e.result\n        };\n        accumulation.allowServerDataBinding = false;\n        accumulation.trigger(seriesRender, argsData);\n        this.resultData = e.result !== '' ? e.result : [];\n        if (!accumulation.isBlazor && !render) {\n            this.getPoints(this.resultData, accumulation); // To update datasource using onPropertyChanged method. incident id: 290690\n        }\n        if ((++accumulation.seriesCounts === accumulation.visibleSeries.length && render)\n            || (window['Blazor'] && !render && accumulation.seriesCounts === 1)) {\n            this.getPoints(this.resultData, accumulation);\n            accumulation.refreshChart();\n        }\n    };\n    /**\n     * To find points from result data.\n     *\n     * @private\n     * @param {Object} result - The result of the process.\n     * @param {AccumulationChart} accumulation - The accumulation chart control.\n     * @returns {void}\n     */\n    AccumulationSeries.prototype.getPoints = function (result, accumulation) {\n        var length = Object.keys(result).length;\n        this.sumOfPoints = 0;\n        if (length === 0) {\n            // fix for Pie datalabels are not removed for empty datasource\n            this.points = [];\n            return null;\n        }\n        this.findSumOfPoints(result);\n        this.points = [];\n        this.clubbedPoints = [];\n        this.sumOfClub = 0;\n        var point;\n        var colors = this.palettes.length ? this.palettes : getSeriesColor(accumulation.theme);\n        var clubValue = stringToNumber(this.groupTo, this.sumOfPoints);\n        for (var i = 0; i < length; i++) {\n            point = this.setPoints(result, i, colors, accumulation);\n            if (!this.isClub(point, clubValue, i)) {\n                if (isNullOrUndefined(point.y)) {\n                    point.visible = false;\n                }\n                this.pushPoints(point, colors);\n            }\n            else {\n                point.index = this.clubbedPoints.length;\n                point.isExplode = true;\n                this.clubbedPoints.push(point);\n                point.isSliced = true;\n            }\n        }\n        this.lastGroupTo = this.groupTo;\n        if (this.sumOfClub > 0) {\n            var clubPoint_1 = this.generateClubPoint();\n            this.pushPoints(clubPoint_1, colors);\n            var pointsLength_1 = this.points.length - 1;\n            this.clubbedPoints.map(function (point) {\n                point.index += pointsLength_1;\n                point.color = clubPoint_1.color;\n            });\n        }\n        if (this.clubbedPoints.length && this.explode && this.type === 'Pie'\n            && (this.explodeAll || this.points[this.points.length - 1].index === this.explodeIndex)) {\n            this.points.splice(this.points.length - 1, 1);\n            this.points = this.points.concat(this.clubbedPoints);\n        }\n    };\n    AccumulationSeries.prototype.generateClubPoint = function () {\n        var clubPoint = new AccPoints();\n        clubPoint.isClubbed = true;\n        clubPoint.x = 'Others';\n        clubPoint.y = this.sumOfClub;\n        clubPoint.text = clubPoint.originalText = clubPoint.x + ': ' + this.sumOfClub;\n        clubPoint.sliceRadius = '80%';\n        return clubPoint;\n    };\n    /**\n     * Method to set point index and color.\n     *\n     * @param {AccPoints} point - The point data.\n     * @param {string[]} colors - The array of colors used in the accumulation chart.\n     * @returns {void}\n     */\n    AccumulationSeries.prototype.pushPoints = function (point, colors) {\n        point.index = this.points.length;\n        point.isExplode = this.explodeAll || (point.index === this.explodeIndex);\n        point.color = point.color || colors[point.index % colors.length];\n        this.points.push(point);\n    };\n    /**\n     * Method to find club point.\n     *\n     * @param {AccPoints} point - The point data.\n     * @param {number} clubValue - The club value for accumulation chart.\n     * @param {number} index - The index of the point in the data set.\n     * @returns {boolean} - false\n     */\n    AccumulationSeries.prototype.isClub = function (point, clubValue, index) {\n        if (!isNullOrUndefined(clubValue)) {\n            if (this.groupMode === 'Value' && Math.abs(point.y) <= clubValue) {\n                this.sumOfClub += Math.abs(point.y);\n                return true;\n            }\n            else if (this.groupMode === 'Point' && index >= clubValue) {\n                this.sumOfClub += Math.abs(point.y);\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * Method to find sum of points in the series.\n     *\n     * @param {Object} result - The result of the process.\n     * @returns {void}\n     */\n    AccumulationSeries.prototype.findSumOfPoints = function (result) {\n        var length = Object.keys(result).length;\n        for (var i = 0; i < length; i++) {\n            if (!isNullOrUndefined(result[i]) && !isNullOrUndefined(result[i][this.yName])\n                && !isNaN(result[i][this.yName])) {\n                this.sumOfPoints += Math.abs(result[i][this.yName]);\n            }\n        }\n    };\n    /**\n     * Method to set points x, y and text from data source.\n     *\n     * @param {Object} data - The data containing information for the points.\n     * @param {number} i - The index of the current point in the data set.\n     * @param {string[]} colors - The array of colors used in the accumulation chart.\n     * @param {AccumulationChart} accumulation - The accumulation chart control.\n     * @returns {AccPoints} - The point data retrieved from the specified index.\n     */\n    AccumulationSeries.prototype.setPoints = function (data, i, colors, accumulation) {\n        var point = new AccPoints();\n        point.x = getValue(this.xName, data[i]);\n        point.y = getValue(this.yName, data[i]);\n        point.legendImageUrl = getValue(this.legendImageUrl, data[i]);\n        point.color = getValue(this.pointColorMapping, data[i]);\n        point.text = point.originalText = getValue(this.dataLabel.name || '', data[i]);\n        point.tooltip = getValue(this.tooltipMappingName || '', data[i]);\n        point.sliceRadius = getValue(this.radius, data[i]);\n        point.sliceRadius = isNullOrUndefined(point.sliceRadius) ? '80%' : point.sliceRadius;\n        point.separatorY = accumulation.intl.formatNumber(point.y, { useGrouping: accumulation.useGroupingSeparator });\n        this.setAccEmptyPoint(point, i, data);\n        return point;\n    };\n    /**\n     * Method render the series elements for accumulation chart.\n     *\n     * @private\n     * @param {AccumulationChart} accumulation - The AccumulationChart control.\n     * @param {boolean} redraw - Specifies whether to redraw the points.\n     * @returns {void}\n     */\n    AccumulationSeries.prototype.renderSeries = function (accumulation, redraw) {\n        var seriesGroup = redraw ? getElement(accumulation.element.id + '_Series_' + this.index) :\n            accumulation.renderer.createGroup({ id: accumulation.element.id + '_Series_' + this.index });\n        this.renderPoints(accumulation, seriesGroup, redraw);\n        var datalabelGroup;\n        if (accumulation.accumulationDataLabelModule && this.dataLabel.visible) {\n            datalabelGroup = accumulation.renderer.createGroup({ id: accumulation.element.id + '_datalabel_Series_' + this.index });\n            datalabelGroup.style.visibility =\n                (((this.animation.enable && animationMode !== 'Disable') || animationMode === 'Enable') && accumulation.animateSeries && this.type === 'Pie') ? 'hidden' : 'visible';\n            this.renderDataLabel(accumulation, datalabelGroup, redraw);\n        }\n        if (this.type === 'Pie') {\n            if (!accumulation.redraw) {\n                this.findMaxBounds(this.labelBound, this.accumulationBound);\n            }\n            accumulation.pieSeriesModule.animateSeries(accumulation, this.animation, this, seriesGroup, this.borderRadius, this.points);\n        }\n        if (!accumulation.redraw && accumulation.accumulationLegendModule) {\n            this.labelBound.x -= accumulation.explodeDistance;\n            this.labelBound.y -= accumulation.explodeDistance;\n            this.labelBound.height += (accumulation.explodeDistance - this.labelBound.y);\n            this.labelBound.width += (accumulation.explodeDistance - this.labelBound.x);\n        }\n    };\n    /**\n     * Method render the points elements for accumulation chart series.\n     *\n     * @param {AccumulationChart} accumulation - The AccumulationChart control.\n     * @param {Element} seriesGroup - The group element to contain the point elements.\n     * @param {boolean} redraw - Specifies whether to redraw the points.\n     * @param {boolean} previouRadius - Specifies the previous radius of the pie when animating the individual series point.\n     * @param {boolean} previousCenter - Specifies the previous center of the pie when animating the individual series point.\n     * @param {boolean} pointAnimation - Specifies whether the point based animation is enabled.\n     * @returns {void}\n     */\n    AccumulationSeries.prototype.renderPoints = function (accumulation, seriesGroup, redraw, previouRadius, previousCenter, pointAnimation) {\n        var pointId = accumulation.element.id + '_Series_' + this.index + '_Point_';\n        var option;\n        var patternFill;\n        var options = [];\n        var visiblePoints = [];\n        var patterns = ['Chessboard', 'Dots', 'DiagonalForward', 'Crosshatch', 'Pacman', 'DiagonalBackward', 'Grid', 'Turquoise', 'Star', 'Triangle', 'Circle', 'Tile', 'HorizontalDash', 'VerticalDash', 'Rectangle', 'Box', 'VerticalStripe', 'HorizontalStripe', 'Bubble'];\n        for (var _i = 0, _a = this.points; _i < _a.length; _i++) {\n            var point = _a[_i];\n            point.percentage = (+(point.y / this.sumOfPoints * 100).toFixed(2));\n            var argsData = {\n                cancel: false, name: pointRender, series: this, point: point, fill: point.color,\n                border: this.isEmpty(point) ? { width: this.emptyPointSettings.border.width, color: this.emptyPointSettings.border.color } :\n                    { width: this.border.width, color: this.border.color }, pattern: this.applyPattern ? patterns[point.index % patterns.length] : 'None'\n            };\n            accumulation.trigger(pointRender, argsData);\n            point.color = argsData.fill;\n            patternFill = point.color;\n            if (this.applyPattern) {\n                var selection = new BaseSelection(accumulation);\n                patternFill = selection.pattern(accumulation, point.color, point.index, argsData.pattern, this.opacity);\n            }\n            option = new PathOption(pointId + point.index, patternFill, argsData.border.width || 1, argsData.border.color || point.color, this.opacity, argsData.series.dashArray, '');\n            if (this.funnelMode === 'Trapezoidal' && this.type === 'Funnel') {\n                options.push(option);\n                if (point.visible) {\n                    visiblePoints.push(point);\n                }\n            }\n            else {\n                accumulation[(firstToLowerCase(this.type) + 'SeriesModule')].\n                    renderPoint(point, this, accumulation, option, seriesGroup, redraw, previouRadius, previousCenter, pointAnimation);\n            }\n        }\n        if (this.funnelMode === 'Trapezoidal' && this.type === 'Funnel') {\n            accumulation[(firstToLowerCase(this.type) + 'SeriesModule')].\n                renderTrapezoidalFunnel(this, visiblePoints, accumulation, options, seriesGroup, redraw);\n        }\n        else {\n            appendChildElement(false, accumulation.getSeriesElement(), seriesGroup, redraw);\n        }\n    };\n    /**\n     * Method render the datalabel elements for accumulation chart.\n     *\n     * @param {AccumulationChart} accumulation - The AccumulationChart control.\n     * @param {Element} datalabelGroup - The group element to contain the data label elements.\n     * @param {boolean} redraw - Specifies whether to redraw the data labels.\n     * @returns {void}\n     */\n    AccumulationSeries.prototype.renderDataLabel = function (accumulation, datalabelGroup, redraw) {\n        accumulation.accumulationDataLabelModule.findAreaRect();\n        var element = createElement('div', {\n            id: accumulation.element.id + '_Series_0' + '_DataLabelCollections'\n        });\n        this.leftSidePoints = [];\n        this.rightSidePoints = [];\n        var firstQuarter = [];\n        var secondQuarter = [];\n        for (var _i = 0, _a = this.points; _i < _a.length; _i++) {\n            var point = _a[_i];\n            if (point.visible) {\n                if (this.dataLabel.showZero || (!this.dataLabel.showZero && ((point.y !== 0) || (point.y === 0 &&\n                    this.emptyPointSettings.mode === 'Zero')))) {\n                    accumulation.accumulationDataLabelModule.renderDataLabel(point, this.dataLabel, datalabelGroup, this.points, this.index, element, redraw);\n                }\n            }\n            if (point.midAngle >= 90 && point.midAngle <= 270) {\n                this.leftSidePoints.push(point);\n            }\n            else {\n                if (point.midAngle >= 0 && point.midAngle <= 90) {\n                    secondQuarter.push(point);\n                }\n                else {\n                    firstQuarter.push(point);\n                }\n            }\n        }\n        firstQuarter.sort(function (a, b) { return a.midAngle - b.midAngle; });\n        secondQuarter.sort(function (a, b) { return a.midAngle - b.midAngle; });\n        this.leftSidePoints.sort(function (a, b) { return a.midAngle - b.midAngle; });\n        this.rightSidePoints = firstQuarter.concat(secondQuarter);\n        accumulation.accumulationDataLabelModule.drawDataLabels(this, this.dataLabel, datalabelGroup, element, redraw);\n        if (this.dataLabel.template !== null && element.childElementCount) {\n            var dataLabelCallBack = accumulation.accumulationDataLabelModule.drawDataLabels.bind(accumulation.accumulationDataLabelModule, this, this.dataLabel, datalabelGroup, element, redraw);\n            if (accumulation.isReact) {\n                accumulation.renderReactTemplates(dataLabelCallBack);\n            }\n            appendChildElement(false, getElement(accumulation.element.id + '_Secondary_Element'), element, redraw);\n        }\n        appendChildElement(false, accumulation.getSeriesElement(), datalabelGroup, redraw);\n    };\n    /**\n     * To find maximum bounds for smart legend placing.\n     *\n     * @private\n     * @param {Rect} totalbound - The total bounding rect.\n     * @param {Rect} bound - The bounding rect to be compared.\n     * @returns {void}\n     */\n    AccumulationSeries.prototype.findMaxBounds = function (totalbound, bound) {\n        totalbound.x = bound.x < totalbound.x ? bound.x : totalbound.x;\n        totalbound.y = bound.y < totalbound.y ? bound.y : totalbound.y;\n        totalbound.height = (bound.y + bound.height) > totalbound.height ? (bound.y + bound.height) : totalbound.height;\n        totalbound.width = (bound.x + bound.width) > totalbound.width ? (bound.x + bound.width) : totalbound.width;\n    };\n    /**\n     * Finds the maximum width of the labels for legend placement.\n     *\n     * @private\n     * @returns {number} The maximum label width.\n     */\n    AccumulationSeries.prototype.findMaxLabelWidth = function () {\n        var max;\n        for (var i = 0; i < this.points.length; i++) {\n            max = this.points[0].textSize.width;\n            if (max < this.points[i].textSize.width) {\n                max = this.points[i].textSize.width;\n            }\n        }\n        return max;\n    };\n    /**\n     * To set empty point value for null points.\n     *\n     * @private\n     * @param {AccPoints} point - The point to set as empty.\n     * @param {number} i - The index of the point in the data set.\n     * @param {Object} data - The data object.\n     * @returns {void}\n     */\n    AccumulationSeries.prototype.setAccEmptyPoint = function (point, i, data) {\n        if (!(isNullOrUndefined(point.y) || isNaN(point.y))) {\n            return null;\n        }\n        point.color = this.emptyPointSettings.fill || point.color;\n        switch (this.emptyPointSettings.mode) {\n            case 'Zero':\n                point.y = 0;\n                point.visible = true;\n                break;\n            case 'Average': {\n                var previous = data[i - 1] ? (data[i - 1][this.yName] || 0) : 0;\n                var next = data[i + 1] ? (data[i + 1][this.yName] || 0) : 0;\n                point.y = (Math.abs(previous) + Math.abs(next)) / 2;\n                this.sumOfPoints += point.y;\n                point.visible = true;\n                break;\n            }\n            default:\n                point.visible = false;\n                break;\n        }\n    };\n    /**\n     * Updates the data source for the series.\n     *\n     * @function setData\n     * @param {Object} data – Updated data source for the series.\n     * @param {number} duration – The duration for the animation.\n     * @returns {void}\n     */\n    AccumulationSeries.prototype.setData = function (data, duration) {\n        if (!data) {\n            return null;\n        }\n        var samePoints = false;\n        if (this.dataSource.length === data.length) {\n            samePoints = true;\n            for (var i = 0; i < data.length; i++) {\n                if (this.dataSource[i][this.xName] === data[i][this.xName]) {\n                    var point = this.points[i];\n                    var existingPoint = this.dataSource[i];\n                    if ((existingPoint[this.yName] !== data[i][this.yName])) {\n                        point.y = data[i][this.yName];\n                        this.dataSource[i] = data[i];\n                    }\n                }\n                else {\n                    samePoints = false;\n                    break;\n                }\n            }\n        }\n        if (!samePoints) {\n            this.dataSource = data;\n        }\n        else {\n            this.sumOfPoints = 0;\n            var visiblePoints = [];\n            for (var i = 0; i < this.resultData.length; i++) {\n                if (this.points[i] && this.points[i].visible) {\n                    visiblePoints.push(this.resultData[i]);\n                }\n            }\n            this.findSumOfPoints(visiblePoints);\n            this.accumulation.redraw = this.borderRadius ? false : this.accumulation.enableAnimation;\n            this.accumulation.animateSeries = false;\n            var chartDuration = this.accumulation.duration;\n            this.accumulation.duration = isNullOrUndefined(duration) ? 500 : duration;\n            this.accumulation[(firstToLowerCase(this.type) + 'SeriesModule')].initProperties(this.accumulation, this);\n            this.renderPoints(this.accumulation, getElement(this.accumulation.element.id + '_Series_' + this.index), this.accumulation.redraw, null, null, true);\n            if (this.accumulation.centerLabel.text) {\n                this.accumulation.renderCenterLabel(true, true);\n            }\n            if (this.accumulation.annotationModule) {\n                this.accumulation.annotationModule.renderAnnotations(getElement(this.accumulation.element.id + '_Secondary_Element'));\n            }\n            if (this.accumulation.accumulationDataLabelModule && this.dataLabel.visible) {\n                this.renderDataLabel(this.accumulation, getElement(this.accumulation.element.id + '_datalabel_Series_' + this.index), this.accumulation.redraw);\n            }\n            this.accumulation.redraw = false;\n            this.accumulation.duration = chartDuration;\n        }\n    };\n    /**\n     * Adds a data point to the data source for the series.\n     *\n     * @function addPoint\n     * @param {Object} dataPoint - The data point to be added.\n     * @param {number} duration – The duration for the animation.\n     * @returns {void}\n     */\n    AccumulationSeries.prototype.addPoint = function (dataPoint, duration) {\n        var maxWidth;\n        if (this.accumulation.series[0].dataLabel.visible) {\n            maxWidth = this.findMaxLabelWidth();\n        }\n        this.dataSource.push(dataPoint);\n        this.resultData = this.dataSource;\n        this.sumOfPoints = 0;\n        var visiblepoints = [];\n        for (var i = 0; i < this.resultData.length; i++) {\n            if (this.points[i] && this.points[i].visible) {\n                visiblepoints.push(this.resultData[i]);\n            }\n            else if (i === this.resultData.length - 1) {\n                visiblepoints.push(this.resultData[i]);\n            }\n        }\n        this.findSumOfPoints(visiblepoints);\n        var pointIndex = this.points.length === 0 ? 0 : this.points[this.points.length - 1].index + 1;\n        var colors = this.palettes.length ? this.palettes : getSeriesColor(this.accumulation.theme);\n        var point = this.setPoints(this.dataSource, pointIndex, colors, this.accumulation);\n        this.pushPoints(point, colors);\n        this.accumulation.redraw = this.borderRadius ? false : this.accumulation.enableAnimation;\n        var chartDuration = this.accumulation.duration;\n        this.accumulation.duration = isNullOrUndefined(duration) ? 500 : duration;\n        this.updateSeries(getElement(this.accumulation.element.id + '_Series_' + this.index), maxWidth, 'addPoint');\n        this.accumulation.redraw = false;\n        this.accumulation.duration = chartDuration;\n    };\n    /**\n     * Removes a data point from the series data source at the specified index.\n     *\n     * @function removePoint\n     * @param {number} index – The index of the data point to be removed from the series.\n     * @param {number} duration – The duration for the animation.\n     * @returns {void}\n     */\n    AccumulationSeries.prototype.removePoint = function (index, duration) {\n        var dataSource = extend([], this.dataSource, null, true);\n        var chartDuration = this.accumulation.duration;\n        if (dataSource.length > 0 && index >= 0 && index < dataSource.length) {\n            this.sumOfPoints = 0;\n            var removepoints = [];\n            for (var i = 0; i < this.dataSource.length; i++) {\n                if (i !== index && this.points[i] && this.points[i].visible) {\n                    removepoints.push(this.dataSource[i]);\n                }\n            }\n            dataSource.splice(index, 1);\n            this.dataSource.splice(index, 1);\n            this.findSumOfPoints(removepoints);\n            this.accumulation.redraw = this.borderRadius ? false : this.accumulation.enableAnimation;\n            this.accumulation.duration = isNullOrUndefined(duration) ? 500 : duration;\n            this.points.splice(index, 1);\n            for (var i = index; i < this.points.length; i++) {\n                var point = this.points[i];\n                point.index = i;\n                point.y = this.points[i].y;\n            }\n            var element = getElement(this.accumulation.element.id + '_Series_0_Point_' + (this.points.length));\n            if (element) {\n                element.parentNode.removeChild(element);\n            }\n            this.updateSeries(getElement(this.accumulation.element.id + '_Series_' + this.index), undefined, 'removePoint', index);\n            this.accumulation.redraw = false;\n            this.accumulation.duration = chartDuration;\n        }\n    };\n    /**\n     * Update the series based on addPoint and removePoint function.\n     *\n     * @param {Element} seriesGroup - Series group needs to be update.\n     * @param {number} maxLabelWidth - Specifies the maximum label width.\n     * @param {string} updatePoint - Specifies remove or add point.\n     * @param {number} index - specifies point index to remove.\n     * @returns {void}\n     */\n    AccumulationSeries.prototype.updateSeries = function (seriesGroup, maxLabelWidth, updatePoint, index) {\n        var previousRadius = this.accumulation[(firstToLowerCase(this.type) + 'SeriesModule')].radius;\n        var previousCenter = this.accumulation[(firstToLowerCase(this.type) + 'SeriesModule')].center;\n        var previousLegendBounds;\n        if (this.accumulation.legendSettings.visible) {\n            if (updatePoint === 'addPoint') {\n                this.accumulation.accumulationLegendModule.\n                    legendCollections.push(new LegendOptions(this.points[this.points.length - 1].x.toString(), this.points[this.points.length - 1].color, this.legendShape, this.points[this.points.length - 1].visible, this.type, this.points[this.points.length - 1].legendImageUrl, null, null, this.points[this.points.length - 1].index, this.index));\n            }\n            else {\n                this.accumulation.accumulationLegendModule.legendCollections.splice(index, 1);\n                for (var i = index; i < this.accumulation.accumulationLegendModule.legendCollections.length; i++) {\n                    this.accumulation.accumulationLegendModule.legendCollections[i].pointIndex = i;\n                }\n            }\n            if (this.accumulation.accumulationLegendModule.legendCollections.length >= 1) {\n                previousLegendBounds = this.accumulation.accumulationLegendModule.legendBounds;\n                this.accumulation.accumulationLegendModule.calculateLegendBounds(this.accumulation.initialClipRect, this.accumulation.availableSize, null, previousLegendBounds, true);\n                if (this.dataLabel && this.dataLabel.position === 'Outside' && (this.accumulation.legendSettings.position === 'Bottom' || (this.accumulation.legendSettings.position === 'Top')) ? (previousLegendBounds.height !== this.accumulation.accumulationLegendModule.legendBounds.height) : (previousLegendBounds.width !== this.accumulation.accumulationLegendModule.legendBounds.width)) {\n                    var titleHeight = (this.accumulation.title ? measureText(this.accumulation.title, this.accumulation.titleStyle, this.accumulation.themeStyle.chartTitleFont).height *\n                        this.accumulation.titleCollection.length : 0);\n                    var subTitleHeight = (this.accumulation.subTitle ?\n                        (measureText(this.accumulation.subTitle, this.accumulation.subTitleStyle, this.accumulation.themeStyle.chartSubTitleFont).height *\n                            this.accumulation.subTitleCollection.length) : 0);\n                    this.accumulation.initialClipRect = new Rect(this.accumulation.margin.left, this.accumulation.margin.top, this.accumulation.availableSize.width, this.accumulation.availableSize.height);\n                    subtractRect(this.accumulation.initialClipRect, new Rect(0, (subTitleHeight\n                        + titleHeight), this.accumulation.margin.right +\n                        this.accumulation.margin.left, this.accumulation.margin.bottom + this.accumulation.margin.top));\n                    this.accumulation.accumulationLegendModule.calculateLegendBounds(this.accumulation.initialClipRect, this.accumulation.availableSize, null);\n                }\n            }\n        }\n        this.accumulation[(firstToLowerCase(this.type) + 'SeriesModule')].initProperties(this.accumulation, this);\n        this.renderPoints(this.accumulation, seriesGroup, this.accumulation.redraw, previousRadius, previousCenter, true);\n        if (previousLegendBounds && ((this.accumulation.legendSettings.position === 'Bottom' || (this.accumulation.legendSettings.position === 'Top')) ? (previousLegendBounds.height !== this.accumulation.accumulationLegendModule.legendBounds.height) : (previousLegendBounds.width !== this.accumulation.accumulationLegendModule.legendBounds.width)) && this.accumulation.centerLabel.text) {\n            this.accumulation.renderCenterLabel(true, true);\n        }\n        if (this.accumulation.annotationModule) {\n            this.accumulation.annotationModule.renderAnnotations(getElement(this.accumulation.element.id + '_Secondary_Element'));\n        }\n        if (this.accumulation.accumulationDataLabelModule && this.dataLabel.visible) {\n            var datalabelGroup = this.accumulation.renderer.createGroup({ id: this.accumulation.element.id + '_datalabel_Series_' + this.index });\n            this.renderDataLabel(this.accumulation, datalabelGroup, this.accumulation.redraw);\n        }\n        if (this.accumulation.legendSettings.visible) {\n            if (this.type === 'Pie') {\n                if (this.dataLabel.visible && this.points[this.points.length - 1] && this.points[this.points.length - 1].textSize.width > maxLabelWidth && this.accumulation.legendSettings.position !== 'Top' && this.accumulation.legendSettings.position !== 'Bottom') {\n                    this.accumulation.visibleSeries[0].findMaxBounds(this.accumulation.visibleSeries[0].labelBound, this.points[this.points.length - 1].labelRegion);\n                    this.findMaxBounds(this.labelBound, this.accumulationBound);\n                    this.labelBound.x -= this.accumulation.explodeDistance;\n                    this.labelBound.y -= this.accumulation.explodeDistance;\n                    this.labelBound.height += (this.accumulation.explodeDistance - this.labelBound.y);\n                    this.labelBound.width += (this.accumulation.explodeDistance - this.labelBound.x);\n                }\n                this.accumulation.accumulationLegendModule.getSmartLegendLocation(this.accumulation.visibleSeries[0].labelBound, this.accumulation.accumulationLegendModule.legendBounds, this.accumulation.margin);\n            }\n            this.accumulation.accumulationLegendModule.renderLegend(this.accumulation, this.accumulation.legendSettings, this.accumulation.accumulationLegendModule.legendBounds, this.accumulation.redraw, true);\n        }\n    };\n    /**\n     * To find point is empty.\n     *\n     * @param {AccPoints} point - The point to check.\n     * @returns {boolean} - True if the point is empty, otherwise false.\n     */\n    AccumulationSeries.prototype.isEmpty = function (point) {\n        return point.color === this.emptyPointSettings.fill;\n    };\n    __decorate([\n        Property('')\n    ], AccumulationSeries.prototype, \"dataSource\", void 0);\n    __decorate([\n        Property()\n    ], AccumulationSeries.prototype, \"query\", void 0);\n    __decorate([\n        Property('')\n    ], AccumulationSeries.prototype, \"xName\", void 0);\n    __decorate([\n        Property('')\n    ], AccumulationSeries.prototype, \"name\", void 0);\n    __decorate([\n        Property('')\n    ], AccumulationSeries.prototype, \"tooltipMappingName\", void 0);\n    __decorate([\n        Property('')\n    ], AccumulationSeries.prototype, \"yName\", void 0);\n    __decorate([\n        Property(true)\n    ], AccumulationSeries.prototype, \"visible\", void 0);\n    __decorate([\n        Complex({ color: null, width: 0 }, Border)\n    ], AccumulationSeries.prototype, \"border\", void 0);\n    __decorate([\n        Complex(null, Animation)\n    ], AccumulationSeries.prototype, \"animation\", void 0);\n    __decorate([\n        Property('SeriesType')\n    ], AccumulationSeries.prototype, \"legendShape\", void 0);\n    __decorate([\n        Property('')\n    ], AccumulationSeries.prototype, \"legendImageUrl\", void 0);\n    __decorate([\n        Property('')\n    ], AccumulationSeries.prototype, \"pointColorMapping\", void 0);\n    __decorate([\n        Property(false)\n    ], AccumulationSeries.prototype, \"applyPattern\", void 0);\n    __decorate([\n        Property(null)\n    ], AccumulationSeries.prototype, \"selectionStyle\", void 0);\n    __decorate([\n        Property(null)\n    ], AccumulationSeries.prototype, \"groupTo\", void 0);\n    __decorate([\n        Property('Value')\n    ], AccumulationSeries.prototype, \"groupMode\", void 0);\n    __decorate([\n        Complex({}, AccumulationDataLabelSettings)\n    ], AccumulationSeries.prototype, \"dataLabel\", void 0);\n    __decorate([\n        Property([])\n    ], AccumulationSeries.prototype, \"palettes\", void 0);\n    __decorate([\n        Property(0)\n    ], AccumulationSeries.prototype, \"startAngle\", void 0);\n    __decorate([\n        Property(null)\n    ], AccumulationSeries.prototype, \"endAngle\", void 0);\n    __decorate([\n        Property(null)\n    ], AccumulationSeries.prototype, \"radius\", void 0);\n    __decorate([\n        Property('0')\n    ], AccumulationSeries.prototype, \"innerRadius\", void 0);\n    __decorate([\n        Property('Pie')\n    ], AccumulationSeries.prototype, \"type\", void 0);\n    __decorate([\n        Property(true)\n    ], AccumulationSeries.prototype, \"enableTooltip\", void 0);\n    __decorate([\n        Property(false)\n    ], AccumulationSeries.prototype, \"explode\", void 0);\n    __decorate([\n        Property('30%')\n    ], AccumulationSeries.prototype, \"explodeOffset\", void 0);\n    __decorate([\n        Property(false)\n    ], AccumulationSeries.prototype, \"explodeAll\", void 0);\n    __decorate([\n        Property(null)\n    ], AccumulationSeries.prototype, \"explodeIndex\", void 0);\n    __decorate([\n        Complex({ mode: 'Drop' }, EmptyPointSettings)\n    ], AccumulationSeries.prototype, \"emptyPointSettings\", void 0);\n    __decorate([\n        Property(0)\n    ], AccumulationSeries.prototype, \"gapRatio\", void 0);\n    __decorate([\n        Property('80%')\n    ], AccumulationSeries.prototype, \"width\", void 0);\n    __decorate([\n        Property('80%')\n    ], AccumulationSeries.prototype, \"height\", void 0);\n    __decorate([\n        Property('20%')\n    ], AccumulationSeries.prototype, \"neckWidth\", void 0);\n    __decorate([\n        Property('20%')\n    ], AccumulationSeries.prototype, \"neckHeight\", void 0);\n    __decorate([\n        Property('Linear')\n    ], AccumulationSeries.prototype, \"pyramidMode\", void 0);\n    __decorate([\n        Property('Standard')\n    ], AccumulationSeries.prototype, \"funnelMode\", void 0);\n    __decorate([\n        Property(1)\n    ], AccumulationSeries.prototype, \"opacity\", void 0);\n    __decorate([\n        Property('0')\n    ], AccumulationSeries.prototype, \"dashArray\", void 0);\n    __decorate([\n        Complex({}, Accessibility)\n    ], AccumulationSeries.prototype, \"accessibility\", void 0);\n    __decorate([\n        Property(0)\n    ], AccumulationSeries.prototype, \"borderRadius\", void 0);\n    return AccumulationSeries;\n}(ChildProperty));\nexport { AccumulationSeries };\n/**\n * method to get series from index.\n *\n * @private\n * @param {number} index - The index of the series to retrieve.\n * @param {AccumulationSeries[]} visibleSeries - The array of visible series in the chart.\n * @returns {AccumulationSeries} - The series retrieved from the specified index.\n */\nexport function getSeriesFromIndex(index, visibleSeries) {\n    for (var _i = 0, visibleSeries_1 = visibleSeries; _i < visibleSeries_1.length; _i++) {\n        var series = visibleSeries_1[_i];\n        if (index === series.index) {\n            return series;\n        }\n    }\n    return visibleSeries[0];\n}\n/**\n * method to get point from index.\n *\n * @private\n * @param {number} index - The index of the point to retrieve.\n * @param {AccPoints[]} points - The array of points in the data set.\n * @returns {AccPoints} - The point retrieved from the specified index.\n */\nexport function pointByIndex(index, points) {\n    for (var _i = 0, points_1 = points; _i < points_1.length; _i++) {\n        var point = points_1[_i];\n        if (point.index === index) {\n            return point;\n        }\n    }\n    return null;\n}\n"],"mappings":"AAAA,IAAIA,SAAS,GAAI,IAAI,IAAI,IAAI,CAACA,SAAS,IAAM,YAAY;EACrD,IAAIC,aAAa,GAAG,SAAAA,CAAUC,CAAC,EAAEC,CAAC,EAAE;IAChCF,aAAa,GAAGG,MAAM,CAACC,cAAc,IAChC;MAAEC,SAAS,EAAE;IAAG,CAAC,YAAYC,KAAK,IAAI,UAAUL,CAAC,EAAEC,CAAC,EAAE;MAAED,CAAC,CAACI,SAAS,GAAGH,CAAC;IAAE,CAAE,IAC5E,UAAUD,CAAC,EAAEC,CAAC,EAAE;MAAE,KAAK,IAAIK,CAAC,IAAIL,CAAC,EAAE,IAAIA,CAAC,CAACM,cAAc,CAACD,CAAC,CAAC,EAAEN,CAAC,CAACM,CAAC,CAAC,GAAGL,CAAC,CAACK,CAAC,CAAC;IAAE,CAAC;IAC9E,OAAOP,aAAa,CAACC,CAAC,EAAEC,CAAC,CAAC;EAC9B,CAAC;EACD,OAAO,UAAUD,CAAC,EAAEC,CAAC,EAAE;IACnBF,aAAa,CAACC,CAAC,EAAEC,CAAC,CAAC;IACnB,SAASO,EAAEA,CAAA,EAAG;MAAE,IAAI,CAACC,WAAW,GAAGT,CAAC;IAAE;IACtCA,CAAC,CAACU,SAAS,GAAGT,CAAC,KAAK,IAAI,GAAGC,MAAM,CAACS,MAAM,CAACV,CAAC,CAAC,IAAIO,EAAE,CAACE,SAAS,GAAGT,CAAC,CAACS,SAAS,EAAE,IAAIF,EAAE,CAAC,CAAC,CAAC;EACxF,CAAC;AACL,CAAC,CAAE,CAAC;AACJ,IAAII,UAAU,GAAI,IAAI,IAAI,IAAI,CAACA,UAAU,IAAK,UAAUC,UAAU,EAAEC,MAAM,EAAEC,GAAG,EAAEC,IAAI,EAAE;EACnF,IAAIC,CAAC,GAAGC,SAAS,CAACC,MAAM;IAAEC,CAAC,GAAGH,CAAC,GAAG,CAAC,GAAGH,MAAM,GAAGE,IAAI,KAAK,IAAI,GAAGA,IAAI,GAAGd,MAAM,CAACmB,wBAAwB,CAACP,MAAM,EAAEC,GAAG,CAAC,GAAGC,IAAI;IAAEhB,CAAC;EAC5H,IAAI,OAAOsB,OAAO,KAAK,QAAQ,IAAI,OAAOA,OAAO,CAACC,QAAQ,KAAK,UAAU,EAAEH,CAAC,GAAGE,OAAO,CAACC,QAAQ,CAACV,UAAU,EAAEC,MAAM,EAAEC,GAAG,EAAEC,IAAI,CAAC,CAAC,KAC1H,KAAK,IAAIQ,CAAC,GAAGX,UAAU,CAACM,MAAM,GAAG,CAAC,EAAEK,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE,IAAIxB,CAAC,GAAGa,UAAU,CAACW,CAAC,CAAC,EAAEJ,CAAC,GAAG,CAACH,CAAC,GAAG,CAAC,GAAGjB,CAAC,CAACoB,CAAC,CAAC,GAAGH,CAAC,GAAG,CAAC,GAAGjB,CAAC,CAACc,MAAM,EAAEC,GAAG,EAAEK,CAAC,CAAC,GAAGpB,CAAC,CAACc,MAAM,EAAEC,GAAG,CAAC,KAAKK,CAAC;EACjJ,OAAOH,CAAC,GAAG,CAAC,IAAIG,CAAC,IAAIlB,MAAM,CAACuB,cAAc,CAACX,MAAM,EAAEC,GAAG,EAAEK,CAAC,CAAC,EAAEA,CAAC;AACjE,CAAC;AACD;AACA;AACA;AACA,SAASM,QAAQ,EAAEC,aAAa,EAAEC,OAAO,EAAEC,aAAa,EAAEC,OAAO,EAAEC,aAAa,EAAEC,MAAM,QAAQ,sBAAsB;AACtH,SAASC,iBAAiB,EAAEC,QAAQ,QAAQ,sBAAsB;AAClE,SAASC,WAAW,QAAQ,sBAAsB;AAClD,SAASC,MAAM,EAAEC,IAAI,EAAEC,SAAS,EAAEC,kBAAkB,EAAEC,SAAS,EAAEC,aAAa,QAAQ,yBAAyB;AAC/G,SAASC,IAAI,EAAEC,UAAU,EAAEC,WAAW,QAAQ,0BAA0B;AACxE,SAASC,cAAc,EAAEC,kBAAkB,EAAEC,YAAY,QAAQ,2BAA2B;AAC5F,SAASC,YAAY,EAAEC,WAAW,QAAQ,8BAA8B;AACxE,SAASC,cAAc,QAAQ,0BAA0B;AACzD,SAASC,UAAU,EAAEC,gBAAgB,QAAQ,2BAA2B;AACxE,SAASC,aAAa,QAAQ,yCAAyC;AACvE,SAASC,aAAa,QAAQ,4BAA4B;AAC1D;AACA;AACA;AACA;AACA,IAAIC,8BAA8B,GAAG,aAAe,UAAUC,MAAM,EAAE;EAClE1D,SAAS,CAACyD,8BAA8B,EAAEC,MAAM,CAAC;EACjD,SAASD,8BAA8BA,CAAA,EAAG;IACtC,OAAOC,MAAM,KAAK,IAAI,IAAIA,MAAM,CAACC,KAAK,CAAC,IAAI,EAAEvC,SAAS,CAAC,IAAI,IAAI;EACnE;EACAN,UAAU,CAAC,CACPc,QAAQ,CAAC,IAAI,CAAC,CACjB,EAAE6B,8BAA8B,CAAC7C,SAAS,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;EAC/DE,UAAU,CAAC,CACPc,QAAQ,CAAC,GAAG,CAAC,CAChB,EAAE6B,8BAA8B,CAAC7C,SAAS,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;EACzDE,UAAU,CAAC,CACPc,QAAQ,CAAC,GAAG,CAAC,CAChB,EAAE6B,8BAA8B,CAAC7C,SAAS,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;EACzDE,UAAU,CAAC,CACPc,QAAQ,CAAC,OAAO,CAAC,CACpB,EAAE6B,8BAA8B,CAAC7C,SAAS,EAAE,iBAAiB,EAAE,KAAK,CAAC,CAAC;EACvEE,UAAU,CAAC,CACPc,QAAQ,CAAC,OAAO,CAAC,CACpB,EAAE6B,8BAA8B,CAAC7C,SAAS,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;EAC9DE,UAAU,CAAC,CACPc,QAAQ,CAAC,QAAQ,CAAC,CACrB,EAAE6B,8BAA8B,CAAC7C,SAAS,EAAE,mBAAmB,EAAE,KAAK,CAAC,CAAC;EACzEE,UAAU,CAAC,CACPc,QAAQ,CAAC,QAAQ,CAAC,CACrB,EAAE6B,8BAA8B,CAAC7C,SAAS,EAAE,qBAAqB,EAAE,KAAK,CAAC,CAAC;EAC3EE,UAAU,CAAC,CACPc,QAAQ,CAAC,IAAI,CAAC,CACjB,EAAE6B,8BAA8B,CAAC7C,SAAS,EAAE,aAAa,EAAE,KAAK,CAAC,CAAC;EACnE,OAAO6C,8BAA8B;AACzC,CAAC,CAAC5B,aAAa,CAAE;AACjB,SAAS4B,8BAA8B;AACvC;AACA;AACA;AACA,IAAIG,6BAA6B,GAAG,aAAe,UAAUF,MAAM,EAAE;EACjE1D,SAAS,CAAC4D,6BAA6B,EAAEF,MAAM,CAAC;EAChD,SAASE,6BAA6BA,CAAA,EAAG;IACrC,OAAOF,MAAM,KAAK,IAAI,IAAIA,MAAM,CAACC,KAAK,CAAC,IAAI,EAAEvC,SAAS,CAAC,IAAI,IAAI;EACnE;EACAN,UAAU,CAAC,CACPc,QAAQ,CAAC,KAAK,CAAC,CAClB,EAAEgC,6BAA6B,CAAChD,SAAS,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;EAC9DE,UAAU,CAAC,CACPc,QAAQ,CAAC,IAAI,CAAC,CACjB,EAAEgC,6BAA6B,CAAChD,SAAS,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;EAC/DE,UAAU,CAAC,CACPc,QAAQ,CAAC,IAAI,CAAC,CACjB,EAAEgC,6BAA6B,CAAChD,SAAS,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;EAC3DE,UAAU,CAAC,CACPc,QAAQ,CAAC,aAAa,CAAC,CAC1B,EAAEgC,6BAA6B,CAAChD,SAAS,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;EAC3DE,UAAU,CAAC,CACPc,QAAQ,CAAC,QAAQ,CAAC,CACrB,EAAEgC,6BAA6B,CAAChD,SAAS,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;EAC/DE,UAAU,CAAC,CACPc,QAAQ,CAAC,CAAC,CAAC,CACd,EAAEgC,6BAA6B,CAAChD,SAAS,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;EACzDE,UAAU,CAAC,CACPc,QAAQ,CAAC,CAAC,CAAC,CACd,EAAEgC,6BAA6B,CAAChD,SAAS,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;EACzDE,UAAU,CAAC,CACPc,QAAQ,CAAC,CAAC,CAAC,CACd,EAAEgC,6BAA6B,CAAChD,SAAS,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;EAC5DE,UAAU,CAAC,CACPc,QAAQ,CAAC,KAAK,CAAC,CAClB,EAAEgC,6BAA6B,CAAChD,SAAS,EAAE,gBAAgB,EAAE,KAAK,CAAC,CAAC;EACrEE,UAAU,CAAC,CACPgB,OAAO,CAAC;IAAE+B,KAAK,EAAE,IAAI;IAAEC,KAAK,EAAE;EAAK,CAAC,EAAExB,MAAM,CAAC,CAChD,EAAEsB,6BAA6B,CAAChD,SAAS,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;EAC7DE,UAAU,CAAC,CACPgB,OAAO,CAAC;IAAEiC,UAAU,EAAE,IAAI;IAAEC,IAAI,EAAE,IAAI;IAAEC,SAAS,EAAE,IAAI;IAAEC,UAAU,EAAE,IAAI;IAAEJ,KAAK,EAAE;EAAK,CAAC,EAAEvB,IAAI,CAAC,CAClG,EAAEqB,6BAA6B,CAAChD,SAAS,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;EAC3DE,UAAU,CAAC,CACPgB,OAAO,CAAC,CAAC,CAAC,EAAEY,SAAS,CAAC,CACzB,EAAEkB,6BAA6B,CAAChD,SAAS,EAAE,gBAAgB,EAAE,KAAK,CAAC,CAAC;EACrEE,UAAU,CAAC,CACPc,QAAQ,CAAC,IAAI,CAAC,CACjB,EAAEgC,6BAA6B,CAAChD,SAAS,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;EAC/DE,UAAU,CAAC,CACPc,QAAQ,CAAC,EAAE,CAAC,CACf,EAAEgC,6BAA6B,CAAChD,SAAS,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;EAC7DE,UAAU,CAAC,CACPc,QAAQ,CAAC,IAAI,CAAC,CACjB,EAAEgC,6BAA6B,CAAChD,SAAS,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;EAC/DE,UAAU,CAAC,CACPc,QAAQ,CAAC,UAAU,CAAC,CACvB,EAAEgC,6BAA6B,CAAChD,SAAS,EAAE,cAAc,EAAE,KAAK,CAAC,CAAC;EACnEE,UAAU,CAAC,CACPc,QAAQ,CAAC,QAAQ,CAAC,CACrB,EAAEgC,6BAA6B,CAAChD,SAAS,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;EAC/D,OAAOgD,6BAA6B;AACxC,CAAC,CAAC/B,aAAa,CAAE;AACjB,SAAS+B,6BAA6B;AACtC;AACA;AACA;AACA,IAAIO,SAAS,GAAG,aAAe,UAAUT,MAAM,EAAE;EAC7C1D,SAAS,CAACmE,SAAS,EAAET,MAAM,CAAC;EAC5B,SAASS,SAASA,CAAA,EAAG;IACjB,OAAOT,MAAM,KAAK,IAAI,IAAIA,MAAM,CAACC,KAAK,CAAC,IAAI,EAAEvC,SAAS,CAAC,IAAI,IAAI;EACnE;EACAN,UAAU,CAAC,CACPc,QAAQ,CAAC,KAAK,CAAC,CAClB,EAAEuC,SAAS,CAACvD,SAAS,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;EACpCE,UAAU,CAAC,CACPc,QAAQ,CAAC,KAAK,CAAC,CAClB,EAAEuC,SAAS,CAACvD,SAAS,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;EACpC,OAAOuD,SAAS;AACpB,CAAC,CAACtC,aAAa,CAAE;AACjB,SAASsC,SAAS;AAClB;AACA;AACA;AACA;AACA;AACA,IAAIC,SAAS,GAAG,aAAe,YAAY;EACvC,SAASA,SAASA,CAAA,EAAG;IACjB;IACA,IAAI,CAACC,OAAO,GAAG,IAAI;IACnB;IACA,IAAI,CAACC,cAAc,GAAG,IAAI;IAC1B;IACA,IAAI,CAACC,MAAM,GAAG,IAAI;IAClB;IACA,IAAI,CAACC,WAAW,GAAG,IAAI;IACvB;IACA,IAAI,CAACC,YAAY,GAAG,IAAI;IACxB,IAAI,CAACC,OAAO,GAAG,IAAI;IACnB;IACA,IAAI,CAACC,SAAS,GAAG,KAAK;IACtB;IACA,IAAI,CAACC,SAAS,GAAG,KAAK;IACtB;IACA,IAAI,CAACC,QAAQ,GAAG,KAAK;IACrB;IACA,IAAI,CAACC,QAAQ,GAAG,IAAI;IACpB;IACA,IAAI,CAACC,cAAc,GAAG,IAAI;IAC1B;IACA,IAAI,CAACC,kBAAkB,GAAG,IAAI;EAClC;EACA,OAAOZ,SAAS;AACpB,CAAC,CAAC,CAAE;AACJ,SAASA,SAAS;AAClB;AACA;AACA;AACA,IAAIa,kBAAkB,GAAG,aAAe,UAAUvB,MAAM,EAAE;EACtD1D,SAAS,CAACiF,kBAAkB,EAAEvB,MAAM,CAAC;EACrC,SAASuB,kBAAkBA,CAAA,EAAG;IAC1B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAIC,KAAK,GAAGxB,MAAM,KAAK,IAAI,IAAIA,MAAM,CAACC,KAAK,CAAC,IAAI,EAAEvC,SAAS,CAAC,IAAI,IAAI;IACpE;IACA8D,KAAK,CAACC,MAAM,GAAG,EAAE;IACjB;IACAD,KAAK,CAACE,aAAa,GAAG,EAAE;IACxB;IACAF,KAAK,CAACG,WAAW,GAAG,CAAC;IACrB;IACAH,KAAK,CAACI,YAAY,GAAG,IAAI;IACzB;IACAJ,KAAK,CAACK,QAAQ,GAAG,IAAI3C,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACrC;IACAsC,KAAK,CAACM,QAAQ,GAAG,QAAQ;IACzB;IACAN,KAAK,CAACO,eAAe,GAAG,EAAE;IAC1B;IACAP,KAAK,CAACQ,cAAc,GAAG,EAAE;IACzB,OAAOR,KAAK;EAChB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACID,kBAAkB,CAACrE,SAAS,CAAC+E,kBAAkB,GAAG,UAAUC,YAAY,EAAEC,MAAM,EAAE;IAC9E,IAAIX,KAAK,GAAG,IAAI;IAChB,IAAI,CAACU,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACE,MAAM,GAAG,IAAI,CAACA,MAAM,GAAG,IAAI,CAACA,MAAM,GAAI9D,OAAO,CAAC+D,QAAQ,IAAI,IAAI,CAACC,SAAS,CAACC,QAAQ,KAAK,SAAS,GAAI,KAAK,GAAG,KAAK;IACrH,IAAIC,UAAU,GAAG,IAAI,CAACC,UAAU,IAAIP,YAAY,CAACO,UAAU;IAC3D,IAAI,EAAED,UAAU,YAAY7D,WAAW,CAAC,IAAIF,iBAAiB,CAAC,IAAI,CAACiE,KAAK,CAAC,EAAE;MACvE,IAAI,CAACC,kBAAkB,CAAC;QAAEC,MAAM,EAAEJ,UAAU;QAAEK,KAAK,EAAEL,UAAU,CAAC7E;MAAO,CAAC,EAAEuE,YAAY,EAAEC,MAAM,CAAC;MAC/F;IACJ;IACA,IAAIW,WAAW,GAAG,IAAI,CAACC,UAAU,CAACC,OAAO,CAAC,IAAI,CAACD,UAAU,CAACE,aAAa,CAAC,CAAC,CAACC,aAAa,CAAC,CAAC,CAAC;IAC1FJ,WAAW,CAACK,IAAI,CAAC,UAAUC,CAAC,EAAE;MAAE,OAAO5B,KAAK,CAACmB,kBAAkB,CAACS,CAAC,EAAElB,YAAY,CAAC;IAAE,CAAC,CAAC;EACxF,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIX,kBAAkB,CAACrE,SAAS,CAACyF,kBAAkB,GAAG,UAAUS,CAAC,EAAElB,YAAY,EAAEC,MAAM,EAAE;IACjF,IAAIA,MAAM,KAAK,KAAK,CAAC,EAAE;MAAEA,MAAM,GAAG,IAAI;IAAE;IACxC,IAAIf,QAAQ,GAAG;MACXiC,IAAI,EAAE7D,YAAY;MAAE8D,MAAM,EAAE,IAAI;MAAEC,IAAI,EAAEH,CAAC,CAACR;IAC9C,CAAC;IACDV,YAAY,CAACsB,sBAAsB,GAAG,KAAK;IAC3CtB,YAAY,CAACuB,OAAO,CAACjE,YAAY,EAAE4B,QAAQ,CAAC;IAC5C,IAAI,CAACsC,UAAU,GAAGN,CAAC,CAACR,MAAM,KAAK,EAAE,GAAGQ,CAAC,CAACR,MAAM,GAAG,EAAE;IACjD,IAAI,CAACV,YAAY,CAACyB,QAAQ,IAAI,CAACxB,MAAM,EAAE;MACnC,IAAI,CAACyB,SAAS,CAAC,IAAI,CAACF,UAAU,EAAExB,YAAY,CAAC,CAAC,CAAC;IACnD;IACA,IAAK,EAAEA,YAAY,CAAC2B,YAAY,KAAK3B,YAAY,CAAC4B,aAAa,CAACnG,MAAM,IAAIwE,MAAM,IACxE4B,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC5B,MAAM,IAAID,YAAY,CAAC2B,YAAY,KAAK,CAAE,EAAE;MACrE,IAAI,CAACD,SAAS,CAAC,IAAI,CAACF,UAAU,EAAExB,YAAY,CAAC;MAC7CA,YAAY,CAAC8B,YAAY,CAAC,CAAC;IAC/B;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIzC,kBAAkB,CAACrE,SAAS,CAAC0G,SAAS,GAAG,UAAUhB,MAAM,EAAEV,YAAY,EAAE;IACrE,IAAIvE,MAAM,GAAGjB,MAAM,CAACuH,IAAI,CAACrB,MAAM,CAAC,CAACjF,MAAM;IACvC,IAAI,CAACgE,WAAW,GAAG,CAAC;IACpB,IAAIhE,MAAM,KAAK,CAAC,EAAE;MACd;MACA,IAAI,CAAC8D,MAAM,GAAG,EAAE;MAChB,OAAO,IAAI;IACf;IACA,IAAI,CAACyC,eAAe,CAACtB,MAAM,CAAC;IAC5B,IAAI,CAACnB,MAAM,GAAG,EAAE;IAChB,IAAI,CAACC,aAAa,GAAG,EAAE;IACvB,IAAI,CAACyC,SAAS,GAAG,CAAC;IAClB,IAAIC,KAAK;IACT,IAAIC,MAAM,GAAG,IAAI,CAACC,QAAQ,CAAC3G,MAAM,GAAG,IAAI,CAAC2G,QAAQ,GAAG5E,cAAc,CAACwC,YAAY,CAACqC,KAAK,CAAC;IACtF,IAAIC,SAAS,GAAGnF,cAAc,CAAC,IAAI,CAACoF,OAAO,EAAE,IAAI,CAAC9C,WAAW,CAAC;IAC9D,KAAK,IAAI3D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,MAAM,EAAEK,CAAC,EAAE,EAAE;MAC7BoG,KAAK,GAAG,IAAI,CAACM,SAAS,CAAC9B,MAAM,EAAE5E,CAAC,EAAEqG,MAAM,EAAEnC,YAAY,CAAC;MACvD,IAAI,CAAC,IAAI,CAACyC,MAAM,CAACP,KAAK,EAAEI,SAAS,EAAExG,CAAC,CAAC,EAAE;QACnC,IAAIS,iBAAiB,CAAC2F,KAAK,CAACQ,CAAC,CAAC,EAAE;UAC5BR,KAAK,CAACzD,OAAO,GAAG,KAAK;QACzB;QACA,IAAI,CAACkE,UAAU,CAACT,KAAK,EAAEC,MAAM,CAAC;MAClC,CAAC,MACI;QACDD,KAAK,CAACU,KAAK,GAAG,IAAI,CAACpD,aAAa,CAAC/D,MAAM;QACvCyG,KAAK,CAACnD,SAAS,GAAG,IAAI;QACtB,IAAI,CAACS,aAAa,CAACqD,IAAI,CAACX,KAAK,CAAC;QAC9BA,KAAK,CAACjD,QAAQ,GAAG,IAAI;MACzB;IACJ;IACA,IAAI,CAAC6D,WAAW,GAAG,IAAI,CAACP,OAAO;IAC/B,IAAI,IAAI,CAACN,SAAS,GAAG,CAAC,EAAE;MACpB,IAAIc,WAAW,GAAG,IAAI,CAACC,iBAAiB,CAAC,CAAC;MAC1C,IAAI,CAACL,UAAU,CAACI,WAAW,EAAEZ,MAAM,CAAC;MACpC,IAAIc,cAAc,GAAG,IAAI,CAAC1D,MAAM,CAAC9D,MAAM,GAAG,CAAC;MAC3C,IAAI,CAAC+D,aAAa,CAAC0D,GAAG,CAAC,UAAUhB,KAAK,EAAE;QACpCA,KAAK,CAACU,KAAK,IAAIK,cAAc;QAC7Bf,KAAK,CAAChE,KAAK,GAAG6E,WAAW,CAAC7E,KAAK;MACnC,CAAC,CAAC;IACN;IACA,IAAI,IAAI,CAACsB,aAAa,CAAC/D,MAAM,IAAI,IAAI,CAAC0H,OAAO,IAAI,IAAI,CAACC,IAAI,KAAK,KAAK,KAC5D,IAAI,CAACC,UAAU,IAAI,IAAI,CAAC9D,MAAM,CAAC,IAAI,CAACA,MAAM,CAAC9D,MAAM,GAAG,CAAC,CAAC,CAACmH,KAAK,KAAK,IAAI,CAACU,YAAY,CAAC,EAAE;MACzF,IAAI,CAAC/D,MAAM,CAACgE,MAAM,CAAC,IAAI,CAAChE,MAAM,CAAC9D,MAAM,GAAG,CAAC,EAAE,CAAC,CAAC;MAC7C,IAAI,CAAC8D,MAAM,GAAG,IAAI,CAACA,MAAM,CAACiE,MAAM,CAAC,IAAI,CAAChE,aAAa,CAAC;IACxD;EACJ,CAAC;EACDH,kBAAkB,CAACrE,SAAS,CAACgI,iBAAiB,GAAG,YAAY;IACzD,IAAIS,SAAS,GAAG,IAAIjF,SAAS,CAAC,CAAC;IAC/BiF,SAAS,CAACzE,SAAS,GAAG,IAAI;IAC1ByE,SAAS,CAACC,CAAC,GAAG,QAAQ;IACtBD,SAAS,CAACf,CAAC,GAAG,IAAI,CAACT,SAAS;IAC5BwB,SAAS,CAACE,IAAI,GAAGF,SAAS,CAACG,YAAY,GAAGH,SAAS,CAACC,CAAC,GAAG,IAAI,GAAG,IAAI,CAACzB,SAAS;IAC7EwB,SAAS,CAACI,WAAW,GAAG,KAAK;IAC7B,OAAOJ,SAAS;EACpB,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACIpE,kBAAkB,CAACrE,SAAS,CAAC2H,UAAU,GAAG,UAAUT,KAAK,EAAEC,MAAM,EAAE;IAC/DD,KAAK,CAACU,KAAK,GAAG,IAAI,CAACrD,MAAM,CAAC9D,MAAM;IAChCyG,KAAK,CAACnD,SAAS,GAAG,IAAI,CAACsE,UAAU,IAAKnB,KAAK,CAACU,KAAK,KAAK,IAAI,CAACU,YAAa;IACxEpB,KAAK,CAAChE,KAAK,GAAGgE,KAAK,CAAChE,KAAK,IAAIiE,MAAM,CAACD,KAAK,CAACU,KAAK,GAAGT,MAAM,CAAC1G,MAAM,CAAC;IAChE,IAAI,CAAC8D,MAAM,CAACsD,IAAI,CAACX,KAAK,CAAC;EAC3B,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI7C,kBAAkB,CAACrE,SAAS,CAACyH,MAAM,GAAG,UAAUP,KAAK,EAAEI,SAAS,EAAEM,KAAK,EAAE;IACrE,IAAI,CAACrG,iBAAiB,CAAC+F,SAAS,CAAC,EAAE;MAC/B,IAAI,IAAI,CAACwB,SAAS,KAAK,OAAO,IAAIC,IAAI,CAACC,GAAG,CAAC9B,KAAK,CAACQ,CAAC,CAAC,IAAIJ,SAAS,EAAE;QAC9D,IAAI,CAACL,SAAS,IAAI8B,IAAI,CAACC,GAAG,CAAC9B,KAAK,CAACQ,CAAC,CAAC;QACnC,OAAO,IAAI;MACf,CAAC,MACI,IAAI,IAAI,CAACoB,SAAS,KAAK,OAAO,IAAIlB,KAAK,IAAIN,SAAS,EAAE;QACvD,IAAI,CAACL,SAAS,IAAI8B,IAAI,CAACC,GAAG,CAAC9B,KAAK,CAACQ,CAAC,CAAC;QACnC,OAAO,IAAI;MACf;IACJ;IACA,OAAO,KAAK;EAChB,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIrD,kBAAkB,CAACrE,SAAS,CAACgH,eAAe,GAAG,UAAUtB,MAAM,EAAE;IAC7D,IAAIjF,MAAM,GAAGjB,MAAM,CAACuH,IAAI,CAACrB,MAAM,CAAC,CAACjF,MAAM;IACvC,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,MAAM,EAAEK,CAAC,EAAE,EAAE;MAC7B,IAAI,CAACS,iBAAiB,CAACmE,MAAM,CAAC5E,CAAC,CAAC,CAAC,IAAI,CAACS,iBAAiB,CAACmE,MAAM,CAAC5E,CAAC,CAAC,CAAC,IAAI,CAACmI,KAAK,CAAC,CAAC,IACvE,CAACC,KAAK,CAACxD,MAAM,CAAC5E,CAAC,CAAC,CAAC,IAAI,CAACmI,KAAK,CAAC,CAAC,EAAE;QAClC,IAAI,CAACxE,WAAW,IAAIsE,IAAI,CAACC,GAAG,CAACtD,MAAM,CAAC5E,CAAC,CAAC,CAAC,IAAI,CAACmI,KAAK,CAAC,CAAC;MACvD;IACJ;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI5E,kBAAkB,CAACrE,SAAS,CAACwH,SAAS,GAAG,UAAUnB,IAAI,EAAEvF,CAAC,EAAEqG,MAAM,EAAEnC,YAAY,EAAE;IAC9E,IAAIkC,KAAK,GAAG,IAAI1D,SAAS,CAAC,CAAC;IAC3B0D,KAAK,CAACwB,CAAC,GAAGlH,QAAQ,CAAC,IAAI,CAAC2H,KAAK,EAAE9C,IAAI,CAACvF,CAAC,CAAC,CAAC;IACvCoG,KAAK,CAACQ,CAAC,GAAGlG,QAAQ,CAAC,IAAI,CAACyH,KAAK,EAAE5C,IAAI,CAACvF,CAAC,CAAC,CAAC;IACvCoG,KAAK,CAACkC,cAAc,GAAG5H,QAAQ,CAAC,IAAI,CAAC4H,cAAc,EAAE/C,IAAI,CAACvF,CAAC,CAAC,CAAC;IAC7DoG,KAAK,CAAChE,KAAK,GAAG1B,QAAQ,CAAC,IAAI,CAAC6H,iBAAiB,EAAEhD,IAAI,CAACvF,CAAC,CAAC,CAAC;IACvDoG,KAAK,CAACyB,IAAI,GAAGzB,KAAK,CAAC0B,YAAY,GAAGpH,QAAQ,CAAC,IAAI,CAAC4D,SAAS,CAACe,IAAI,IAAI,EAAE,EAAEE,IAAI,CAACvF,CAAC,CAAC,CAAC;IAC9EoG,KAAK,CAACoC,OAAO,GAAG9H,QAAQ,CAAC,IAAI,CAAC+H,kBAAkB,IAAI,EAAE,EAAElD,IAAI,CAACvF,CAAC,CAAC,CAAC;IAChEoG,KAAK,CAAC2B,WAAW,GAAGrH,QAAQ,CAAC,IAAI,CAAC0D,MAAM,EAAEmB,IAAI,CAACvF,CAAC,CAAC,CAAC;IAClDoG,KAAK,CAAC2B,WAAW,GAAGtH,iBAAiB,CAAC2F,KAAK,CAAC2B,WAAW,CAAC,GAAG,KAAK,GAAG3B,KAAK,CAAC2B,WAAW;IACpF3B,KAAK,CAACsC,UAAU,GAAGxE,YAAY,CAACyE,IAAI,CAACC,YAAY,CAACxC,KAAK,CAACQ,CAAC,EAAE;MAAEiC,WAAW,EAAE3E,YAAY,CAAC4E;IAAqB,CAAC,CAAC;IAC9G,IAAI,CAACC,gBAAgB,CAAC3C,KAAK,EAAEpG,CAAC,EAAEuF,IAAI,CAAC;IACrC,OAAOa,KAAK;EAChB,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI7C,kBAAkB,CAACrE,SAAS,CAAC8J,YAAY,GAAG,UAAU9E,YAAY,EAAE+E,MAAM,EAAE;IACxE,IAAIC,WAAW,GAAGD,MAAM,GAAGtH,UAAU,CAACuC,YAAY,CAACiF,OAAO,CAACC,EAAE,GAAG,UAAU,GAAG,IAAI,CAACtC,KAAK,CAAC,GACpF5C,YAAY,CAACmF,QAAQ,CAACC,WAAW,CAAC;MAAEF,EAAE,EAAElF,YAAY,CAACiF,OAAO,CAACC,EAAE,GAAG,UAAU,GAAG,IAAI,CAACtC;IAAM,CAAC,CAAC;IAChG,IAAI,CAACyC,YAAY,CAACrF,YAAY,EAAEgF,WAAW,EAAED,MAAM,CAAC;IACpD,IAAIO,cAAc;IAClB,IAAItF,YAAY,CAACuF,2BAA2B,IAAI,IAAI,CAACnF,SAAS,CAAC3B,OAAO,EAAE;MACpE6G,cAAc,GAAGtF,YAAY,CAACmF,QAAQ,CAACC,WAAW,CAAC;QAAEF,EAAE,EAAElF,YAAY,CAACiF,OAAO,CAACC,EAAE,GAAG,oBAAoB,GAAG,IAAI,CAACtC;MAAM,CAAC,CAAC;MACvH0C,cAAc,CAACE,KAAK,CAACC,UAAU,GAC1B,CAAE,IAAI,CAACC,SAAS,CAACC,MAAM,IAAItJ,aAAa,KAAK,SAAS,IAAKA,aAAa,KAAK,QAAQ,KAAK2D,YAAY,CAAC4F,aAAa,IAAI,IAAI,CAACxC,IAAI,KAAK,KAAK,GAAI,QAAQ,GAAG,SAAS;MACxK,IAAI,CAACyC,eAAe,CAAC7F,YAAY,EAAEsF,cAAc,EAAEP,MAAM,CAAC;IAC9D;IACA,IAAI,IAAI,CAAC3B,IAAI,KAAK,KAAK,EAAE;MACrB,IAAI,CAACpD,YAAY,CAAC+E,MAAM,EAAE;QACtB,IAAI,CAACe,aAAa,CAAC,IAAI,CAACC,UAAU,EAAE,IAAI,CAACC,iBAAiB,CAAC;MAC/D;MACAhG,YAAY,CAACiG,eAAe,CAACL,aAAa,CAAC5F,YAAY,EAAE,IAAI,CAAC0F,SAAS,EAAE,IAAI,EAAEV,WAAW,EAAE,IAAI,CAACkB,YAAY,EAAE,IAAI,CAAC3G,MAAM,CAAC;IAC/H;IACA,IAAI,CAACS,YAAY,CAAC+E,MAAM,IAAI/E,YAAY,CAACmG,wBAAwB,EAAE;MAC/D,IAAI,CAACJ,UAAU,CAACrC,CAAC,IAAI1D,YAAY,CAACoG,eAAe;MACjD,IAAI,CAACL,UAAU,CAACrD,CAAC,IAAI1C,YAAY,CAACoG,eAAe;MACjD,IAAI,CAACL,UAAU,CAACM,MAAM,IAAKrG,YAAY,CAACoG,eAAe,GAAG,IAAI,CAACL,UAAU,CAACrD,CAAE;MAC5E,IAAI,CAACqD,UAAU,CAAC9H,KAAK,IAAK+B,YAAY,CAACoG,eAAe,GAAG,IAAI,CAACL,UAAU,CAACrC,CAAE;IAC/E;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIrE,kBAAkB,CAACrE,SAAS,CAACqK,YAAY,GAAG,UAAUrF,YAAY,EAAEgF,WAAW,EAAED,MAAM,EAAEuB,aAAa,EAAEC,cAAc,EAAEC,cAAc,EAAE;IACpI,IAAIC,OAAO,GAAGzG,YAAY,CAACiF,OAAO,CAACC,EAAE,GAAG,UAAU,GAAG,IAAI,CAACtC,KAAK,GAAG,SAAS;IAC3E,IAAI8D,MAAM;IACV,IAAIC,WAAW;IACf,IAAIC,OAAO,GAAG,EAAE;IAChB,IAAIC,aAAa,GAAG,EAAE;IACtB,IAAIC,QAAQ,GAAG,CAAC,YAAY,EAAE,MAAM,EAAE,iBAAiB,EAAE,YAAY,EAAE,QAAQ,EAAE,kBAAkB,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,EAAE,gBAAgB,EAAE,cAAc,EAAE,WAAW,EAAE,KAAK,EAAE,gBAAgB,EAAE,kBAAkB,EAAE,QAAQ,CAAC;IACrQ,KAAK,IAAIC,EAAE,GAAG,CAAC,EAAEC,EAAE,GAAG,IAAI,CAACzH,MAAM,EAAEwH,EAAE,GAAGC,EAAE,CAACvL,MAAM,EAAEsL,EAAE,EAAE,EAAE;MACrD,IAAI7E,KAAK,GAAG8E,EAAE,CAACD,EAAE,CAAC;MAClB7E,KAAK,CAAC+E,UAAU,GAAI,CAAC,CAAC/E,KAAK,CAACQ,CAAC,GAAG,IAAI,CAACjD,WAAW,GAAG,GAAG,EAAEyH,OAAO,CAAC,CAAC,CAAE;MACnE,IAAIhI,QAAQ,GAAG;QACXiI,MAAM,EAAE,KAAK;QAAEhG,IAAI,EAAE5D,WAAW;QAAE6D,MAAM,EAAE,IAAI;QAAEc,KAAK,EAAEA,KAAK;QAAEkF,IAAI,EAAElF,KAAK,CAAChE,KAAK;QAC/EmJ,MAAM,EAAE,IAAI,CAACC,OAAO,CAACpF,KAAK,CAAC,GAAG;UAAEjE,KAAK,EAAE,IAAI,CAACsJ,kBAAkB,CAACF,MAAM,CAACpJ,KAAK;UAAEC,KAAK,EAAE,IAAI,CAACqJ,kBAAkB,CAACF,MAAM,CAACnJ;QAAM,CAAC,GACtH;UAAED,KAAK,EAAE,IAAI,CAACoJ,MAAM,CAACpJ,KAAK;UAAEC,KAAK,EAAE,IAAI,CAACmJ,MAAM,CAACnJ;QAAM,CAAC;QAAEsJ,OAAO,EAAE,IAAI,CAACC,YAAY,GAAGX,QAAQ,CAAC5E,KAAK,CAACU,KAAK,GAAGkE,QAAQ,CAACrL,MAAM,CAAC,GAAG;MACvI,CAAC;MACDuE,YAAY,CAACuB,OAAO,CAAChE,WAAW,EAAE2B,QAAQ,CAAC;MAC3CgD,KAAK,CAAChE,KAAK,GAAGgB,QAAQ,CAACkI,IAAI;MAC3BT,WAAW,GAAGzE,KAAK,CAAChE,KAAK;MACzB,IAAI,IAAI,CAACuJ,YAAY,EAAE;QACnB,IAAIC,SAAS,GAAG,IAAI/J,aAAa,CAACqC,YAAY,CAAC;QAC/C2G,WAAW,GAAGe,SAAS,CAACF,OAAO,CAACxH,YAAY,EAAEkC,KAAK,CAAChE,KAAK,EAAEgE,KAAK,CAACU,KAAK,EAAE1D,QAAQ,CAACsI,OAAO,EAAE,IAAI,CAACG,OAAO,CAAC;MAC3G;MACAjB,MAAM,GAAG,IAAIzJ,UAAU,CAACwJ,OAAO,GAAGvE,KAAK,CAACU,KAAK,EAAE+D,WAAW,EAAEzH,QAAQ,CAACmI,MAAM,CAACpJ,KAAK,IAAI,CAAC,EAAEiB,QAAQ,CAACmI,MAAM,CAACnJ,KAAK,IAAIgE,KAAK,CAAChE,KAAK,EAAE,IAAI,CAACyJ,OAAO,EAAEzI,QAAQ,CAACkC,MAAM,CAACwG,SAAS,EAAE,EAAE,CAAC;MAC1K,IAAI,IAAI,CAACC,UAAU,KAAK,aAAa,IAAI,IAAI,CAACzE,IAAI,KAAK,QAAQ,EAAE;QAC7DwD,OAAO,CAAC/D,IAAI,CAAC6D,MAAM,CAAC;QACpB,IAAIxE,KAAK,CAACzD,OAAO,EAAE;UACfoI,aAAa,CAAChE,IAAI,CAACX,KAAK,CAAC;QAC7B;MACJ,CAAC,MACI;QACDlC,YAAY,CAAEtC,gBAAgB,CAAC,IAAI,CAAC0F,IAAI,CAAC,GAAG,cAAc,CAAE,CACxD0E,WAAW,CAAC5F,KAAK,EAAE,IAAI,EAAElC,YAAY,EAAE0G,MAAM,EAAE1B,WAAW,EAAED,MAAM,EAAEuB,aAAa,EAAEC,cAAc,EAAEC,cAAc,CAAC;MAC1H;IACJ;IACA,IAAI,IAAI,CAACqB,UAAU,KAAK,aAAa,IAAI,IAAI,CAACzE,IAAI,KAAK,QAAQ,EAAE;MAC7DpD,YAAY,CAAEtC,gBAAgB,CAAC,IAAI,CAAC0F,IAAI,CAAC,GAAG,cAAc,CAAE,CACxD2E,uBAAuB,CAAC,IAAI,EAAElB,aAAa,EAAE7G,YAAY,EAAE4G,OAAO,EAAE5B,WAAW,EAAED,MAAM,CAAC;IAChG,CAAC,MACI;MACD3H,kBAAkB,CAAC,KAAK,EAAE4C,YAAY,CAACgI,gBAAgB,CAAC,CAAC,EAAEhD,WAAW,EAAED,MAAM,CAAC;IACnF;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI1F,kBAAkB,CAACrE,SAAS,CAAC6K,eAAe,GAAG,UAAU7F,YAAY,EAAEsF,cAAc,EAAEP,MAAM,EAAE;IAC3F/E,YAAY,CAACuF,2BAA2B,CAAC0C,YAAY,CAAC,CAAC;IACvD,IAAIhD,OAAO,GAAG9I,aAAa,CAAC,KAAK,EAAE;MAC/B+I,EAAE,EAAElF,YAAY,CAACiF,OAAO,CAACC,EAAE,GAAG,WAAW,GAAG;IAChD,CAAC,CAAC;IACF,IAAI,CAACpF,cAAc,GAAG,EAAE;IACxB,IAAI,CAACD,eAAe,GAAG,EAAE;IACzB,IAAIqI,YAAY,GAAG,EAAE;IACrB,IAAIC,aAAa,GAAG,EAAE;IACtB,KAAK,IAAIpB,EAAE,GAAG,CAAC,EAAEC,EAAE,GAAG,IAAI,CAACzH,MAAM,EAAEwH,EAAE,GAAGC,EAAE,CAACvL,MAAM,EAAEsL,EAAE,EAAE,EAAE;MACrD,IAAI7E,KAAK,GAAG8E,EAAE,CAACD,EAAE,CAAC;MAClB,IAAI7E,KAAK,CAACzD,OAAO,EAAE;QACf,IAAI,IAAI,CAAC2B,SAAS,CAACgI,QAAQ,IAAK,CAAC,IAAI,CAAChI,SAAS,CAACgI,QAAQ,KAAMlG,KAAK,CAACQ,CAAC,KAAK,CAAC,IAAMR,KAAK,CAACQ,CAAC,KAAK,CAAC,IAC1F,IAAI,CAAC6E,kBAAkB,CAACc,IAAI,KAAK,MAAO,CAAE,EAAE;UAC5CrI,YAAY,CAACuF,2BAA2B,CAACM,eAAe,CAAC3D,KAAK,EAAE,IAAI,CAAC9B,SAAS,EAAEkF,cAAc,EAAE,IAAI,CAAC/F,MAAM,EAAE,IAAI,CAACqD,KAAK,EAAEqC,OAAO,EAAEF,MAAM,CAAC;QAC7I;MACJ;MACA,IAAI7C,KAAK,CAACoG,QAAQ,IAAI,EAAE,IAAIpG,KAAK,CAACoG,QAAQ,IAAI,GAAG,EAAE;QAC/C,IAAI,CAACxI,cAAc,CAAC+C,IAAI,CAACX,KAAK,CAAC;MACnC,CAAC,MACI;QACD,IAAIA,KAAK,CAACoG,QAAQ,IAAI,CAAC,IAAIpG,KAAK,CAACoG,QAAQ,IAAI,EAAE,EAAE;UAC7CH,aAAa,CAACtF,IAAI,CAACX,KAAK,CAAC;QAC7B,CAAC,MACI;UACDgG,YAAY,CAACrF,IAAI,CAACX,KAAK,CAAC;QAC5B;MACJ;IACJ;IACAgG,YAAY,CAACK,IAAI,CAAC,UAAUC,CAAC,EAAEjO,CAAC,EAAE;MAAE,OAAOiO,CAAC,CAACF,QAAQ,GAAG/N,CAAC,CAAC+N,QAAQ;IAAE,CAAC,CAAC;IACtEH,aAAa,CAACI,IAAI,CAAC,UAAUC,CAAC,EAAEjO,CAAC,EAAE;MAAE,OAAOiO,CAAC,CAACF,QAAQ,GAAG/N,CAAC,CAAC+N,QAAQ;IAAE,CAAC,CAAC;IACvE,IAAI,CAACxI,cAAc,CAACyI,IAAI,CAAC,UAAUC,CAAC,EAAEjO,CAAC,EAAE;MAAE,OAAOiO,CAAC,CAACF,QAAQ,GAAG/N,CAAC,CAAC+N,QAAQ;IAAE,CAAC,CAAC;IAC7E,IAAI,CAACzI,eAAe,GAAGqI,YAAY,CAAC1E,MAAM,CAAC2E,aAAa,CAAC;IACzDnI,YAAY,CAACuF,2BAA2B,CAACkD,cAAc,CAAC,IAAI,EAAE,IAAI,CAACrI,SAAS,EAAEkF,cAAc,EAAEL,OAAO,EAAEF,MAAM,CAAC;IAC9G,IAAI,IAAI,CAAC3E,SAAS,CAACsI,QAAQ,KAAK,IAAI,IAAIzD,OAAO,CAAC0D,iBAAiB,EAAE;MAC/D,IAAIC,iBAAiB,GAAG5I,YAAY,CAACuF,2BAA2B,CAACkD,cAAc,CAACI,IAAI,CAAC7I,YAAY,CAACuF,2BAA2B,EAAE,IAAI,EAAE,IAAI,CAACnF,SAAS,EAAEkF,cAAc,EAAEL,OAAO,EAAEF,MAAM,CAAC;MACrL,IAAI/E,YAAY,CAAC8I,OAAO,EAAE;QACtB9I,YAAY,CAAC+I,oBAAoB,CAACH,iBAAiB,CAAC;MACxD;MACAxL,kBAAkB,CAAC,KAAK,EAAEK,UAAU,CAACuC,YAAY,CAACiF,OAAO,CAACC,EAAE,GAAG,oBAAoB,CAAC,EAAED,OAAO,EAAEF,MAAM,CAAC;IAC1G;IACA3H,kBAAkB,CAAC,KAAK,EAAE4C,YAAY,CAACgI,gBAAgB,CAAC,CAAC,EAAE1C,cAAc,EAAEP,MAAM,CAAC;EACtF,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI1F,kBAAkB,CAACrE,SAAS,CAAC8K,aAAa,GAAG,UAAUkD,UAAU,EAAEC,KAAK,EAAE;IACtED,UAAU,CAACtF,CAAC,GAAGuF,KAAK,CAACvF,CAAC,GAAGsF,UAAU,CAACtF,CAAC,GAAGuF,KAAK,CAACvF,CAAC,GAAGsF,UAAU,CAACtF,CAAC;IAC9DsF,UAAU,CAACtG,CAAC,GAAGuG,KAAK,CAACvG,CAAC,GAAGsG,UAAU,CAACtG,CAAC,GAAGuG,KAAK,CAACvG,CAAC,GAAGsG,UAAU,CAACtG,CAAC;IAC9DsG,UAAU,CAAC3C,MAAM,GAAI4C,KAAK,CAACvG,CAAC,GAAGuG,KAAK,CAAC5C,MAAM,GAAI2C,UAAU,CAAC3C,MAAM,GAAI4C,KAAK,CAACvG,CAAC,GAAGuG,KAAK,CAAC5C,MAAM,GAAI2C,UAAU,CAAC3C,MAAM;IAC/G2C,UAAU,CAAC/K,KAAK,GAAIgL,KAAK,CAACvF,CAAC,GAAGuF,KAAK,CAAChL,KAAK,GAAI+K,UAAU,CAAC/K,KAAK,GAAIgL,KAAK,CAACvF,CAAC,GAAGuF,KAAK,CAAChL,KAAK,GAAI+K,UAAU,CAAC/K,KAAK;EAC9G,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIoB,kBAAkB,CAACrE,SAAS,CAACkO,iBAAiB,GAAG,YAAY;IACzD,IAAIC,GAAG;IACP,KAAK,IAAIrN,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACyD,MAAM,CAAC9D,MAAM,EAAEK,CAAC,EAAE,EAAE;MACzCqN,GAAG,GAAG,IAAI,CAAC5J,MAAM,CAAC,CAAC,CAAC,CAAC6J,QAAQ,CAACnL,KAAK;MACnC,IAAIkL,GAAG,GAAG,IAAI,CAAC5J,MAAM,CAACzD,CAAC,CAAC,CAACsN,QAAQ,CAACnL,KAAK,EAAE;QACrCkL,GAAG,GAAG,IAAI,CAAC5J,MAAM,CAACzD,CAAC,CAAC,CAACsN,QAAQ,CAACnL,KAAK;MACvC;IACJ;IACA,OAAOkL,GAAG;EACd,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI9J,kBAAkB,CAACrE,SAAS,CAAC6J,gBAAgB,GAAG,UAAU3C,KAAK,EAAEpG,CAAC,EAAEuF,IAAI,EAAE;IACtE,IAAI,EAAE9E,iBAAiB,CAAC2F,KAAK,CAACQ,CAAC,CAAC,IAAIwB,KAAK,CAAChC,KAAK,CAACQ,CAAC,CAAC,CAAC,EAAE;MACjD,OAAO,IAAI;IACf;IACAR,KAAK,CAAChE,KAAK,GAAG,IAAI,CAACqJ,kBAAkB,CAACH,IAAI,IAAIlF,KAAK,CAAChE,KAAK;IACzD,QAAQ,IAAI,CAACqJ,kBAAkB,CAACc,IAAI;MAChC,KAAK,MAAM;QACPnG,KAAK,CAACQ,CAAC,GAAG,CAAC;QACXR,KAAK,CAACzD,OAAO,GAAG,IAAI;QACpB;MACJ,KAAK,SAAS;QAAE;UACZ,IAAI4K,QAAQ,GAAGhI,IAAI,CAACvF,CAAC,GAAG,CAAC,CAAC,GAAIuF,IAAI,CAACvF,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAACmI,KAAK,CAAC,IAAI,CAAC,GAAI,CAAC;UAC/D,IAAIqF,IAAI,GAAGjI,IAAI,CAACvF,CAAC,GAAG,CAAC,CAAC,GAAIuF,IAAI,CAACvF,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAACmI,KAAK,CAAC,IAAI,CAAC,GAAI,CAAC;UAC3D/B,KAAK,CAACQ,CAAC,GAAG,CAACqB,IAAI,CAACC,GAAG,CAACqF,QAAQ,CAAC,GAAGtF,IAAI,CAACC,GAAG,CAACsF,IAAI,CAAC,IAAI,CAAC;UACnD,IAAI,CAAC7J,WAAW,IAAIyC,KAAK,CAACQ,CAAC;UAC3BR,KAAK,CAACzD,OAAO,GAAG,IAAI;UACpB;QACJ;MACA;QACIyD,KAAK,CAACzD,OAAO,GAAG,KAAK;QACrB;IACR;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIY,kBAAkB,CAACrE,SAAS,CAACuO,OAAO,GAAG,UAAUlI,IAAI,EAAEmI,QAAQ,EAAE;IAC7D,IAAI,CAACnI,IAAI,EAAE;MACP,OAAO,IAAI;IACf;IACA,IAAIoI,UAAU,GAAG,KAAK;IACtB,IAAI,IAAI,CAAClJ,UAAU,CAAC9E,MAAM,KAAK4F,IAAI,CAAC5F,MAAM,EAAE;MACxCgO,UAAU,GAAG,IAAI;MACjB,KAAK,IAAI3N,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGuF,IAAI,CAAC5F,MAAM,EAAEK,CAAC,EAAE,EAAE;QAClC,IAAI,IAAI,CAACyE,UAAU,CAACzE,CAAC,CAAC,CAAC,IAAI,CAACqI,KAAK,CAAC,KAAK9C,IAAI,CAACvF,CAAC,CAAC,CAAC,IAAI,CAACqI,KAAK,CAAC,EAAE;UACxD,IAAIjC,KAAK,GAAG,IAAI,CAAC3C,MAAM,CAACzD,CAAC,CAAC;UAC1B,IAAI4N,aAAa,GAAG,IAAI,CAACnJ,UAAU,CAACzE,CAAC,CAAC;UACtC,IAAK4N,aAAa,CAAC,IAAI,CAACzF,KAAK,CAAC,KAAK5C,IAAI,CAACvF,CAAC,CAAC,CAAC,IAAI,CAACmI,KAAK,CAAC,EAAG;YACrD/B,KAAK,CAACQ,CAAC,GAAGrB,IAAI,CAACvF,CAAC,CAAC,CAAC,IAAI,CAACmI,KAAK,CAAC;YAC7B,IAAI,CAAC1D,UAAU,CAACzE,CAAC,CAAC,GAAGuF,IAAI,CAACvF,CAAC,CAAC;UAChC;QACJ,CAAC,MACI;UACD2N,UAAU,GAAG,KAAK;UAClB;QACJ;MACJ;IACJ;IACA,IAAI,CAACA,UAAU,EAAE;MACb,IAAI,CAAClJ,UAAU,GAAGc,IAAI;IAC1B,CAAC,MACI;MACD,IAAI,CAAC5B,WAAW,GAAG,CAAC;MACpB,IAAIoH,aAAa,GAAG,EAAE;MACtB,KAAK,IAAI/K,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC0F,UAAU,CAAC/F,MAAM,EAAEK,CAAC,EAAE,EAAE;QAC7C,IAAI,IAAI,CAACyD,MAAM,CAACzD,CAAC,CAAC,IAAI,IAAI,CAACyD,MAAM,CAACzD,CAAC,CAAC,CAAC2C,OAAO,EAAE;UAC1CoI,aAAa,CAAChE,IAAI,CAAC,IAAI,CAACrB,UAAU,CAAC1F,CAAC,CAAC,CAAC;QAC1C;MACJ;MACA,IAAI,CAACkG,eAAe,CAAC6E,aAAa,CAAC;MACnC,IAAI,CAAC7G,YAAY,CAAC+E,MAAM,GAAG,IAAI,CAACmB,YAAY,GAAG,KAAK,GAAG,IAAI,CAAClG,YAAY,CAAC2J,eAAe;MACxF,IAAI,CAAC3J,YAAY,CAAC4F,aAAa,GAAG,KAAK;MACvC,IAAIgE,aAAa,GAAG,IAAI,CAAC5J,YAAY,CAACwJ,QAAQ;MAC9C,IAAI,CAACxJ,YAAY,CAACwJ,QAAQ,GAAGjN,iBAAiB,CAACiN,QAAQ,CAAC,GAAG,GAAG,GAAGA,QAAQ;MACzE,IAAI,CAACxJ,YAAY,CAAEtC,gBAAgB,CAAC,IAAI,CAAC0F,IAAI,CAAC,GAAG,cAAc,CAAE,CAACyG,cAAc,CAAC,IAAI,CAAC7J,YAAY,EAAE,IAAI,CAAC;MACzG,IAAI,CAACqF,YAAY,CAAC,IAAI,CAACrF,YAAY,EAAEvC,UAAU,CAAC,IAAI,CAACuC,YAAY,CAACiF,OAAO,CAACC,EAAE,GAAG,UAAU,GAAG,IAAI,CAACtC,KAAK,CAAC,EAAE,IAAI,CAAC5C,YAAY,CAAC+E,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;MACpJ,IAAI,IAAI,CAAC/E,YAAY,CAAC8J,WAAW,CAACnG,IAAI,EAAE;QACpC,IAAI,CAAC3D,YAAY,CAAC+J,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC;MACnD;MACA,IAAI,IAAI,CAAC/J,YAAY,CAACgK,gBAAgB,EAAE;QACpC,IAAI,CAAChK,YAAY,CAACgK,gBAAgB,CAACC,iBAAiB,CAACxM,UAAU,CAAC,IAAI,CAACuC,YAAY,CAACiF,OAAO,CAACC,EAAE,GAAG,oBAAoB,CAAC,CAAC;MACzH;MACA,IAAI,IAAI,CAAClF,YAAY,CAACuF,2BAA2B,IAAI,IAAI,CAACnF,SAAS,CAAC3B,OAAO,EAAE;QACzE,IAAI,CAACoH,eAAe,CAAC,IAAI,CAAC7F,YAAY,EAAEvC,UAAU,CAAC,IAAI,CAACuC,YAAY,CAACiF,OAAO,CAACC,EAAE,GAAG,oBAAoB,GAAG,IAAI,CAACtC,KAAK,CAAC,EAAE,IAAI,CAAC5C,YAAY,CAAC+E,MAAM,CAAC;MACnJ;MACA,IAAI,CAAC/E,YAAY,CAAC+E,MAAM,GAAG,KAAK;MAChC,IAAI,CAAC/E,YAAY,CAACwJ,QAAQ,GAAGI,aAAa;IAC9C;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIvK,kBAAkB,CAACrE,SAAS,CAACkP,QAAQ,GAAG,UAAUC,SAAS,EAAEX,QAAQ,EAAE;IACnE,IAAIY,QAAQ;IACZ,IAAI,IAAI,CAACpK,YAAY,CAACoB,MAAM,CAAC,CAAC,CAAC,CAAChB,SAAS,CAAC3B,OAAO,EAAE;MAC/C2L,QAAQ,GAAG,IAAI,CAAClB,iBAAiB,CAAC,CAAC;IACvC;IACA,IAAI,CAAC3I,UAAU,CAACsC,IAAI,CAACsH,SAAS,CAAC;IAC/B,IAAI,CAAC3I,UAAU,GAAG,IAAI,CAACjB,UAAU;IACjC,IAAI,CAACd,WAAW,GAAG,CAAC;IACpB,IAAI4K,aAAa,GAAG,EAAE;IACtB,KAAK,IAAIvO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC0F,UAAU,CAAC/F,MAAM,EAAEK,CAAC,EAAE,EAAE;MAC7C,IAAI,IAAI,CAACyD,MAAM,CAACzD,CAAC,CAAC,IAAI,IAAI,CAACyD,MAAM,CAACzD,CAAC,CAAC,CAAC2C,OAAO,EAAE;QAC1C4L,aAAa,CAACxH,IAAI,CAAC,IAAI,CAACrB,UAAU,CAAC1F,CAAC,CAAC,CAAC;MAC1C,CAAC,MACI,IAAIA,CAAC,KAAK,IAAI,CAAC0F,UAAU,CAAC/F,MAAM,GAAG,CAAC,EAAE;QACvC4O,aAAa,CAACxH,IAAI,CAAC,IAAI,CAACrB,UAAU,CAAC1F,CAAC,CAAC,CAAC;MAC1C;IACJ;IACA,IAAI,CAACkG,eAAe,CAACqI,aAAa,CAAC;IACnC,IAAIC,UAAU,GAAG,IAAI,CAAC/K,MAAM,CAAC9D,MAAM,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC8D,MAAM,CAAC,IAAI,CAACA,MAAM,CAAC9D,MAAM,GAAG,CAAC,CAAC,CAACmH,KAAK,GAAG,CAAC;IAC7F,IAAIT,MAAM,GAAG,IAAI,CAACC,QAAQ,CAAC3G,MAAM,GAAG,IAAI,CAAC2G,QAAQ,GAAG5E,cAAc,CAAC,IAAI,CAACwC,YAAY,CAACqC,KAAK,CAAC;IAC3F,IAAIH,KAAK,GAAG,IAAI,CAACM,SAAS,CAAC,IAAI,CAACjC,UAAU,EAAE+J,UAAU,EAAEnI,MAAM,EAAE,IAAI,CAACnC,YAAY,CAAC;IAClF,IAAI,CAAC2C,UAAU,CAACT,KAAK,EAAEC,MAAM,CAAC;IAC9B,IAAI,CAACnC,YAAY,CAAC+E,MAAM,GAAG,IAAI,CAACmB,YAAY,GAAG,KAAK,GAAG,IAAI,CAAClG,YAAY,CAAC2J,eAAe;IACxF,IAAIC,aAAa,GAAG,IAAI,CAAC5J,YAAY,CAACwJ,QAAQ;IAC9C,IAAI,CAACxJ,YAAY,CAACwJ,QAAQ,GAAGjN,iBAAiB,CAACiN,QAAQ,CAAC,GAAG,GAAG,GAAGA,QAAQ;IACzE,IAAI,CAACe,YAAY,CAAC9M,UAAU,CAAC,IAAI,CAACuC,YAAY,CAACiF,OAAO,CAACC,EAAE,GAAG,UAAU,GAAG,IAAI,CAACtC,KAAK,CAAC,EAAEwH,QAAQ,EAAE,UAAU,CAAC;IAC3G,IAAI,CAACpK,YAAY,CAAC+E,MAAM,GAAG,KAAK;IAChC,IAAI,CAAC/E,YAAY,CAACwJ,QAAQ,GAAGI,aAAa;EAC9C,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIvK,kBAAkB,CAACrE,SAAS,CAACwP,WAAW,GAAG,UAAU5H,KAAK,EAAE4G,QAAQ,EAAE;IAClE,IAAIjJ,UAAU,GAAGjE,MAAM,CAAC,EAAE,EAAE,IAAI,CAACiE,UAAU,EAAE,IAAI,EAAE,IAAI,CAAC;IACxD,IAAIqJ,aAAa,GAAG,IAAI,CAAC5J,YAAY,CAACwJ,QAAQ;IAC9C,IAAIjJ,UAAU,CAAC9E,MAAM,GAAG,CAAC,IAAImH,KAAK,IAAI,CAAC,IAAIA,KAAK,GAAGrC,UAAU,CAAC9E,MAAM,EAAE;MAClE,IAAI,CAACgE,WAAW,GAAG,CAAC;MACpB,IAAIgL,YAAY,GAAG,EAAE;MACrB,KAAK,IAAI3O,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACyE,UAAU,CAAC9E,MAAM,EAAEK,CAAC,EAAE,EAAE;QAC7C,IAAIA,CAAC,KAAK8G,KAAK,IAAI,IAAI,CAACrD,MAAM,CAACzD,CAAC,CAAC,IAAI,IAAI,CAACyD,MAAM,CAACzD,CAAC,CAAC,CAAC2C,OAAO,EAAE;UACzDgM,YAAY,CAAC5H,IAAI,CAAC,IAAI,CAACtC,UAAU,CAACzE,CAAC,CAAC,CAAC;QACzC;MACJ;MACAyE,UAAU,CAACgD,MAAM,CAACX,KAAK,EAAE,CAAC,CAAC;MAC3B,IAAI,CAACrC,UAAU,CAACgD,MAAM,CAACX,KAAK,EAAE,CAAC,CAAC;MAChC,IAAI,CAACZ,eAAe,CAACyI,YAAY,CAAC;MAClC,IAAI,CAACzK,YAAY,CAAC+E,MAAM,GAAG,IAAI,CAACmB,YAAY,GAAG,KAAK,GAAG,IAAI,CAAClG,YAAY,CAAC2J,eAAe;MACxF,IAAI,CAAC3J,YAAY,CAACwJ,QAAQ,GAAGjN,iBAAiB,CAACiN,QAAQ,CAAC,GAAG,GAAG,GAAGA,QAAQ;MACzE,IAAI,CAACjK,MAAM,CAACgE,MAAM,CAACX,KAAK,EAAE,CAAC,CAAC;MAC5B,KAAK,IAAI9G,CAAC,GAAG8G,KAAK,EAAE9G,CAAC,GAAG,IAAI,CAACyD,MAAM,CAAC9D,MAAM,EAAEK,CAAC,EAAE,EAAE;QAC7C,IAAIoG,KAAK,GAAG,IAAI,CAAC3C,MAAM,CAACzD,CAAC,CAAC;QAC1BoG,KAAK,CAACU,KAAK,GAAG9G,CAAC;QACfoG,KAAK,CAACQ,CAAC,GAAG,IAAI,CAACnD,MAAM,CAACzD,CAAC,CAAC,CAAC4G,CAAC;MAC9B;MACA,IAAIuC,OAAO,GAAGxH,UAAU,CAAC,IAAI,CAACuC,YAAY,CAACiF,OAAO,CAACC,EAAE,GAAG,kBAAkB,GAAI,IAAI,CAAC3F,MAAM,CAAC9D,MAAO,CAAC;MAClG,IAAIwJ,OAAO,EAAE;QACTA,OAAO,CAACyF,UAAU,CAACC,WAAW,CAAC1F,OAAO,CAAC;MAC3C;MACA,IAAI,CAACsF,YAAY,CAAC9M,UAAU,CAAC,IAAI,CAACuC,YAAY,CAACiF,OAAO,CAACC,EAAE,GAAG,UAAU,GAAG,IAAI,CAACtC,KAAK,CAAC,EAAEgI,SAAS,EAAE,aAAa,EAAEhI,KAAK,CAAC;MACtH,IAAI,CAAC5C,YAAY,CAAC+E,MAAM,GAAG,KAAK;MAChC,IAAI,CAAC/E,YAAY,CAACwJ,QAAQ,GAAGI,aAAa;IAC9C;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIvK,kBAAkB,CAACrE,SAAS,CAACuP,YAAY,GAAG,UAAUvF,WAAW,EAAE6F,aAAa,EAAEC,WAAW,EAAElI,KAAK,EAAE;IAClG,IAAImI,cAAc,GAAG,IAAI,CAAC/K,YAAY,CAAEtC,gBAAgB,CAAC,IAAI,CAAC0F,IAAI,CAAC,GAAG,cAAc,CAAE,CAAClD,MAAM;IAC7F,IAAIqG,cAAc,GAAG,IAAI,CAACvG,YAAY,CAAEtC,gBAAgB,CAAC,IAAI,CAAC0F,IAAI,CAAC,GAAG,cAAc,CAAE,CAAC4H,MAAM;IAC7F,IAAIC,oBAAoB;IACxB,IAAI,IAAI,CAACjL,YAAY,CAACkL,cAAc,CAACzM,OAAO,EAAE;MAC1C,IAAIqM,WAAW,KAAK,UAAU,EAAE;QAC5B,IAAI,CAAC9K,YAAY,CAACmG,wBAAwB,CACtCgF,iBAAiB,CAACtI,IAAI,CAAC,IAAIjF,aAAa,CAAC,IAAI,CAAC2B,MAAM,CAAC,IAAI,CAACA,MAAM,CAAC9D,MAAM,GAAG,CAAC,CAAC,CAACiI,CAAC,CAAC0H,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC7L,MAAM,CAAC,IAAI,CAACA,MAAM,CAAC9D,MAAM,GAAG,CAAC,CAAC,CAACyC,KAAK,EAAE,IAAI,CAACmN,WAAW,EAAE,IAAI,CAAC9L,MAAM,CAAC,IAAI,CAACA,MAAM,CAAC9D,MAAM,GAAG,CAAC,CAAC,CAACgD,OAAO,EAAE,IAAI,CAAC2E,IAAI,EAAE,IAAI,CAAC7D,MAAM,CAAC,IAAI,CAACA,MAAM,CAAC9D,MAAM,GAAG,CAAC,CAAC,CAAC2I,cAAc,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC7E,MAAM,CAAC,IAAI,CAACA,MAAM,CAAC9D,MAAM,GAAG,CAAC,CAAC,CAACmH,KAAK,EAAE,IAAI,CAACA,KAAK,CAAC,CAAC;MAC/U,CAAC,MACI;QACD,IAAI,CAAC5C,YAAY,CAACmG,wBAAwB,CAACgF,iBAAiB,CAAC5H,MAAM,CAACX,KAAK,EAAE,CAAC,CAAC;QAC7E,KAAK,IAAI9G,CAAC,GAAG8G,KAAK,EAAE9G,CAAC,GAAG,IAAI,CAACkE,YAAY,CAACmG,wBAAwB,CAACgF,iBAAiB,CAAC1P,MAAM,EAAEK,CAAC,EAAE,EAAE;UAC9F,IAAI,CAACkE,YAAY,CAACmG,wBAAwB,CAACgF,iBAAiB,CAACrP,CAAC,CAAC,CAACwO,UAAU,GAAGxO,CAAC;QAClF;MACJ;MACA,IAAI,IAAI,CAACkE,YAAY,CAACmG,wBAAwB,CAACgF,iBAAiB,CAAC1P,MAAM,IAAI,CAAC,EAAE;QAC1EwP,oBAAoB,GAAG,IAAI,CAACjL,YAAY,CAACmG,wBAAwB,CAACmF,YAAY;QAC9E,IAAI,CAACtL,YAAY,CAACmG,wBAAwB,CAACoF,qBAAqB,CAAC,IAAI,CAACvL,YAAY,CAACwL,eAAe,EAAE,IAAI,CAACxL,YAAY,CAACyL,aAAa,EAAE,IAAI,EAAER,oBAAoB,EAAE,IAAI,CAAC;QACtK,IAAI,IAAI,CAAC7K,SAAS,IAAI,IAAI,CAACA,SAAS,CAACC,QAAQ,KAAK,SAAS,KAAK,IAAI,CAACL,YAAY,CAACkL,cAAc,CAAC7K,QAAQ,KAAK,QAAQ,IAAK,IAAI,CAACL,YAAY,CAACkL,cAAc,CAAC7K,QAAQ,KAAK,KAAM,CAAC,GAAI4K,oBAAoB,CAAC5E,MAAM,KAAK,IAAI,CAACrG,YAAY,CAACmG,wBAAwB,CAACmF,YAAY,CAACjF,MAAM,GAAK4E,oBAAoB,CAAChN,KAAK,KAAK,IAAI,CAAC+B,YAAY,CAACmG,wBAAwB,CAACmF,YAAY,CAACrN,KAAM,EAAE;UAClX,IAAIyN,WAAW,GAAI,IAAI,CAAC1L,YAAY,CAAC2L,KAAK,GAAGzO,WAAW,CAAC,IAAI,CAAC8C,YAAY,CAAC2L,KAAK,EAAE,IAAI,CAAC3L,YAAY,CAAC4L,UAAU,EAAE,IAAI,CAAC5L,YAAY,CAAC6L,UAAU,CAACC,cAAc,CAAC,CAACzF,MAAM,GAC/J,IAAI,CAACrG,YAAY,CAAC+L,eAAe,CAACtQ,MAAM,GAAG,CAAE;UACjD,IAAIuQ,cAAc,GAAI,IAAI,CAAChM,YAAY,CAACiM,QAAQ,GAC3C/O,WAAW,CAAC,IAAI,CAAC8C,YAAY,CAACiM,QAAQ,EAAE,IAAI,CAACjM,YAAY,CAACkM,aAAa,EAAE,IAAI,CAAClM,YAAY,CAAC6L,UAAU,CAACM,iBAAiB,CAAC,CAAC9F,MAAM,GAC5H,IAAI,CAACrG,YAAY,CAACoM,kBAAkB,CAAC3Q,MAAM,GAAI,CAAE;UACzD,IAAI,CAACuE,YAAY,CAACwL,eAAe,GAAG,IAAIxO,IAAI,CAAC,IAAI,CAACgD,YAAY,CAACqM,MAAM,CAACC,IAAI,EAAE,IAAI,CAACtM,YAAY,CAACqM,MAAM,CAACE,GAAG,EAAE,IAAI,CAACvM,YAAY,CAACyL,aAAa,CAACxN,KAAK,EAAE,IAAI,CAAC+B,YAAY,CAACyL,aAAa,CAACpF,MAAM,CAAC;UACxLhJ,YAAY,CAAC,IAAI,CAAC2C,YAAY,CAACwL,eAAe,EAAE,IAAIxO,IAAI,CAAC,CAAC,EAAGgP,cAAc,GACrEN,WAAW,EAAG,IAAI,CAAC1L,YAAY,CAACqM,MAAM,CAACG,KAAK,GAC9C,IAAI,CAACxM,YAAY,CAACqM,MAAM,CAACC,IAAI,EAAE,IAAI,CAACtM,YAAY,CAACqM,MAAM,CAACI,MAAM,GAAG,IAAI,CAACzM,YAAY,CAACqM,MAAM,CAACE,GAAG,CAAC,CAAC;UACnG,IAAI,CAACvM,YAAY,CAACmG,wBAAwB,CAACoF,qBAAqB,CAAC,IAAI,CAACvL,YAAY,CAACwL,eAAe,EAAE,IAAI,CAACxL,YAAY,CAACyL,aAAa,EAAE,IAAI,CAAC;QAC9I;MACJ;IACJ;IACA,IAAI,CAACzL,YAAY,CAAEtC,gBAAgB,CAAC,IAAI,CAAC0F,IAAI,CAAC,GAAG,cAAc,CAAE,CAACyG,cAAc,CAAC,IAAI,CAAC7J,YAAY,EAAE,IAAI,CAAC;IACzG,IAAI,CAACqF,YAAY,CAAC,IAAI,CAACrF,YAAY,EAAEgF,WAAW,EAAE,IAAI,CAAChF,YAAY,CAAC+E,MAAM,EAAEgG,cAAc,EAAExE,cAAc,EAAE,IAAI,CAAC;IACjH,IAAI0E,oBAAoB,KAAM,IAAI,CAACjL,YAAY,CAACkL,cAAc,CAAC7K,QAAQ,KAAK,QAAQ,IAAK,IAAI,CAACL,YAAY,CAACkL,cAAc,CAAC7K,QAAQ,KAAK,KAAM,GAAK4K,oBAAoB,CAAC5E,MAAM,KAAK,IAAI,CAACrG,YAAY,CAACmG,wBAAwB,CAACmF,YAAY,CAACjF,MAAM,GAAK4E,oBAAoB,CAAChN,KAAK,KAAK,IAAI,CAAC+B,YAAY,CAACmG,wBAAwB,CAACmF,YAAY,CAACrN,KAAM,CAAC,IAAI,IAAI,CAAC+B,YAAY,CAAC8J,WAAW,CAACnG,IAAI,EAAE;MACvX,IAAI,CAAC3D,YAAY,CAAC+J,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC;IACnD;IACA,IAAI,IAAI,CAAC/J,YAAY,CAACgK,gBAAgB,EAAE;MACpC,IAAI,CAAChK,YAAY,CAACgK,gBAAgB,CAACC,iBAAiB,CAACxM,UAAU,CAAC,IAAI,CAACuC,YAAY,CAACiF,OAAO,CAACC,EAAE,GAAG,oBAAoB,CAAC,CAAC;IACzH;IACA,IAAI,IAAI,CAAClF,YAAY,CAACuF,2BAA2B,IAAI,IAAI,CAACnF,SAAS,CAAC3B,OAAO,EAAE;MACzE,IAAI6G,cAAc,GAAG,IAAI,CAACtF,YAAY,CAACmF,QAAQ,CAACC,WAAW,CAAC;QAAEF,EAAE,EAAE,IAAI,CAAClF,YAAY,CAACiF,OAAO,CAACC,EAAE,GAAG,oBAAoB,GAAG,IAAI,CAACtC;MAAM,CAAC,CAAC;MACrI,IAAI,CAACiD,eAAe,CAAC,IAAI,CAAC7F,YAAY,EAAEsF,cAAc,EAAE,IAAI,CAACtF,YAAY,CAAC+E,MAAM,CAAC;IACrF;IACA,IAAI,IAAI,CAAC/E,YAAY,CAACkL,cAAc,CAACzM,OAAO,EAAE;MAC1C,IAAI,IAAI,CAAC2E,IAAI,KAAK,KAAK,EAAE;QACrB,IAAI,IAAI,CAAChD,SAAS,CAAC3B,OAAO,IAAI,IAAI,CAACc,MAAM,CAAC,IAAI,CAACA,MAAM,CAAC9D,MAAM,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC8D,MAAM,CAAC,IAAI,CAACA,MAAM,CAAC9D,MAAM,GAAG,CAAC,CAAC,CAAC2N,QAAQ,CAACnL,KAAK,GAAG4M,aAAa,IAAI,IAAI,CAAC7K,YAAY,CAACkL,cAAc,CAAC7K,QAAQ,KAAK,KAAK,IAAI,IAAI,CAACL,YAAY,CAACkL,cAAc,CAAC7K,QAAQ,KAAK,QAAQ,EAAE;UACtP,IAAI,CAACL,YAAY,CAAC4B,aAAa,CAAC,CAAC,CAAC,CAACkE,aAAa,CAAC,IAAI,CAAC9F,YAAY,CAAC4B,aAAa,CAAC,CAAC,CAAC,CAACmE,UAAU,EAAE,IAAI,CAACxG,MAAM,CAAC,IAAI,CAACA,MAAM,CAAC9D,MAAM,GAAG,CAAC,CAAC,CAACmD,WAAW,CAAC;UAChJ,IAAI,CAACkH,aAAa,CAAC,IAAI,CAACC,UAAU,EAAE,IAAI,CAACC,iBAAiB,CAAC;UAC3D,IAAI,CAACD,UAAU,CAACrC,CAAC,IAAI,IAAI,CAAC1D,YAAY,CAACoG,eAAe;UACtD,IAAI,CAACL,UAAU,CAACrD,CAAC,IAAI,IAAI,CAAC1C,YAAY,CAACoG,eAAe;UACtD,IAAI,CAACL,UAAU,CAACM,MAAM,IAAK,IAAI,CAACrG,YAAY,CAACoG,eAAe,GAAG,IAAI,CAACL,UAAU,CAACrD,CAAE;UACjF,IAAI,CAACqD,UAAU,CAAC9H,KAAK,IAAK,IAAI,CAAC+B,YAAY,CAACoG,eAAe,GAAG,IAAI,CAACL,UAAU,CAACrC,CAAE;QACpF;QACA,IAAI,CAAC1D,YAAY,CAACmG,wBAAwB,CAACuG,sBAAsB,CAAC,IAAI,CAAC1M,YAAY,CAAC4B,aAAa,CAAC,CAAC,CAAC,CAACmE,UAAU,EAAE,IAAI,CAAC/F,YAAY,CAACmG,wBAAwB,CAACmF,YAAY,EAAE,IAAI,CAACtL,YAAY,CAACqM,MAAM,CAAC;MACvM;MACA,IAAI,CAACrM,YAAY,CAACmG,wBAAwB,CAACwG,YAAY,CAAC,IAAI,CAAC3M,YAAY,EAAE,IAAI,CAACA,YAAY,CAACkL,cAAc,EAAE,IAAI,CAAClL,YAAY,CAACmG,wBAAwB,CAACmF,YAAY,EAAE,IAAI,CAACtL,YAAY,CAAC+E,MAAM,EAAE,IAAI,CAAC;IACzM;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACI1F,kBAAkB,CAACrE,SAAS,CAACsM,OAAO,GAAG,UAAUpF,KAAK,EAAE;IACpD,OAAOA,KAAK,CAAChE,KAAK,KAAK,IAAI,CAACqJ,kBAAkB,CAACH,IAAI;EACvD,CAAC;EACDlM,UAAU,CAAC,CACPc,QAAQ,CAAC,EAAE,CAAC,CACf,EAAEqD,kBAAkB,CAACrE,SAAS,EAAE,YAAY,EAAE,KAAK,CAAC,CAAC;EACtDE,UAAU,CAAC,CACPc,QAAQ,CAAC,CAAC,CACb,EAAEqD,kBAAkB,CAACrE,SAAS,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;EACjDE,UAAU,CAAC,CACPc,QAAQ,CAAC,EAAE,CAAC,CACf,EAAEqD,kBAAkB,CAACrE,SAAS,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;EACjDE,UAAU,CAAC,CACPc,QAAQ,CAAC,EAAE,CAAC,CACf,EAAEqD,kBAAkB,CAACrE,SAAS,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;EAChDE,UAAU,CAAC,CACPc,QAAQ,CAAC,EAAE,CAAC,CACf,EAAEqD,kBAAkB,CAACrE,SAAS,EAAE,oBAAoB,EAAE,KAAK,CAAC,CAAC;EAC9DE,UAAU,CAAC,CACPc,QAAQ,CAAC,EAAE,CAAC,CACf,EAAEqD,kBAAkB,CAACrE,SAAS,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;EACjDE,UAAU,CAAC,CACPc,QAAQ,CAAC,IAAI,CAAC,CACjB,EAAEqD,kBAAkB,CAACrE,SAAS,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;EACnDE,UAAU,CAAC,CACPgB,OAAO,CAAC;IAAEgC,KAAK,EAAE,IAAI;IAAED,KAAK,EAAE;EAAE,CAAC,EAAEvB,MAAM,CAAC,CAC7C,EAAE2C,kBAAkB,CAACrE,SAAS,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;EAClDE,UAAU,CAAC,CACPgB,OAAO,CAAC,IAAI,EAAEU,SAAS,CAAC,CAC3B,EAAEyC,kBAAkB,CAACrE,SAAS,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC;EACrDE,UAAU,CAAC,CACPc,QAAQ,CAAC,YAAY,CAAC,CACzB,EAAEqD,kBAAkB,CAACrE,SAAS,EAAE,aAAa,EAAE,KAAK,CAAC,CAAC;EACvDE,UAAU,CAAC,CACPc,QAAQ,CAAC,EAAE,CAAC,CACf,EAAEqD,kBAAkB,CAACrE,SAAS,EAAE,gBAAgB,EAAE,KAAK,CAAC,CAAC;EAC1DE,UAAU,CAAC,CACPc,QAAQ,CAAC,EAAE,CAAC,CACf,EAAEqD,kBAAkB,CAACrE,SAAS,EAAE,mBAAmB,EAAE,KAAK,CAAC,CAAC;EAC7DE,UAAU,CAAC,CACPc,QAAQ,CAAC,KAAK,CAAC,CAClB,EAAEqD,kBAAkB,CAACrE,SAAS,EAAE,cAAc,EAAE,KAAK,CAAC,CAAC;EACxDE,UAAU,CAAC,CACPc,QAAQ,CAAC,IAAI,CAAC,CACjB,EAAEqD,kBAAkB,CAACrE,SAAS,EAAE,gBAAgB,EAAE,KAAK,CAAC,CAAC;EAC1DE,UAAU,CAAC,CACPc,QAAQ,CAAC,IAAI,CAAC,CACjB,EAAEqD,kBAAkB,CAACrE,SAAS,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;EACnDE,UAAU,CAAC,CACPc,QAAQ,CAAC,OAAO,CAAC,CACpB,EAAEqD,kBAAkB,CAACrE,SAAS,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC;EACrDE,UAAU,CAAC,CACPgB,OAAO,CAAC,CAAC,CAAC,EAAE8B,6BAA6B,CAAC,CAC7C,EAAEqB,kBAAkB,CAACrE,SAAS,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC;EACrDE,UAAU,CAAC,CACPc,QAAQ,CAAC,EAAE,CAAC,CACf,EAAEqD,kBAAkB,CAACrE,SAAS,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;EACpDE,UAAU,CAAC,CACPc,QAAQ,CAAC,CAAC,CAAC,CACd,EAAEqD,kBAAkB,CAACrE,SAAS,EAAE,YAAY,EAAE,KAAK,CAAC,CAAC;EACtDE,UAAU,CAAC,CACPc,QAAQ,CAAC,IAAI,CAAC,CACjB,EAAEqD,kBAAkB,CAACrE,SAAS,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;EACpDE,UAAU,CAAC,CACPc,QAAQ,CAAC,IAAI,CAAC,CACjB,EAAEqD,kBAAkB,CAACrE,SAAS,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;EAClDE,UAAU,CAAC,CACPc,QAAQ,CAAC,GAAG,CAAC,CAChB,EAAEqD,kBAAkB,CAACrE,SAAS,EAAE,aAAa,EAAE,KAAK,CAAC,CAAC;EACvDE,UAAU,CAAC,CACPc,QAAQ,CAAC,KAAK,CAAC,CAClB,EAAEqD,kBAAkB,CAACrE,SAAS,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;EAChDE,UAAU,CAAC,CACPc,QAAQ,CAAC,IAAI,CAAC,CACjB,EAAEqD,kBAAkB,CAACrE,SAAS,EAAE,eAAe,EAAE,KAAK,CAAC,CAAC;EACzDE,UAAU,CAAC,CACPc,QAAQ,CAAC,KAAK,CAAC,CAClB,EAAEqD,kBAAkB,CAACrE,SAAS,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;EACnDE,UAAU,CAAC,CACPc,QAAQ,CAAC,KAAK,CAAC,CAClB,EAAEqD,kBAAkB,CAACrE,SAAS,EAAE,eAAe,EAAE,KAAK,CAAC,CAAC;EACzDE,UAAU,CAAC,CACPc,QAAQ,CAAC,KAAK,CAAC,CAClB,EAAEqD,kBAAkB,CAACrE,SAAS,EAAE,YAAY,EAAE,KAAK,CAAC,CAAC;EACtDE,UAAU,CAAC,CACPc,QAAQ,CAAC,IAAI,CAAC,CACjB,EAAEqD,kBAAkB,CAACrE,SAAS,EAAE,cAAc,EAAE,KAAK,CAAC,CAAC;EACxDE,UAAU,CAAC,CACPgB,OAAO,CAAC;IAAEmM,IAAI,EAAE;EAAO,CAAC,EAAExL,kBAAkB,CAAC,CAChD,EAAEwC,kBAAkB,CAACrE,SAAS,EAAE,oBAAoB,EAAE,KAAK,CAAC,CAAC;EAC9DE,UAAU,CAAC,CACPc,QAAQ,CAAC,CAAC,CAAC,CACd,EAAEqD,kBAAkB,CAACrE,SAAS,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;EACpDE,UAAU,CAAC,CACPc,QAAQ,CAAC,KAAK,CAAC,CAClB,EAAEqD,kBAAkB,CAACrE,SAAS,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;EACjDE,UAAU,CAAC,CACPc,QAAQ,CAAC,KAAK,CAAC,CAClB,EAAEqD,kBAAkB,CAACrE,SAAS,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;EAClDE,UAAU,CAAC,CACPc,QAAQ,CAAC,KAAK,CAAC,CAClB,EAAEqD,kBAAkB,CAACrE,SAAS,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC;EACrDE,UAAU,CAAC,CACPc,QAAQ,CAAC,KAAK,CAAC,CAClB,EAAEqD,kBAAkB,CAACrE,SAAS,EAAE,YAAY,EAAE,KAAK,CAAC,CAAC;EACtDE,UAAU,CAAC,CACPc,QAAQ,CAAC,QAAQ,CAAC,CACrB,EAAEqD,kBAAkB,CAACrE,SAAS,EAAE,aAAa,EAAE,KAAK,CAAC,CAAC;EACvDE,UAAU,CAAC,CACPc,QAAQ,CAAC,UAAU,CAAC,CACvB,EAAEqD,kBAAkB,CAACrE,SAAS,EAAE,YAAY,EAAE,KAAK,CAAC,CAAC;EACtDE,UAAU,CAAC,CACPc,QAAQ,CAAC,CAAC,CAAC,CACd,EAAEqD,kBAAkB,CAACrE,SAAS,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;EACnDE,UAAU,CAAC,CACPc,QAAQ,CAAC,GAAG,CAAC,CAChB,EAAEqD,kBAAkB,CAACrE,SAAS,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC;EACrDE,UAAU,CAAC,CACPgB,OAAO,CAAC,CAAC,CAAC,EAAEa,aAAa,CAAC,CAC7B,EAAEsC,kBAAkB,CAACrE,SAAS,EAAE,eAAe,EAAE,KAAK,CAAC,CAAC;EACzDE,UAAU,CAAC,CACPc,QAAQ,CAAC,CAAC,CAAC,CACd,EAAEqD,kBAAkB,CAACrE,SAAS,EAAE,cAAc,EAAE,KAAK,CAAC,CAAC;EACxD,OAAOqE,kBAAkB;AAC7B,CAAC,CAACpD,aAAa,CAAE;AACjB,SAASoD,kBAAkB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASuN,kBAAkBA,CAAChK,KAAK,EAAEhB,aAAa,EAAE;EACrD,KAAK,IAAImF,EAAE,GAAG,CAAC,EAAE8F,eAAe,GAAGjL,aAAa,EAAEmF,EAAE,GAAG8F,eAAe,CAACpR,MAAM,EAAEsL,EAAE,EAAE,EAAE;IACjF,IAAI3F,MAAM,GAAGyL,eAAe,CAAC9F,EAAE,CAAC;IAChC,IAAInE,KAAK,KAAKxB,MAAM,CAACwB,KAAK,EAAE;MACxB,OAAOxB,MAAM;IACjB;EACJ;EACA,OAAOQ,aAAa,CAAC,CAAC,CAAC;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASkL,YAAYA,CAAClK,KAAK,EAAErD,MAAM,EAAE;EACxC,KAAK,IAAIwH,EAAE,GAAG,CAAC,EAAEgG,QAAQ,GAAGxN,MAAM,EAAEwH,EAAE,GAAGgG,QAAQ,CAACtR,MAAM,EAAEsL,EAAE,EAAE,EAAE;IAC5D,IAAI7E,KAAK,GAAG6K,QAAQ,CAAChG,EAAE,CAAC;IACxB,IAAI7E,KAAK,CAACU,KAAK,KAAKA,KAAK,EAAE;MACvB,OAAOV,KAAK;IAChB;EACJ;EACA,OAAO,IAAI;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}