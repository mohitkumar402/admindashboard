{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Property, ChildProperty, Complex } from '@syncfusion/ej2-base';\nimport { isNullOrUndefined, extend } from '@syncfusion/ej2-base';\nimport { getVisiblePoints, StackValues } from '../../common/utils/helper';\nimport { firstToLowerCase } from '../../common/utils/helper';\nimport { Rect } from '@syncfusion/ej2-svg-base';\nimport { Border, Margin, Animation } from '../../common/model/base';\nimport { DataManager, DataUtil } from '@syncfusion/ej2-data';\nimport { seriesRender } from '../../common/model/constants';\nimport { setRange } from '../../common/utils/helper';\nimport { Chart3DTextFont } from '../model/chart3d-Interface';\nimport { getMinPointsDeltaValue } from '../utils/chart3dRender';\n/**\n * Configures the data label in the series.\n */\nvar Chart3DDataLabelSettings = /** @class */function (_super) {\n  __extends(Chart3DDataLabelSettings, _super);\n  function Chart3DDataLabelSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  __decorate([Property(false)], Chart3DDataLabelSettings.prototype, \"visible\", void 0);\n  __decorate([Property(null)], Chart3DDataLabelSettings.prototype, \"name\", void 0);\n  __decorate([Property('transparent')], Chart3DDataLabelSettings.prototype, \"fill\", void 0);\n  __decorate([Property(null)], Chart3DDataLabelSettings.prototype, \"format\", void 0);\n  __decorate([Property(1)], Chart3DDataLabelSettings.prototype, \"opacity\", void 0);\n  __decorate([Property(0)], Chart3DDataLabelSettings.prototype, \"angle\", void 0);\n  __decorate([Property(false)], Chart3DDataLabelSettings.prototype, \"enableRotation\", void 0);\n  __decorate([Property('Middle')], Chart3DDataLabelSettings.prototype, \"position\", void 0);\n  __decorate([Complex({\n    width: null,\n    color: null\n  }, Border)], Chart3DDataLabelSettings.prototype, \"border\", void 0);\n  __decorate([Complex({\n    left: 5,\n    right: 5,\n    top: 5,\n    bottom: 5\n  }, Margin)], Chart3DDataLabelSettings.prototype, \"margin\", void 0);\n  __decorate([Complex({\n    size: null,\n    color: null,\n    fontStyle: null,\n    fontWeight: null,\n    fontFamily: null\n  }, Chart3DTextFont)], Chart3DDataLabelSettings.prototype, \"font\", void 0);\n  __decorate([Property(null)], Chart3DDataLabelSettings.prototype, \"template\", void 0);\n  return Chart3DDataLabelSettings;\n}(ChildProperty);\nexport { Chart3DDataLabelSettings };\n/**\n * Configures the Empty Points of series\n */\nvar Chart3DEmptyPointSettings = /** @class */function (_super) {\n  __extends(Chart3DEmptyPointSettings, _super);\n  function Chart3DEmptyPointSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  __decorate([Property(null)], Chart3DEmptyPointSettings.prototype, \"fill\", void 0);\n  __decorate([Property('Gap')], Chart3DEmptyPointSettings.prototype, \"mode\", void 0);\n  return Chart3DEmptyPointSettings;\n}(ChildProperty);\nexport { Chart3DEmptyPointSettings };\n/**\n * Points model for the series.\n *\n * @public\n */\nvar Chart3DPoint = /** @class */function () {\n  function Chart3DPoint() {\n    /** Point symbol location. */\n    this.symbolLocations = null;\n    /** Point percentage value. */\n    this.percentage = null;\n    /** To know the point is selected. */\n    this.isSelect = false;\n  }\n  return Chart3DPoint;\n}();\nexport { Chart3DPoint };\n/**\n * Configures the series in charts.\n *\n * @public\n */\nvar Chart3DSeries = /** @class */function (_super) {\n  __extends(Chart3DSeries, _super);\n  function Chart3DSeries(parent, propName, defaultValue, isArray) {\n    var _this = _super.call(this, parent, propName, defaultValue, isArray) || this;\n    /** @private */\n    _this.currentViewData = [];\n    /** @private */\n    _this.clipRect = new Rect(0, 0, 0, 0);\n    _this.visibleSeriesCount = 0;\n    /** @private */\n    _this.category = 'Series';\n    /** @private */\n    _this.isRectSeries = false;\n    /** @private */\n    _this.all = false;\n    return _this;\n  }\n  /**\n   * This method is responsible for handling and processing JSON data.\n   *\n   * @returns {void}\n   * @hidden\n   */\n  Chart3DSeries.prototype.processJsonData = function () {\n    var i = 0;\n    var point = new Chart3DPoint();\n    var xName = this.xName;\n    var textMappingName = this instanceof Chart3DSeries && this.dataLabel.name ? this.dataLabel.name : '';\n    var len = (this.currentViewData || []).length;\n    this.points = [];\n    this.xMin = Infinity;\n    this.xMax = -Infinity;\n    this.yMin = Infinity;\n    this.yMax = -Infinity;\n    this.sizeMax = -Infinity;\n    if (this.xAxis.valueType === 'Category') {\n      while (i < len) {\n        point = this.dataPoint(i, textMappingName, xName);\n        this.pushCategoryData(point, i, point.x);\n        this.pushData(point, i);\n        this.setEmptyPoint(point, i);\n        i++;\n      }\n    } else if (this.xAxis.valueType.indexOf('DateTime') > -1) {\n      var option = {\n        skeleton: 'full',\n        type: 'dateTime'\n      };\n      var dateParser = this.chart.intl.getDateParser(option);\n      var dateFormatter = this.chart.intl.getDateFormat(option);\n      while (i < len) {\n        point = this.dataPoint(i, textMappingName, xName);\n        if (!isNullOrUndefined(point.x) && point.x !== '') {\n          point.x = new Date(DataUtil.parse.parseJson({\n            val: point.x\n          }).val);\n          if (this.xAxis.valueType === 'DateTime') {\n            point.xValue = Date.parse(point.x.toString());\n          } else {\n            this.pushCategoryData(point, i, Date.parse(dateParser(dateFormatter(point.x))).toString());\n          }\n          this.pushData(point, i);\n          this.setEmptyPoint(point, i);\n        } else {\n          point.visible = false;\n        }\n        i++;\n      }\n    } else {\n      while (i < len) {\n        point = this.dataPoint(i, textMappingName, xName);\n        point.xValue = point.x;\n        this.pushData(point, i);\n        this.setEmptyPoint(point, i);\n        i++;\n      }\n    }\n  };\n  /**\n   * Pushes data into a collection at a specified index.\n   *\n   * @param {Chart3DPoint} point - The Chart3DPoint object representing the data to be pushed.\n   * @param {number} i - The index at which the data should be pushed.\n   * @returns {void}\n   */\n  Chart3DSeries.prototype.pushData = function (point, i) {\n    point.index = i;\n    point.yValue = point.y;\n    point.series = this;\n    // To find the min, max for the axis range.\n    this.xMin = Math.min(this.xMin, point.xValue);\n    this.xMax = Math.max(this.xMax, point.xValue);\n    this.xData.push(point.xValue);\n  };\n  /**\n   * Creates and returns a Chart3DPoint object representing a data point at the specified index.\n   *\n   * @param {number} i - The index of the data point.\n   * @param {string} textMappingName - The name of the property containing text information for the data point.\n   * @param {string} xName - The name of the property containing X-axis information for the data point.\n   * @returns {Chart3DPoint} - The Chart3DPoint object representing the data point.\n   */\n  Chart3DSeries.prototype.dataPoint = function (i, textMappingName, xName) {\n    this.points[i] = new Chart3DPoint();\n    var point = this.points[i];\n    var currentViewData = this.currentViewData[i];\n    var getObjectValueByMappingString = this.get3DObjectValue;\n    point.x = getObjectValueByMappingString(xName, currentViewData);\n    point.interior = getObjectValueByMappingString(this.pointColorMapping, currentViewData);\n    if (this instanceof Chart3DSeries) {\n      point.y = getObjectValueByMappingString(this.yName, currentViewData);\n      point.size = getObjectValueByMappingString(this.size, currentViewData);\n      point.text = getObjectValueByMappingString(textMappingName, currentViewData);\n      point.tooltip = getObjectValueByMappingString(this.tooltipMappingName, currentViewData);\n    }\n    return point;\n  };\n  /**\n   * Retrieves the value associated with a specified mapping name from a given data object.\n   *\n   * @param {string} mappingName - The mapping name used to retrieve the value from the data object.\n   * @param {Object} data - The data object from which the value is retrieved.\n   * @returns {Object} - The value associated with the specified mapping name in the data object.\n   */\n  Chart3DSeries.prototype.get3DObjectValue = function (mappingName, data) {\n    return data[mappingName];\n  };\n  /**\n   * Sets values for an empty data point at the specified index.\n   *\n   * @param {Chart3DPoint} point - The Chart3DPoint object representing the empty data point.\n   * @param {number} i - The index of the empty data point.\n   * @returns {void}\n   */\n  Chart3DSeries.prototype.setEmptyPoint = function (point, i) {\n    if (!this.findVisibility(point)) {\n      point.visible = true;\n      return null;\n    }\n    point.isEmpty = true;\n    var series = this instanceof Chart3DSeries && this;\n    var mode = series.emptyPointSettings.mode;\n    switch (mode) {\n      case 'Zero':\n        point.visible = true;\n        point.y = point.yValue = this.yData[i] = 0;\n        break;\n      case 'Average':\n        if (this instanceof Chart3DSeries) {\n          point.y = point.yValue = this.yData[i] = this.getAverage(this.yName, i);\n        }\n        point.visible = true;\n        break;\n      case 'Drop':\n      case 'Gap':\n        this.yData[i] = null;\n        point.visible = false;\n        break;\n    }\n  };\n  /**\n   * Determines the visibility status of a Chart3DPoint.\n   *\n   * @param {Chart3DPoint} point - The Chart3DPoint object for which visibility is determined.\n   * @returns {boolean} - A boolean indicating the visibility status of the Chart3DPoint.\n   */\n  Chart3DSeries.prototype.findVisibility = function (point) {\n    this.setXYMinMax(point.yValue);\n    this.yData.push(point.yValue);\n    return isNullOrUndefined(point.x) || isNullOrUndefined(point.y) || isNaN(+point.y);\n  };\n  /**\n   * Sets the minimum and maximum values for the X and Y dimensions based on the provided Y value.\n   *\n   * @param {number} yValue - The Y value used to set the minimum and maximum values for the X and Y dimensions.\n   * @returns {void}\n   */\n  Chart3DSeries.prototype.setXYMinMax = function (yValue) {\n    var isLogAxis = this.yAxis.valueType === 'Logarithmic' || this.xAxis.valueType === 'Logarithmic';\n    var isNegativeValue = yValue < 0 || this.yAxis.rangePadding === 'None';\n    var seriesMinY;\n    if (!setRange(this.yAxis)) {\n      seriesMinY = isLogAxis ? yValue : isNegativeValue ? yValue : 0;\n    } else {\n      seriesMinY = yValue;\n    }\n    this.yMin = isLogAxis ? Math.min(this.yMin, isNullOrUndefined(seriesMinY) || isNaN(seriesMinY) || seriesMinY === 0 || seriesMinY.toString() === '0' || seriesMinY.toString() === '' ? this.yMin : seriesMinY) : Math.min(this.yMin, isNullOrUndefined(seriesMinY) || isNaN(seriesMinY) ? this.yMin : seriesMinY);\n    this.yMax = Math.max(this.yMax, isNullOrUndefined(yValue) || isNaN(yValue) ? this.yMax : yValue);\n  };\n  /**\n   * Pushes category data to the Chart3DPoint object at the specified index.\n   *\n   * @param {Chart3DPoint} point - The Chart3DPoint object to which category data is pushed.\n   * @param {number} index - The index at which the category data is pushed.\n   * @param {string} pointX - The X value of the category data to be pushed.\n   * @returns {void}\n   */\n  Chart3DSeries.prototype.pushCategoryData = function (point, index, pointX) {\n    if (this.chart.tooltip) {\n      if (!this.visible) {\n        return null;\n      }\n    }\n    if (!this.xAxis.isIndexed) {\n      if (this.xAxis.indexLabels[pointX] === undefined) {\n        this.xAxis.indexLabels[pointX] = this.xAxis.labels.length;\n        this.xAxis.labels.push(pointX);\n      }\n      point.xValue = this.xAxis.indexLabels[pointX];\n    } else {\n      if (this.xAxis.labels[index]) {\n        this.xAxis.labels[index] += ', ' + pointX;\n      } else {\n        this.xAxis.labels.push(pointX);\n      }\n      // this.xAxis.labels[index as number] ? this.xAxis.labels[index as number] += ', ' + pointX :\n      //     this.xAxis.labels.push(pointX);\n      point.xValue = index;\n    }\n  };\n  /**\n   * Calculates the average value of a specified member in the data object.\n   *\n   * @param {string} member - The member for which the average is calculated.\n   * @param {number} i - The index used for the calculation.\n   * @param {Object} data - The data object from which the average is calculated. Defaults to the current view data.\n   * @returns {number} - The calculated average value.\n   */\n  Chart3DSeries.prototype.getAverage = function (member, i, data) {\n    if (data === void 0) {\n      data = this.currentViewData;\n    }\n    var previous = data[i - 1] ? data[i - 1][member] || 0 : 0;\n    var next = data[i + 1] ? data[i + 1][member] || 0 : 0;\n    return (previous + next) / 2;\n  };\n  /**\n   * Refreshes the data manager for the 3D chart.\n   *\n   * @param {Chart3D} chart - The 3D chart for which the data manager is refreshed.\n   * @returns {void}\n   */\n  Chart3DSeries.prototype.refreshDataManager = function (chart) {\n    var _this = this;\n    this.chart = chart;\n    var dataSource;\n    var isAngular = 'isAngular';\n    if (chart[isAngular]) {\n      dataSource = Object.keys(this.dataSource).length ? this.dataSource : chart.dataSource;\n    } else {\n      dataSource = this.dataSource || chart.dataSource;\n    }\n    if (!(dataSource instanceof DataManager) && isNullOrUndefined(this.query)) {\n      this.dataManagerSuccess({\n        result: dataSource,\n        count: dataSource.length\n      }, false);\n      return;\n    }\n    var dataManager = this.dataModule.getData(this.dataModule.generateQuery().requiresCount());\n    dataManager.then(function (e) {\n      return _this.dataManagerSuccess(e);\n    });\n  };\n  /**\n   * Handles the success callback for the data manager operation.\n   *\n   * @param {Object} e - The success callback parameters containing the result and count.\n   * @param {Object} e.result - The result object returned by the data manager operation.\n   * @param {number} e.count - The count of items returned by the data manager operation.\n   * @param {boolean} [isRemoteData=true] - Indicates whether the data is fetched remotely. Defaults to true.\n   * @returns {void}\n   */\n  Chart3DSeries.prototype.dataManagerSuccess = function (e, isRemoteData) {\n    if (isRemoteData === void 0) {\n      isRemoteData = true;\n    }\n    this.currentViewData = e.count ? e.result : [];\n    this.chart.allowServerDataBinding = false;\n    if (this instanceof Chart3DSeries) {\n      var argsData = {\n        series: this,\n        data: this.currentViewData,\n        fill: this.interior\n      };\n      this.chart.trigger(seriesRender, argsData);\n      this.interior = argsData.fill;\n      this.currentViewData = argsData.data;\n    }\n    this.processJsonData();\n    this.refreshChart(isRemoteData);\n    this.currentViewData = null;\n  };\n  /**\n   * Refreshes the chart, updating its data and appearance.\n   *\n   * @param {boolean} isRemoteData - Indicates whether the data is fetched remotely.\n   * @returns {void}\n   */\n  Chart3DSeries.prototype.refreshChart = function (isRemoteData) {\n    var chart = this.chart;\n    if (this instanceof Chart3DSeries) {\n      chart.visibleSeriesCount += isRemoteData ? 1 : 0;\n    }\n    if (chart.visibleSeries.length === chart.visibleSeriesCount) {\n      chart.refreshBound();\n      chart.trigger('loaded', {\n        chart: chart\n      });\n    }\n    if (this instanceof Chart3DSeries) {\n      chart.visibleSeriesCount += isRemoteData ? 0 : 1;\n    }\n  };\n  /**\n   * Refreshes the axis labels in the chart.\n   * This method is responsible for updating and rendering the axis labels based on the chart's current state.\n   *\n   * @returns {void}\n   * @public\n   */\n  Chart3DSeries.prototype.refreshAxisLabel = function () {\n    if (this.xAxis.valueType !== 'Category') {\n      return null;\n    }\n    this.xAxis.labels = [];\n    this.xAxis.indexLabels = {};\n    for (var _i = 0, _a = this.xAxis.series; _i < _a.length; _i++) {\n      var item = _a[_i];\n      if (item.visible) {\n        item.xMin = Infinity;\n        item.xMax = -Infinity;\n        for (var _b = 0, _c = item.points; _b < _c.length; _b++) {\n          var point = _c[_b];\n          item.pushCategoryData(point, point.index, point.x);\n          item.xMin = Math.min(item.xMin, point.xValue);\n          item.xMax = Math.max(item.xMax, point.xValue);\n        }\n      }\n    }\n  };\n  /**\n   * Finds the collection of Chart3DSeries associated with the given Chart3DColumn and Chart3DRow in the 3D chart.\n   *\n   * @param {Chart3DColumn} column - The Chart3DColumn object representing the column in the 3D chart.\n   * @param {Chart3DRow} row - The Chart3DRow object representing the row in the 3D chart.\n   * @param {boolean} isStack - Indicates whether the series should be stacked.\n   * @returns {Chart3DSeries[]} - An array of Chart3DSeries associated with the specified column and row.\n   * @public\n   */\n  Chart3DSeries.prototype.findSeriesCollection = function (column, row, isStack) {\n    var seriesCollection = [];\n    for (var _i = 0, _a = row.axes; _i < _a.length; _i++) {\n      var rowAxis = _a[_i];\n      for (var _b = 0, _c = rowAxis.series; _b < _c.length; _b++) {\n        var rowSeries = _c[_b];\n        for (var _d = 0, _e = column.axes; _d < _e.length; _d++) {\n          var axis = _e[_d];\n          for (var _f = 0, _g = axis.series; _f < _g.length; _f++) {\n            var series = _g[_f];\n            if (series === rowSeries && series.visible && this.rectSeriesInChart(series, isStack)) {\n              seriesCollection.push(series);\n            }\n          }\n        }\n      }\n    }\n    return seriesCollection;\n  };\n  /**\n   * Checks whether the given Chart3DSeries with rectangular data is present in the 3D chart.\n   *\n   * @param {Chart3DSeries} series - The Chart3DSeries object to check for presence in the chart.\n   * @param {boolean} isStack - Indicates whether the series should be stacked.\n   * @returns {boolean} - A boolean value indicating whether the series is present in the 3D chart.\n   * @private\n   */\n  Chart3DSeries.prototype.rectSeriesInChart = function (series, isStack) {\n    var type = series.type.toLowerCase();\n    return type.indexOf('column') !== -1 || type.indexOf('bar') !== -1 || isStack;\n  };\n  /**\n   * Calculates the stacked values for the Chart3DSeries based on stacking type and chart context.\n   *\n   * @param {boolean} isStacking100 - Indicates whether the stacking type is 100% stacking.\n   * @param {Chart3D} chart - The parent Chart3D object providing context for the calculation.\n   * @returns {void}\n   * @private\n   */\n  Chart3DSeries.prototype.calculateStackedValue = function (isStacking100, chart) {\n    for (var _i = 0, _a = chart.columns; _i < _a.length; _i++) {\n      var columnItem = _a[_i];\n      for (var _b = 0, _c = chart.rows; _b < _c.length; _b++) {\n        var item = _c[_b];\n        this.calculateStackingValues(this.findSeriesCollection(columnItem, item, true), isStacking100);\n      }\n    }\n  };\n  /**\n   * Calculates stacking values for the given Chart3DSeries collection based on the stacking type.\n   *\n   * @param {Chart3DSeries[]} seriesCollection - The collection of Chart3DSeries to calculate stacking values for.\n   * @param {boolean} isStacking100 - Indicates whether the stacking type is 100% stacking.\n   * @returns {void}\n   * @private\n   */\n  Chart3DSeries.prototype.calculateStackingValues = function (seriesCollection, isStacking100) {\n    var startValues;\n    var endValues;\n    var yValues = [];\n    var lastPositive = [];\n    var lastNegative = [];\n    var stackingGroup;\n    var lastValue;\n    var value;\n    var frequencies = [];\n    if (isStacking100) {\n      frequencies = this.findFrequencies(seriesCollection);\n    }\n    var groupingValues = [];\n    var visiblePoints = [];\n    for (var i = 0; i < seriesCollection.length; i++) {\n      var series = seriesCollection[i];\n      if (!groupingValues[series.stackingGroup]) {\n        groupingValues[series.stackingGroup] = [];\n        groupingValues[series.stackingGroup].push(series);\n      } else if (groupingValues[series.stackingGroup] !== undefined) {\n        groupingValues[series.stackingGroup].push(series);\n      }\n    }\n    var keys = Object.keys(groupingValues);\n    for (var k = 0; k < keys.length; k++) {\n      var stackingSeies = [];\n      var stackedValues = [];\n      var seriesCollection_2 = groupingValues[keys[k]];\n      for (var _i = 0, seriesCollection_1 = seriesCollection_2; _i < seriesCollection_1.length; _i++) {\n        var series = seriesCollection_1[_i];\n        if (series.type.indexOf('Stacking') !== -1) {\n          stackingGroup = series.stackingGroup;\n          if (!lastPositive[stackingGroup]) {\n            lastPositive[stackingGroup] = [];\n            lastNegative[stackingGroup] = [];\n          }\n          yValues = series.yData;\n          startValues = [];\n          endValues = [];\n          stackingSeies.push(series);\n          visiblePoints = getVisiblePoints(series);\n          for (var j = 0, pointsLength = visiblePoints.length; j < pointsLength; j++) {\n            lastValue = 0;\n            value = +yValues[j]; // Fix for chart not rendering while y value is given as string issue\n            if (lastPositive[stackingGroup][visiblePoints[j].xValue] === undefined) {\n              lastPositive[stackingGroup][visiblePoints[j].xValue] = 0;\n            }\n            if (lastNegative[stackingGroup][visiblePoints[j].xValue] === undefined) {\n              lastNegative[stackingGroup][visiblePoints[j].xValue] = 0;\n            }\n            if (isStacking100) {\n              value = value / frequencies[stackingGroup][visiblePoints[j].xValue] * 100;\n              value = !isNaN(value) ? value : 0;\n              visiblePoints[j].percentage = +value.toFixed(2);\n            } else {\n              stackedValues[j] = stackedValues[j] ? stackedValues[j] + Math.abs(value) : Math.abs(value);\n            }\n            if (value >= 0) {\n              lastValue = lastPositive[stackingGroup][visiblePoints[j].xValue];\n              lastPositive[stackingGroup][visiblePoints[j].xValue] += value;\n            } else {\n              lastValue = lastNegative[stackingGroup][visiblePoints[j].xValue];\n              lastNegative[stackingGroup][visiblePoints[j].xValue] += value;\n            }\n            startValues.push(lastValue);\n            endValues.push(value + lastValue);\n            if (isStacking100 && endValues[j] > 100) {\n              endValues[j] = 100;\n            }\n          }\n          series.stackedValues = new StackValues(startValues, endValues);\n          var isLogAxis = series.yAxis.valueType === 'Logarithmic';\n          var isColumnBarType = series.type.indexOf('Column') !== -1 || series.type.indexOf('Bar') !== -1;\n          series.yMin = isLogAxis && isColumnBarType && series.yMin < 1 ? series.yMin : series.yAxis.startFromZero && series.type.indexOf('100') > -1 && series.yAxis.rangePadding === 'Auto' && series.yMin >= 0 ? 0 : parseFloat(Math.min.apply(0, isStacking100 ? startValues : endValues).toFixed(10));\n          series.yMax = Math.max.apply(0, endValues);\n          if (series.yMin > Math.min.apply(0, endValues)) {\n            series.yMin = isStacking100 ? -100 : isLogAxis && isColumnBarType && series.yMin < 1 ? series.yMin : Math.min.apply(0, endValues);\n          }\n          if (series.yMax < Math.max.apply(0, startValues)) {\n            series.yMax = 0;\n          }\n        }\n      }\n      this.findPercentageOfStacking(stackingSeies, stackedValues, isStacking100);\n    }\n  };\n  /**\n   * Finds the percentage of stacking for the given Chart3DSeries collection and values.\n   *\n   * @param {Chart3DSeries[]} stackingSeries - The collection of Chart3DSeries to find the percentage of stacking for.\n   * @param {number[]} values - The values to calculate the percentage of stacking.\n   * @param {boolean} isStacking100 - Indicates whether the stacking type is 100% stacking.\n   * @returns {void}\n   */\n  Chart3DSeries.prototype.findPercentageOfStacking = function (stackingSeries, values, isStacking100) {\n    for (var _i = 0, stackingSeries_1 = stackingSeries; _i < stackingSeries_1.length; _i++) {\n      var item = stackingSeries_1[_i];\n      if (isStacking100) {\n        return null;\n      }\n      for (var _a = 0, _b = getVisiblePoints(item); _a < _b.length; _a++) {\n        var point = _b[_a];\n        point.percentage = Math.abs(+(point.y / values[point.index] * 100).toFixed(2));\n      }\n    }\n  };\n  /**\n   * Finds the frequencies for the given Chart3DSeries collection.\n   *\n   * @param {Chart3DSeries[]} seriesCollection - The collection of Chart3DSeries to find frequencies for.\n   * @returns {number[]} An array of frequencies for each series in the collection.\n   * @private\n   */\n  Chart3DSeries.prototype.findFrequencies = function (seriesCollection) {\n    var frequencies = [];\n    var stackingGroup;\n    var visiblePoints = [];\n    for (var _i = 0, seriesCollection_3 = seriesCollection; _i < seriesCollection_3.length; _i++) {\n      var series = seriesCollection_3[_i];\n      series.yAxis.isStack100 = series.type.indexOf('100') !== -1 ? true : false;\n      visiblePoints = this.getVisiblePoints();\n      if (series.type.indexOf('Stacking') !== -1) {\n        stackingGroup = series.stackingGroup;\n        if (!frequencies[stackingGroup]) {\n          frequencies[stackingGroup] = [];\n        }\n        for (var j = 0, pointsLength = visiblePoints.length; j < pointsLength; j++) {\n          if (frequencies[stackingGroup][visiblePoints[j].xValue] === undefined) {\n            frequencies[stackingGroup][visiblePoints[j].xValue] = 0;\n          }\n          if (series.yData[j] > 0) {\n            frequencies[stackingGroup][visiblePoints[j].xValue] += series.yData[j];\n          } else {\n            frequencies[stackingGroup][visiblePoints[j].xValue] -= series.yData[j];\n          }\n        }\n      }\n    }\n    return frequencies;\n  };\n  /**\n   * Renders the Chart3DSeries on the given 3D chart.\n   *\n   * @param {Chart3D} chart - The 3D chart on which to render the series.\n   * @returns {void}\n   * @private\n   */\n  Chart3DSeries.prototype.renderSeries = function (chart) {\n    var seriesType = firstToLowerCase(this.type);\n    seriesType = seriesType.replace('100', '');\n    if (chart[seriesType + 'Series3DModule']) {\n      this.visiblePoints = this.getVisiblePoints();\n      chart[seriesType + 'Series3DModule'].draw(this, chart);\n      if (this.dataLabel.visible && this.visible) {\n        chart.dataLabel3DModule.render(this, this.chart, this.dataLabel);\n      }\n    }\n  };\n  /**\n   * Retrieves the visible data points for the Chart3DSeries.\n   * The visibility of points may be influenced by factors such as data filtering or chart settings.\n   *\n   * @returns {Chart3DPoint[]} An array of Chart3DPoint objects representing the visible data points.\n   * @private\n   */\n  Chart3DSeries.prototype.getVisiblePoints = function () {\n    var points = extend([], this.points, null, true);\n    var tempPoints = [];\n    var tempPoint;\n    var pointIndex = 0;\n    for (var i = 0; i < points.length; i++) {\n      tempPoint = points[i];\n      if (isNullOrUndefined(tempPoint.x)) {\n        continue;\n      } else {\n        tempPoint.index = pointIndex++;\n        tempPoints.push(tempPoint);\n      }\n    }\n    return tempPoints;\n  };\n  /**\n   * Sets the color for a specific Chart3DPoint in the series.\n   * This method allows you to customize the color of an individual data point.\n   *\n   * @param {Chart3DPoint} point - The Chart3DPoint for which to set the color.\n   * @param {string} color - The color value to be applied to the data point.\n   * @returns {string} The updated color value after applying any modifications or validations.\n   * @private\n   */\n  Chart3DSeries.prototype.setPointColor = function (point, color) {\n    color = point.interior || color;\n    return point.isEmpty ? this.emptyPointSettings.fill || color : color;\n  };\n  /**\n   * Gets the Y values from an array of Chart3DPoint objects.\n   *\n   * @param {Chart3DPoint[]} points - An array of Chart3DPoint objects.\n   * @returns {number[]} An array containing the Y values extracted from the provided data points.\n   * @private\n   */\n  Chart3DSeries.prototype.getYValues = function (points) {\n    var values = [];\n    var length = points.length;\n    for (var i = 0; i < length; i++) {\n      values.push(points[i].yValue);\n    }\n    return values;\n  };\n  /**\n   * Gets the X values from an array of Chart3DPoint objects.\n   * This method extracts the X values from a collection of data points.\n   *\n   * @param {Chart3DPoint[]} points - An array of Chart3DPoint objects.\n   * @returns {number[]} An array containing the X values extracted from the provided data points.\n   * @private\n   */\n  Chart3DSeries.prototype.getXValues = function (points) {\n    var values = [];\n    var length = points.length;\n    for (var i = 0; i < length; i++) {\n      values.push(points[i].xValue);\n    }\n    return values;\n  };\n  /**\n   * Gets the segment depth information for a Chart3DSeries.\n   * This method retrieves the depth information for the segments of a Chart3DSeries.\n   *\n   * @param {Chart3DSeries} series - The Chart3DSeries for which segment depth is obtained.\n   * @returns {Chart3DDepthInfoType} The depth information for the segments of the specified series.\n   * @private\n   */\n  Chart3DSeries.prototype.getSegmentDepth = function (series) {\n    var actualDepth = this.chart.depth;\n    var start;\n    var end;\n    if (this.chart.enableSideBySidePlacement) {\n      var space = actualDepth / 4;\n      start = space;\n      end = space * (series.columnFacet === 'Rectangle' ? 2.5 : 3);\n    } else {\n      var index = series.position - 1;\n      var count = series.rectCount;\n      var space = actualDepth / (count * 2 + count + 1);\n      start = space + space * index * 3;\n      end = start + space * (series.columnFacet === 'Rectangle' ? 1.5 : 2);\n    }\n    return {\n      start: start,\n      end: end,\n      delta: end - start\n    };\n  };\n  /**\n   * Calculates the side-by-side positions for segments in a Chart3DSeries.\n   * This method determines the positions of segments when they are arranged side-by-side.\n   *\n   * @param {Chart3DSeries} series - The Chart3DSeries for which side-by-side positions are calculated.\n   * @returns {void}\n   * @private\n   */\n  Chart3DSeries.prototype.getSideBySidePositions = function (series) {\n    var chart = series.chart;\n    for (var _i = 0, _a = chart.columns; _i < _a.length; _i++) {\n      var columnItem = _a[_i];\n      for (var _b = 0, _c = chart.rows; _b < _c.length; _b++) {\n        var item = _c[_b];\n        this.findRectPosition(series.findSeriesCollection(columnItem, item, false));\n      }\n    }\n  };\n  /**\n   * Finds the position of rectangles for a collection of Chart3DSeries.\n   * This method determines the position of rectangles based on the given series collection.\n   *\n   * @param {Chart3DSeries[]} seriesCollection - The collection of Chart3DSeries for which rectangle positions are determined.\n   * @returns {void}\n   * @private\n   */\n  Chart3DSeries.prototype.findRectPosition = function (seriesCollection) {\n    var groupingValues = [];\n    var vSeries = {\n      rectCount: 0,\n      position: null\n    };\n    for (var i = 0; i < seriesCollection.length; i++) {\n      var value = seriesCollection[i];\n      if (value.type.indexOf('Stacking') !== -1 || value.groupName !== '') {\n        var groupName = value.type.indexOf('Stacking') !== -1 ? value.stackingGroup : value.type + value.groupName;\n        if (groupName) {\n          if (groupingValues[groupName] === undefined) {\n            value.position = vSeries.rectCount;\n            groupingValues[groupName] = vSeries.rectCount++;\n          } else {\n            value.position = groupingValues[groupName];\n          }\n        } else {\n          if (vSeries.position === null) {\n            vSeries.rectCount++;\n            value.position = vSeries.rectCount;\n            vSeries.position = vSeries.rectCount;\n          } else {\n            value.position = vSeries.position;\n          }\n        }\n      } else {\n        vSeries.rectCount++;\n        value.position = vSeries.rectCount;\n      }\n    }\n    for (var i = 0; i < seriesCollection.length; i++) {\n      var value = seriesCollection[i];\n      value.rectCount = vSeries.rectCount;\n    }\n  };\n  /**\n   * Gets a range of values between the specified start and end points.\n   * This method returns a Chart3DRangeValues object representing the range of values between the given start and end points.\n   *\n   * @param {number} start - The starting point of the range.\n   * @param {number} end - The ending point of the range.\n   * @returns {Chart3DRangeValues} - An object representing the range of values between the start and end points.\n   */\n  Chart3DSeries.prototype.getDoubleRange = function (start, end) {\n    var mstart;\n    var mend;\n    if (start > end) {\n      mstart = end;\n      mend = start;\n    } else {\n      mstart = start;\n      mend = end;\n    }\n    var mdelta = mend - mstart;\n    var mmedian = (mstart + mend) / 2;\n    var misEmpty = isNaN(mstart) || isNaN(mend);\n    return {\n      start: mstart,\n      end: mend,\n      delta: mdelta,\n      median: mmedian,\n      isEmpty: misEmpty\n    };\n  };\n  /**\n   * Sets the style options for the specified Chart3DSeries.\n   * This method applies the style options to customize the appearance of the specified series.\n   *\n   * @param {Chart3DSeries} series - The Chart3DSeries for which the style options should be set.\n   * @returns {Chart3DStyleOptions} - An object representing the style options applied to the series.\n   */\n  Chart3DSeries.prototype.setStyle = function (series) {\n    var options = {\n      interior: series.interior,\n      opacity: series.opacity,\n      dashArray: ''\n    };\n    return options;\n  };\n  /**\n   * Gets the side-by-side positioning information for the specified Chart3DSeries.\n   * This method calculates and returns the range values that define the position of the series in a side-by-side arrangement.\n   *\n   * @param {Chart3DSeries} series - The Chart3DSeries for which side-by-side positioning information is needed.\n   * @returns {Chart3DRangeValues} - An object representing the range values that define the position of the series in a side-by-side arrangement.\n   */\n  Chart3DSeries.prototype.getSideBySideInfo = function (series) {\n    this.chart.currentSeries = series;\n    var minimumPointDelta = getMinPointsDeltaValue(series.xAxis, this.chart.visibleSeries);\n    var spacing = series.columnSpacing;\n    var columnWidth = series.columnWidth === null || isNaN(+series.columnWidth) ? 0.7 : Math.min(series.columnWidth, 1);\n    this.getSideBySidePositions(series);\n    var pos = series.position;\n    var all = series.rectCount;\n    var width = minimumPointDelta * columnWidth;\n    var loc = (pos - (series.stackingGroup === '' ? 1 : 0)) / all - 0.5;\n    var range = this.getDoubleRange(loc, loc + 1 / all);\n    if (!this.chart.enableSideBySidePlacement) {\n      return this.getDoubleRange(-width / 2, width / 2);\n    }\n    if (!range.isEmpty) {\n      range = this.getDoubleRange(range.start * width, range.end * width);\n      var radius = spacing * range.delta;\n      range = this.getDoubleRange(range.start + radius / 2, range.end - radius / 2);\n    }\n    return range;\n  };\n  __decorate([Property('')], Chart3DSeries.prototype, \"xName\", void 0);\n  __decorate([Property('')], Chart3DSeries.prototype, \"pointColorMapping\", void 0);\n  __decorate([Property(true)], Chart3DSeries.prototype, \"visible\", void 0);\n  __decorate([Property(null)], Chart3DSeries.prototype, \"xAxisName\", void 0);\n  __decorate([Property(null)], Chart3DSeries.prototype, \"yAxisName\", void 0);\n  __decorate([Complex({\n    duration: 2000\n  }, Animation)], Chart3DSeries.prototype, \"animation\", void 0);\n  __decorate([Property(null)], Chart3DSeries.prototype, \"fill\", void 0);\n  __decorate([Property('')], Chart3DSeries.prototype, \"dataSource\", void 0);\n  __decorate([Property()], Chart3DSeries.prototype, \"query\", void 0);\n  __decorate([Complex({}, Chart3DDataLabelSettings)], Chart3DSeries.prototype, \"dataLabel\", void 0);\n  __decorate([Property('')], Chart3DSeries.prototype, \"name\", void 0);\n  __decorate([Property('')], Chart3DSeries.prototype, \"yName\", void 0);\n  __decorate([Property('')], Chart3DSeries.prototype, \"size\", void 0);\n  __decorate([Property('')], Chart3DSeries.prototype, \"stackingGroup\", void 0);\n  __decorate([Property(1)], Chart3DSeries.prototype, \"opacity\", void 0);\n  __decorate([Property('')], Chart3DSeries.prototype, \"groupName\", void 0);\n  __decorate([Property('Column')], Chart3DSeries.prototype, \"type\", void 0);\n  __decorate([Property(true)], Chart3DSeries.prototype, \"enableTooltip\", void 0);\n  __decorate([Property('')], Chart3DSeries.prototype, \"tooltipFormat\", void 0);\n  __decorate([Property('')], Chart3DSeries.prototype, \"tooltipMappingName\", void 0);\n  __decorate([Property('SeriesType')], Chart3DSeries.prototype, \"legendShape\", void 0);\n  __decorate([Property('')], Chart3DSeries.prototype, \"legendImageUrl\", void 0);\n  __decorate([Complex(null, Chart3DEmptyPointSettings)], Chart3DSeries.prototype, \"emptyPointSettings\", void 0);\n  __decorate([Property(null)], Chart3DSeries.prototype, \"columnWidth\", void 0);\n  __decorate([Property('Rectangle')], Chart3DSeries.prototype, \"columnFacet\", void 0);\n  __decorate([Property(0.1)], Chart3DSeries.prototype, \"columnSpacing\", void 0);\n  return Chart3DSeries;\n}(ChildProperty);\nexport { Chart3DSeries };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","Property","ChildProperty","Complex","isNullOrUndefined","extend","getVisiblePoints","StackValues","firstToLowerCase","Rect","Border","Margin","Animation","DataManager","DataUtil","seriesRender","setRange","Chart3DTextFont","getMinPointsDeltaValue","Chart3DDataLabelSettings","_super","apply","width","color","left","right","top","bottom","size","fontStyle","fontWeight","fontFamily","Chart3DEmptyPointSettings","Chart3DPoint","symbolLocations","percentage","isSelect","Chart3DSeries","parent","propName","defaultValue","isArray","_this","call","currentViewData","clipRect","visibleSeriesCount","category","isRectSeries","all","processJsonData","point","xName","textMappingName","dataLabel","name","len","points","xMin","Infinity","xMax","yMin","yMax","sizeMax","xAxis","valueType","dataPoint","pushCategoryData","x","pushData","setEmptyPoint","indexOf","option","skeleton","type","dateParser","chart","intl","getDateParser","dateFormatter","getDateFormat","Date","parse","parseJson","val","xValue","toString","visible","index","yValue","y","series","Math","min","max","xData","push","getObjectValueByMappingString","get3DObjectValue","interior","pointColorMapping","yName","text","tooltip","tooltipMappingName","mappingName","data","findVisibility","isEmpty","mode","emptyPointSettings","yData","getAverage","setXYMinMax","isNaN","isLogAxis","yAxis","isNegativeValue","rangePadding","seriesMinY","pointX","isIndexed","indexLabels","undefined","labels","member","previous","next","refreshDataManager","dataSource","isAngular","keys","query","dataManagerSuccess","result","count","dataManager","dataModule","getData","generateQuery","requiresCount","then","e","isRemoteData","allowServerDataBinding","argsData","fill","trigger","refreshChart","visibleSeries","refreshBound","refreshAxisLabel","_i","_a","item","_b","_c","findSeriesCollection","column","row","isStack","seriesCollection","axes","rowAxis","rowSeries","_d","_e","axis","_f","_g","rectSeriesInChart","toLowerCase","calculateStackedValue","isStacking100","columns","columnItem","rows","calculateStackingValues","startValues","endValues","yValues","lastPositive","lastNegative","stackingGroup","lastValue","value","frequencies","findFrequencies","groupingValues","visiblePoints","k","stackingSeies","stackedValues","seriesCollection_2","seriesCollection_1","j","pointsLength","toFixed","abs","isColumnBarType","startFromZero","parseFloat","findPercentageOfStacking","stackingSeries","values","stackingSeries_1","seriesCollection_3","isStack100","renderSeries","seriesType","replace","draw","dataLabel3DModule","render","tempPoints","tempPoint","pointIndex","setPointColor","getYValues","getXValues","getSegmentDepth","actualDepth","depth","start","end","enableSideBySidePlacement","space","columnFacet","position","rectCount","delta","getSideBySidePositions","findRectPosition","vSeries","groupName","getDoubleRange","mstart","mend","mdelta","mmedian","misEmpty","median","setStyle","options","opacity","dashArray","getSideBySideInfo","currentSeries","minimumPointDelta","spacing","columnSpacing","columnWidth","pos","loc","range","radius","duration"],"sources":["C:/Users/mkfun/Desktop/ct assignment/admin/node_modules/@syncfusion/ej2-charts/src/chart3d/series/chart-series.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Property, ChildProperty, Complex } from '@syncfusion/ej2-base';\nimport { isNullOrUndefined, extend } from '@syncfusion/ej2-base';\nimport { getVisiblePoints, StackValues } from '../../common/utils/helper';\nimport { firstToLowerCase } from '../../common/utils/helper';\nimport { Rect } from '@syncfusion/ej2-svg-base';\nimport { Border, Margin, Animation } from '../../common/model/base';\nimport { DataManager, DataUtil } from '@syncfusion/ej2-data';\nimport { seriesRender } from '../../common/model/constants';\nimport { setRange } from '../../common/utils/helper';\nimport { Chart3DTextFont } from '../model/chart3d-Interface';\nimport { getMinPointsDeltaValue } from '../utils/chart3dRender';\n/**\n * Configures the data label in the series.\n */\nvar Chart3DDataLabelSettings = /** @class */ (function (_super) {\n    __extends(Chart3DDataLabelSettings, _super);\n    function Chart3DDataLabelSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property(false)\n    ], Chart3DDataLabelSettings.prototype, \"visible\", void 0);\n    __decorate([\n        Property(null)\n    ], Chart3DDataLabelSettings.prototype, \"name\", void 0);\n    __decorate([\n        Property('transparent')\n    ], Chart3DDataLabelSettings.prototype, \"fill\", void 0);\n    __decorate([\n        Property(null)\n    ], Chart3DDataLabelSettings.prototype, \"format\", void 0);\n    __decorate([\n        Property(1)\n    ], Chart3DDataLabelSettings.prototype, \"opacity\", void 0);\n    __decorate([\n        Property(0)\n    ], Chart3DDataLabelSettings.prototype, \"angle\", void 0);\n    __decorate([\n        Property(false)\n    ], Chart3DDataLabelSettings.prototype, \"enableRotation\", void 0);\n    __decorate([\n        Property('Middle')\n    ], Chart3DDataLabelSettings.prototype, \"position\", void 0);\n    __decorate([\n        Complex({ width: null, color: null }, Border)\n    ], Chart3DDataLabelSettings.prototype, \"border\", void 0);\n    __decorate([\n        Complex({ left: 5, right: 5, top: 5, bottom: 5 }, Margin)\n    ], Chart3DDataLabelSettings.prototype, \"margin\", void 0);\n    __decorate([\n        Complex({ size: null, color: null, fontStyle: null, fontWeight: null, fontFamily: null }, Chart3DTextFont)\n    ], Chart3DDataLabelSettings.prototype, \"font\", void 0);\n    __decorate([\n        Property(null)\n    ], Chart3DDataLabelSettings.prototype, \"template\", void 0);\n    return Chart3DDataLabelSettings;\n}(ChildProperty));\nexport { Chart3DDataLabelSettings };\n/**\n * Configures the Empty Points of series\n */\nvar Chart3DEmptyPointSettings = /** @class */ (function (_super) {\n    __extends(Chart3DEmptyPointSettings, _super);\n    function Chart3DEmptyPointSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property(null)\n    ], Chart3DEmptyPointSettings.prototype, \"fill\", void 0);\n    __decorate([\n        Property('Gap')\n    ], Chart3DEmptyPointSettings.prototype, \"mode\", void 0);\n    return Chart3DEmptyPointSettings;\n}(ChildProperty));\nexport { Chart3DEmptyPointSettings };\n/**\n * Points model for the series.\n *\n * @public\n */\nvar Chart3DPoint = /** @class */ (function () {\n    function Chart3DPoint() {\n        /** Point symbol location. */\n        this.symbolLocations = null;\n        /** Point percentage value. */\n        this.percentage = null;\n        /** To know the point is selected. */\n        this.isSelect = false;\n    }\n    return Chart3DPoint;\n}());\nexport { Chart3DPoint };\n/**\n * Configures the series in charts.\n *\n * @public\n */\nvar Chart3DSeries = /** @class */ (function (_super) {\n    __extends(Chart3DSeries, _super);\n    function Chart3DSeries(parent, propName, defaultValue, isArray) {\n        var _this = _super.call(this, parent, propName, defaultValue, isArray) || this;\n        /** @private */\n        _this.currentViewData = [];\n        /** @private */\n        _this.clipRect = new Rect(0, 0, 0, 0);\n        _this.visibleSeriesCount = 0;\n        /** @private */\n        _this.category = 'Series';\n        /** @private */\n        _this.isRectSeries = false;\n        /** @private */\n        _this.all = false;\n        return _this;\n    }\n    /**\n     * This method is responsible for handling and processing JSON data.\n     *\n     * @returns {void}\n     * @hidden\n     */\n    Chart3DSeries.prototype.processJsonData = function () {\n        var i = 0;\n        var point = new Chart3DPoint();\n        var xName = this.xName;\n        var textMappingName = this instanceof Chart3DSeries && this.dataLabel.name ?\n            this.dataLabel.name : '';\n        var len = (this.currentViewData || []).length;\n        this.points = [];\n        this.xMin = Infinity;\n        this.xMax = -Infinity;\n        this.yMin = Infinity;\n        this.yMax = -Infinity;\n        this.sizeMax = -Infinity;\n        if (this.xAxis.valueType === 'Category') {\n            while (i < len) {\n                point = this.dataPoint(i, textMappingName, xName);\n                this.pushCategoryData(point, i, point.x);\n                this.pushData(point, i);\n                this.setEmptyPoint(point, i);\n                i++;\n            }\n        }\n        else if (this.xAxis.valueType.indexOf('DateTime') > -1) {\n            var option = {\n                skeleton: 'full',\n                type: 'dateTime'\n            };\n            var dateParser = this.chart.intl.getDateParser(option);\n            var dateFormatter = this.chart.intl.getDateFormat(option);\n            while (i < len) {\n                point = this.dataPoint(i, textMappingName, xName);\n                if (!isNullOrUndefined(point.x) && point.x !== '') {\n                    point.x = new Date(DataUtil.parse.parseJson({ val: point.x }).val);\n                    if (this.xAxis.valueType === 'DateTime') {\n                        point.xValue = Date.parse(point.x.toString());\n                    }\n                    else {\n                        this.pushCategoryData(point, i, Date.parse(dateParser(dateFormatter(point.x))).toString());\n                    }\n                    this.pushData(point, i);\n                    this.setEmptyPoint(point, i);\n                }\n                else {\n                    point.visible = false;\n                }\n                i++;\n            }\n        }\n        else {\n            while (i < len) {\n                point = this.dataPoint(i, textMappingName, xName);\n                point.xValue = point.x;\n                this.pushData(point, i);\n                this.setEmptyPoint(point, i);\n                i++;\n            }\n        }\n    };\n    /**\n     * Pushes data into a collection at a specified index.\n     *\n     * @param {Chart3DPoint} point - The Chart3DPoint object representing the data to be pushed.\n     * @param {number} i - The index at which the data should be pushed.\n     * @returns {void}\n     */\n    Chart3DSeries.prototype.pushData = function (point, i) {\n        point.index = i;\n        point.yValue = point.y;\n        point.series = this;\n        // To find the min, max for the axis range.\n        this.xMin = Math.min(this.xMin, point.xValue);\n        this.xMax = Math.max(this.xMax, point.xValue);\n        this.xData.push(point.xValue);\n    };\n    /**\n     * Creates and returns a Chart3DPoint object representing a data point at the specified index.\n     *\n     * @param {number} i - The index of the data point.\n     * @param {string} textMappingName - The name of the property containing text information for the data point.\n     * @param {string} xName - The name of the property containing X-axis information for the data point.\n     * @returns {Chart3DPoint} - The Chart3DPoint object representing the data point.\n     */\n    Chart3DSeries.prototype.dataPoint = function (i, textMappingName, xName) {\n        this.points[i] = new Chart3DPoint();\n        var point = this.points[i];\n        var currentViewData = this.currentViewData[i];\n        var getObjectValueByMappingString = this.get3DObjectValue;\n        point.x = getObjectValueByMappingString(xName, currentViewData);\n        point.interior = getObjectValueByMappingString(this.pointColorMapping, currentViewData);\n        if (this instanceof Chart3DSeries) {\n            point.y = getObjectValueByMappingString(this.yName, currentViewData);\n            point.size = getObjectValueByMappingString(this.size, currentViewData);\n            point.text = getObjectValueByMappingString(textMappingName, currentViewData);\n            point.tooltip = getObjectValueByMappingString(this.tooltipMappingName, currentViewData);\n        }\n        return point;\n    };\n    /**\n     * Retrieves the value associated with a specified mapping name from a given data object.\n     *\n     * @param {string} mappingName - The mapping name used to retrieve the value from the data object.\n     * @param {Object} data - The data object from which the value is retrieved.\n     * @returns {Object} - The value associated with the specified mapping name in the data object.\n     */\n    Chart3DSeries.prototype.get3DObjectValue = function (mappingName, data) {\n        return data[mappingName];\n    };\n    /**\n     * Sets values for an empty data point at the specified index.\n     *\n     * @param {Chart3DPoint} point - The Chart3DPoint object representing the empty data point.\n     * @param {number} i - The index of the empty data point.\n     * @returns {void}\n     */\n    Chart3DSeries.prototype.setEmptyPoint = function (point, i) {\n        if (!this.findVisibility(point)) {\n            point.visible = true;\n            return null;\n        }\n        point.isEmpty = true;\n        var series = this instanceof Chart3DSeries && this;\n        var mode = series.emptyPointSettings.mode;\n        switch (mode) {\n            case 'Zero':\n                point.visible = true;\n                point.y = point.yValue = this.yData[i] = 0;\n                break;\n            case 'Average':\n                if (this instanceof Chart3DSeries) {\n                    point.y = point.yValue = this.yData[i] = this.getAverage(this.yName, i);\n                }\n                point.visible = true;\n                break;\n            case 'Drop':\n            case 'Gap':\n                this.yData[i] = null;\n                point.visible = false;\n                break;\n        }\n    };\n    /**\n     * Determines the visibility status of a Chart3DPoint.\n     *\n     * @param {Chart3DPoint} point - The Chart3DPoint object for which visibility is determined.\n     * @returns {boolean} - A boolean indicating the visibility status of the Chart3DPoint.\n     */\n    Chart3DSeries.prototype.findVisibility = function (point) {\n        this.setXYMinMax(point.yValue);\n        this.yData.push(point.yValue);\n        return isNullOrUndefined(point.x) || (isNullOrUndefined(point.y) || isNaN(+point.y));\n    };\n    /**\n     * Sets the minimum and maximum values for the X and Y dimensions based on the provided Y value.\n     *\n     * @param {number} yValue - The Y value used to set the minimum and maximum values for the X and Y dimensions.\n     * @returns {void}\n     */\n    Chart3DSeries.prototype.setXYMinMax = function (yValue) {\n        var isLogAxis = (this.yAxis.valueType === 'Logarithmic' || this.xAxis.valueType === 'Logarithmic');\n        var isNegativeValue = yValue < 0 || this.yAxis.rangePadding === 'None';\n        var seriesMinY;\n        if (!setRange(this.yAxis)) {\n            seriesMinY = ((isLogAxis ? (yValue) : isNegativeValue ? yValue : 0));\n        }\n        else {\n            seriesMinY = yValue;\n        }\n        this.yMin = isLogAxis ?\n            Math.min(this.yMin, (isNullOrUndefined(seriesMinY) || isNaN(seriesMinY) || (seriesMinY === 0) ||\n                (seriesMinY.toString() === '0') || (seriesMinY.toString() === '')) ? this.yMin : seriesMinY) :\n            Math.min(this.yMin, (isNullOrUndefined(seriesMinY) || isNaN(seriesMinY)) ? this.yMin : seriesMinY);\n        this.yMax = Math.max(this.yMax, (isNullOrUndefined(yValue) || isNaN(yValue)) ? this.yMax : yValue);\n    };\n    /**\n     * Pushes category data to the Chart3DPoint object at the specified index.\n     *\n     * @param {Chart3DPoint} point - The Chart3DPoint object to which category data is pushed.\n     * @param {number} index - The index at which the category data is pushed.\n     * @param {string} pointX - The X value of the category data to be pushed.\n     * @returns {void}\n     */\n    Chart3DSeries.prototype.pushCategoryData = function (point, index, pointX) {\n        if (this.chart.tooltip) {\n            if (!this.visible) {\n                return null;\n            }\n        }\n        if (!this.xAxis.isIndexed) {\n            if (this.xAxis.indexLabels[pointX] === undefined) {\n                this.xAxis.indexLabels[pointX] = this.xAxis.labels.length;\n                this.xAxis.labels.push(pointX);\n            }\n            point.xValue = this.xAxis.indexLabels[pointX];\n        }\n        else {\n            if (this.xAxis.labels[index]) {\n                this.xAxis.labels[index] += ', ' + pointX;\n            }\n            else {\n                this.xAxis.labels.push(pointX);\n            }\n            // this.xAxis.labels[index as number] ? this.xAxis.labels[index as number] += ', ' + pointX :\n            //     this.xAxis.labels.push(pointX);\n            point.xValue = index;\n        }\n    };\n    /**\n     * Calculates the average value of a specified member in the data object.\n     *\n     * @param {string} member - The member for which the average is calculated.\n     * @param {number} i - The index used for the calculation.\n     * @param {Object} data - The data object from which the average is calculated. Defaults to the current view data.\n     * @returns {number} - The calculated average value.\n     */\n    Chart3DSeries.prototype.getAverage = function (member, i, data) {\n        if (data === void 0) { data = this.currentViewData; }\n        var previous = data[i - 1] ? (data[i - 1][member] || 0) : 0;\n        var next = data[i + 1] ? (data[i + 1][member] || 0) : 0;\n        return (previous + next) / 2;\n    };\n    /**\n     * Refreshes the data manager for the 3D chart.\n     *\n     * @param {Chart3D} chart - The 3D chart for which the data manager is refreshed.\n     * @returns {void}\n     */\n    Chart3DSeries.prototype.refreshDataManager = function (chart) {\n        var _this = this;\n        this.chart = chart;\n        var dataSource;\n        var isAngular = 'isAngular';\n        if (chart[isAngular]) {\n            dataSource = Object.keys(this.dataSource).length ? this.dataSource : chart.dataSource;\n        }\n        else {\n            dataSource = this.dataSource || chart.dataSource;\n        }\n        if (!(dataSource instanceof DataManager) && isNullOrUndefined(this.query)) {\n            this.dataManagerSuccess({ result: dataSource, count: dataSource.length }, false);\n            return;\n        }\n        var dataManager = this.dataModule.getData(this.dataModule.generateQuery().requiresCount());\n        dataManager.then(function (e) { return _this.dataManagerSuccess(e); });\n    };\n    /**\n     * Handles the success callback for the data manager operation.\n     *\n     * @param {Object} e - The success callback parameters containing the result and count.\n     * @param {Object} e.result - The result object returned by the data manager operation.\n     * @param {number} e.count - The count of items returned by the data manager operation.\n     * @param {boolean} [isRemoteData=true] - Indicates whether the data is fetched remotely. Defaults to true.\n     * @returns {void}\n     */\n    Chart3DSeries.prototype.dataManagerSuccess = function (e, isRemoteData) {\n        if (isRemoteData === void 0) { isRemoteData = true; }\n        this.currentViewData = e.count ? e.result : [];\n        this.chart.allowServerDataBinding = false;\n        if (this instanceof Chart3DSeries) {\n            var argsData = {\n                series: this, data: this.currentViewData, fill: this.interior\n            };\n            this.chart.trigger(seriesRender, argsData);\n            this.interior = argsData.fill;\n            this.currentViewData = argsData.data;\n        }\n        this.processJsonData();\n        this.refreshChart(isRemoteData);\n        this.currentViewData = null;\n    };\n    /**\n     * Refreshes the chart, updating its data and appearance.\n     *\n     * @param {boolean} isRemoteData - Indicates whether the data is fetched remotely.\n     * @returns {void}\n     */\n    Chart3DSeries.prototype.refreshChart = function (isRemoteData) {\n        var chart = this.chart;\n        if (this instanceof Chart3DSeries) {\n            chart.visibleSeriesCount += isRemoteData ? 1 : 0;\n        }\n        if (chart.visibleSeries.length === (chart.visibleSeriesCount)) {\n            chart.refreshBound();\n            chart.trigger('loaded', { chart: chart });\n        }\n        if (this instanceof Chart3DSeries) {\n            chart.visibleSeriesCount += isRemoteData ? 0 : 1;\n        }\n    };\n    /**\n     * Refreshes the axis labels in the chart.\n     * This method is responsible for updating and rendering the axis labels based on the chart's current state.\n     *\n     * @returns {void}\n     * @public\n     */\n    Chart3DSeries.prototype.refreshAxisLabel = function () {\n        if (this.xAxis.valueType !== 'Category') {\n            return null;\n        }\n        this.xAxis.labels = [];\n        this.xAxis.indexLabels = {};\n        for (var _i = 0, _a = this.xAxis.series; _i < _a.length; _i++) {\n            var item = _a[_i];\n            if (item.visible) {\n                item.xMin = Infinity;\n                item.xMax = -Infinity;\n                for (var _b = 0, _c = item.points; _b < _c.length; _b++) {\n                    var point = _c[_b];\n                    item.pushCategoryData(point, point.index, point.x);\n                    item.xMin = Math.min(item.xMin, point.xValue);\n                    item.xMax = Math.max(item.xMax, point.xValue);\n                }\n            }\n        }\n    };\n    /**\n     * Finds the collection of Chart3DSeries associated with the given Chart3DColumn and Chart3DRow in the 3D chart.\n     *\n     * @param {Chart3DColumn} column - The Chart3DColumn object representing the column in the 3D chart.\n     * @param {Chart3DRow} row - The Chart3DRow object representing the row in the 3D chart.\n     * @param {boolean} isStack - Indicates whether the series should be stacked.\n     * @returns {Chart3DSeries[]} - An array of Chart3DSeries associated with the specified column and row.\n     * @public\n     */\n    Chart3DSeries.prototype.findSeriesCollection = function (column, row, isStack) {\n        var seriesCollection = [];\n        for (var _i = 0, _a = row.axes; _i < _a.length; _i++) {\n            var rowAxis = _a[_i];\n            for (var _b = 0, _c = rowAxis.series; _b < _c.length; _b++) {\n                var rowSeries = _c[_b];\n                for (var _d = 0, _e = column.axes; _d < _e.length; _d++) {\n                    var axis = _e[_d];\n                    for (var _f = 0, _g = axis.series; _f < _g.length; _f++) {\n                        var series = _g[_f];\n                        if (series === rowSeries && series.visible && this.rectSeriesInChart(series, isStack)) {\n                            seriesCollection.push(series);\n                        }\n                    }\n                }\n            }\n        }\n        return seriesCollection;\n    };\n    /**\n     * Checks whether the given Chart3DSeries with rectangular data is present in the 3D chart.\n     *\n     * @param {Chart3DSeries} series - The Chart3DSeries object to check for presence in the chart.\n     * @param {boolean} isStack - Indicates whether the series should be stacked.\n     * @returns {boolean} - A boolean value indicating whether the series is present in the 3D chart.\n     * @private\n     */\n    Chart3DSeries.prototype.rectSeriesInChart = function (series, isStack) {\n        var type = (series.type).toLowerCase();\n        return type.indexOf('column') !== -1 || type.indexOf('bar') !== -1 || isStack;\n    };\n    /**\n     * Calculates the stacked values for the Chart3DSeries based on stacking type and chart context.\n     *\n     * @param {boolean} isStacking100 - Indicates whether the stacking type is 100% stacking.\n     * @param {Chart3D} chart - The parent Chart3D object providing context for the calculation.\n     * @returns {void}\n     * @private\n     */\n    Chart3DSeries.prototype.calculateStackedValue = function (isStacking100, chart) {\n        for (var _i = 0, _a = chart.columns; _i < _a.length; _i++) {\n            var columnItem = _a[_i];\n            for (var _b = 0, _c = chart.rows; _b < _c.length; _b++) {\n                var item = _c[_b];\n                this.calculateStackingValues(this.findSeriesCollection(columnItem, item, true), isStacking100);\n            }\n        }\n    };\n    /**\n     * Calculates stacking values for the given Chart3DSeries collection based on the stacking type.\n     *\n     * @param {Chart3DSeries[]} seriesCollection - The collection of Chart3DSeries to calculate stacking values for.\n     * @param {boolean} isStacking100 - Indicates whether the stacking type is 100% stacking.\n     * @returns {void}\n     * @private\n     */\n    Chart3DSeries.prototype.calculateStackingValues = function (seriesCollection, isStacking100) {\n        var startValues;\n        var endValues;\n        var yValues = [];\n        var lastPositive = [];\n        var lastNegative = [];\n        var stackingGroup;\n        var lastValue;\n        var value;\n        var frequencies = [];\n        if (isStacking100) {\n            frequencies = this.findFrequencies(seriesCollection);\n        }\n        var groupingValues = [];\n        var visiblePoints = [];\n        for (var i = 0; i < seriesCollection.length; i++) {\n            var series = seriesCollection[i];\n            if (!groupingValues[series.stackingGroup]) {\n                groupingValues[series.stackingGroup] = [];\n                groupingValues[series.stackingGroup].push(series);\n            }\n            else if (groupingValues[series.stackingGroup] !== undefined) {\n                groupingValues[series.stackingGroup].push(series);\n            }\n        }\n        var keys = Object.keys(groupingValues);\n        for (var k = 0; k < keys.length; k++) {\n            var stackingSeies = [];\n            var stackedValues = [];\n            var seriesCollection_2 = groupingValues[keys[k]];\n            for (var _i = 0, seriesCollection_1 = seriesCollection_2; _i < seriesCollection_1.length; _i++) {\n                var series = seriesCollection_1[_i];\n                if (series.type.indexOf('Stacking') !== -1) {\n                    stackingGroup = series.stackingGroup;\n                    if (!lastPositive[stackingGroup]) {\n                        lastPositive[stackingGroup] = [];\n                        lastNegative[stackingGroup] = [];\n                    }\n                    yValues = series.yData;\n                    startValues = [];\n                    endValues = [];\n                    stackingSeies.push(series);\n                    visiblePoints = getVisiblePoints(series);\n                    for (var j = 0, pointsLength = visiblePoints.length; j < pointsLength; j++) {\n                        lastValue = 0;\n                        value = +yValues[j]; // Fix for chart not rendering while y value is given as string issue\n                        if (lastPositive[stackingGroup][visiblePoints[j].xValue] === undefined) {\n                            lastPositive[stackingGroup][visiblePoints[j].xValue] = 0;\n                        }\n                        if (lastNegative[stackingGroup][visiblePoints[j].xValue] === undefined) {\n                            lastNegative[stackingGroup][visiblePoints[j].xValue] = 0;\n                        }\n                        if (isStacking100) {\n                            value = value / frequencies[stackingGroup][visiblePoints[j].xValue] * 100;\n                            value = !isNaN(value) ? value : 0;\n                            visiblePoints[j].percentage = +(value.toFixed(2));\n                        }\n                        else {\n                            stackedValues[j] = stackedValues[j] ?\n                                stackedValues[j] + Math.abs(value) : Math.abs(value);\n                        }\n                        if (value >= 0) {\n                            lastValue = lastPositive[stackingGroup][visiblePoints[j].xValue];\n                            lastPositive[stackingGroup][visiblePoints[j].xValue] += value;\n                        }\n                        else {\n                            lastValue = lastNegative[stackingGroup][visiblePoints[j].xValue];\n                            lastNegative[stackingGroup][visiblePoints[j].xValue] += value;\n                        }\n                        startValues.push(lastValue);\n                        endValues.push(value + lastValue);\n                        if (isStacking100 && (endValues[j] > 100)) {\n                            endValues[j] = 100;\n                        }\n                    }\n                    series.stackedValues = new StackValues(startValues, endValues);\n                    var isLogAxis = series.yAxis.valueType === 'Logarithmic';\n                    var isColumnBarType = (series.type.indexOf('Column') !== -1 || series.type.indexOf('Bar') !== -1);\n                    series.yMin = isLogAxis && isColumnBarType && series.yMin < 1 ? series.yMin :\n                        (series.yAxis.startFromZero && series.type.indexOf('100') > -1 && series.yAxis.rangePadding === 'Auto' && series.yMin >= 0) ? 0 : parseFloat((Math.min.apply(0, isStacking100 ? startValues : endValues)).toFixed(10));\n                    series.yMax = Math.max.apply(0, endValues);\n                    if (series.yMin > Math.min.apply(0, endValues)) {\n                        series.yMin = (isStacking100) ? -100 :\n                            isLogAxis && isColumnBarType && series.yMin < 1 ? series.yMin : Math.min.apply(0, endValues);\n                    }\n                    if (series.yMax < Math.max.apply(0, startValues)) {\n                        series.yMax = 0;\n                    }\n                }\n            }\n            this.findPercentageOfStacking(stackingSeies, stackedValues, isStacking100);\n        }\n    };\n    /**\n     * Finds the percentage of stacking for the given Chart3DSeries collection and values.\n     *\n     * @param {Chart3DSeries[]} stackingSeries - The collection of Chart3DSeries to find the percentage of stacking for.\n     * @param {number[]} values - The values to calculate the percentage of stacking.\n     * @param {boolean} isStacking100 - Indicates whether the stacking type is 100% stacking.\n     * @returns {void}\n     */\n    Chart3DSeries.prototype.findPercentageOfStacking = function (stackingSeries, values, isStacking100) {\n        for (var _i = 0, stackingSeries_1 = stackingSeries; _i < stackingSeries_1.length; _i++) {\n            var item = stackingSeries_1[_i];\n            if (isStacking100) {\n                return null;\n            }\n            for (var _a = 0, _b = getVisiblePoints(item); _a < _b.length; _a++) {\n                var point = _b[_a];\n                point.percentage = Math.abs(+(point.y / values[point.index] * 100).toFixed(2));\n            }\n        }\n    };\n    /**\n     * Finds the frequencies for the given Chart3DSeries collection.\n     *\n     * @param {Chart3DSeries[]} seriesCollection - The collection of Chart3DSeries to find frequencies for.\n     * @returns {number[]} An array of frequencies for each series in the collection.\n     * @private\n     */\n    Chart3DSeries.prototype.findFrequencies = function (seriesCollection) {\n        var frequencies = [];\n        var stackingGroup;\n        var visiblePoints = [];\n        for (var _i = 0, seriesCollection_3 = seriesCollection; _i < seriesCollection_3.length; _i++) {\n            var series = seriesCollection_3[_i];\n            series.yAxis.isStack100 = series.type.indexOf('100') !== -1 ? true : false;\n            visiblePoints = this.getVisiblePoints();\n            if (series.type.indexOf('Stacking') !== -1) {\n                stackingGroup = series.stackingGroup;\n                if (!frequencies[stackingGroup]) {\n                    frequencies[stackingGroup] = [];\n                }\n                for (var j = 0, pointsLength = visiblePoints.length; j < pointsLength; j++) {\n                    if (frequencies[stackingGroup][visiblePoints[j].xValue] === undefined) {\n                        frequencies[stackingGroup][visiblePoints[j].xValue] = 0;\n                    }\n                    if (series.yData[j] > 0) {\n                        frequencies[stackingGroup][visiblePoints[j].xValue] += series.yData[j];\n                    }\n                    else {\n                        frequencies[stackingGroup][visiblePoints[j].xValue] -= series.yData[j];\n                    }\n                }\n            }\n        }\n        return frequencies;\n    };\n    /**\n     * Renders the Chart3DSeries on the given 3D chart.\n     *\n     * @param {Chart3D} chart - The 3D chart on which to render the series.\n     * @returns {void}\n     * @private\n     */\n    Chart3DSeries.prototype.renderSeries = function (chart) {\n        var seriesType = firstToLowerCase(this.type);\n        seriesType = seriesType.replace('100', '');\n        if (chart[seriesType + 'Series3DModule']) {\n            this.visiblePoints = this.getVisiblePoints();\n            chart[seriesType + 'Series3DModule'].draw(this, chart);\n            if (this.dataLabel.visible && this.visible) {\n                chart.dataLabel3DModule.render(this, this.chart, this.dataLabel);\n            }\n        }\n    };\n    /**\n     * Retrieves the visible data points for the Chart3DSeries.\n     * The visibility of points may be influenced by factors such as data filtering or chart settings.\n     *\n     * @returns {Chart3DPoint[]} An array of Chart3DPoint objects representing the visible data points.\n     * @private\n     */\n    Chart3DSeries.prototype.getVisiblePoints = function () {\n        var points = extend([], this.points, null, true);\n        var tempPoints = [];\n        var tempPoint;\n        var pointIndex = 0;\n        for (var i = 0; i < points.length; i++) {\n            tempPoint = points[i];\n            if (isNullOrUndefined(tempPoint.x)) {\n                continue;\n            }\n            else {\n                tempPoint.index = pointIndex++;\n                tempPoints.push(tempPoint);\n            }\n        }\n        return tempPoints;\n    };\n    /**\n     * Sets the color for a specific Chart3DPoint in the series.\n     * This method allows you to customize the color of an individual data point.\n     *\n     * @param {Chart3DPoint} point - The Chart3DPoint for which to set the color.\n     * @param {string} color - The color value to be applied to the data point.\n     * @returns {string} The updated color value after applying any modifications or validations.\n     * @private\n     */\n    Chart3DSeries.prototype.setPointColor = function (point, color) {\n        color = point.interior || color;\n        return point.isEmpty ? (this.emptyPointSettings.fill || color) : color;\n    };\n    /**\n     * Gets the Y values from an array of Chart3DPoint objects.\n     *\n     * @param {Chart3DPoint[]} points - An array of Chart3DPoint objects.\n     * @returns {number[]} An array containing the Y values extracted from the provided data points.\n     * @private\n     */\n    Chart3DSeries.prototype.getYValues = function (points) {\n        var values = [];\n        var length = points.length;\n        for (var i = 0; i < length; i++) {\n            values.push(points[i].yValue);\n        }\n        return values;\n    };\n    /**\n     * Gets the X values from an array of Chart3DPoint objects.\n     * This method extracts the X values from a collection of data points.\n     *\n     * @param {Chart3DPoint[]} points - An array of Chart3DPoint objects.\n     * @returns {number[]} An array containing the X values extracted from the provided data points.\n     * @private\n     */\n    Chart3DSeries.prototype.getXValues = function (points) {\n        var values = [];\n        var length = points.length;\n        for (var i = 0; i < length; i++) {\n            values.push(points[i].xValue);\n        }\n        return values;\n    };\n    /**\n     * Gets the segment depth information for a Chart3DSeries.\n     * This method retrieves the depth information for the segments of a Chart3DSeries.\n     *\n     * @param {Chart3DSeries} series - The Chart3DSeries for which segment depth is obtained.\n     * @returns {Chart3DDepthInfoType} The depth information for the segments of the specified series.\n     * @private\n     */\n    Chart3DSeries.prototype.getSegmentDepth = function (series) {\n        var actualDepth = this.chart.depth;\n        var start;\n        var end;\n        if (this.chart.enableSideBySidePlacement) {\n            var space = actualDepth / 4;\n            start = space;\n            end = space * (series.columnFacet === 'Rectangle' ? 2.5 : 3);\n        }\n        else {\n            var index = series.position - 1;\n            var count = series.rectCount;\n            var space = actualDepth / ((count * 2) + count + 1);\n            start = space + (space * index * 3);\n            end = start + space * (series.columnFacet === 'Rectangle' ? 1.5 : 2);\n        }\n        return { start: start, end: end, delta: end - start };\n    };\n    /**\n     * Calculates the side-by-side positions for segments in a Chart3DSeries.\n     * This method determines the positions of segments when they are arranged side-by-side.\n     *\n     * @param {Chart3DSeries} series - The Chart3DSeries for which side-by-side positions are calculated.\n     * @returns {void}\n     * @private\n     */\n    Chart3DSeries.prototype.getSideBySidePositions = function (series) {\n        var chart = series.chart;\n        for (var _i = 0, _a = chart.columns; _i < _a.length; _i++) {\n            var columnItem = _a[_i];\n            for (var _b = 0, _c = chart.rows; _b < _c.length; _b++) {\n                var item = _c[_b];\n                this.findRectPosition(series.findSeriesCollection(columnItem, item, false));\n            }\n        }\n    };\n    /**\n     * Finds the position of rectangles for a collection of Chart3DSeries.\n     * This method determines the position of rectangles based on the given series collection.\n     *\n     * @param {Chart3DSeries[]} seriesCollection - The collection of Chart3DSeries for which rectangle positions are determined.\n     * @returns {void}\n     * @private\n     */\n    Chart3DSeries.prototype.findRectPosition = function (seriesCollection) {\n        var groupingValues = [];\n        var vSeries = { rectCount: 0, position: null };\n        for (var i = 0; i < seriesCollection.length; i++) {\n            var value = seriesCollection[i];\n            if (value.type.indexOf('Stacking') !== -1 || value.groupName !== '') {\n                var groupName = value.type.indexOf('Stacking') !== -1 ? value.stackingGroup : value.type + value.groupName;\n                if (groupName) {\n                    if (groupingValues[groupName] === undefined) {\n                        value.position = vSeries.rectCount;\n                        groupingValues[groupName] = vSeries.rectCount++;\n                    }\n                    else {\n                        value.position = groupingValues[groupName];\n                    }\n                }\n                else {\n                    if (vSeries.position === null) {\n                        vSeries.rectCount++;\n                        value.position = vSeries.rectCount;\n                        vSeries.position = vSeries.rectCount;\n                    }\n                    else {\n                        value.position = vSeries.position;\n                    }\n                }\n            }\n            else {\n                vSeries.rectCount++;\n                value.position = vSeries.rectCount;\n            }\n        }\n        for (var i = 0; i < seriesCollection.length; i++) {\n            var value = seriesCollection[i];\n            value.rectCount = vSeries.rectCount;\n        }\n    };\n    /**\n     * Gets a range of values between the specified start and end points.\n     * This method returns a Chart3DRangeValues object representing the range of values between the given start and end points.\n     *\n     * @param {number} start - The starting point of the range.\n     * @param {number} end - The ending point of the range.\n     * @returns {Chart3DRangeValues} - An object representing the range of values between the start and end points.\n     */\n    Chart3DSeries.prototype.getDoubleRange = function (start, end) {\n        var mstart;\n        var mend;\n        if (start > end) {\n            mstart = end;\n            mend = start;\n        }\n        else {\n            mstart = start;\n            mend = end;\n        }\n        var mdelta = mend - mstart;\n        var mmedian = (mstart + mend) / 2;\n        var misEmpty = isNaN(mstart) || isNaN(mend);\n        return { start: mstart, end: mend, delta: mdelta, median: mmedian, isEmpty: misEmpty };\n    };\n    /**\n     * Sets the style options for the specified Chart3DSeries.\n     * This method applies the style options to customize the appearance of the specified series.\n     *\n     * @param {Chart3DSeries} series - The Chart3DSeries for which the style options should be set.\n     * @returns {Chart3DStyleOptions} - An object representing the style options applied to the series.\n     */\n    Chart3DSeries.prototype.setStyle = function (series) {\n        var options = {\n            interior: series.interior,\n            opacity: series.opacity,\n            dashArray: ''\n        };\n        return options;\n    };\n    /**\n     * Gets the side-by-side positioning information for the specified Chart3DSeries.\n     * This method calculates and returns the range values that define the position of the series in a side-by-side arrangement.\n     *\n     * @param {Chart3DSeries} series - The Chart3DSeries for which side-by-side positioning information is needed.\n     * @returns {Chart3DRangeValues} - An object representing the range values that define the position of the series in a side-by-side arrangement.\n     */\n    Chart3DSeries.prototype.getSideBySideInfo = function (series) {\n        this.chart.currentSeries = series;\n        var minimumPointDelta = getMinPointsDeltaValue(series.xAxis, this.chart.visibleSeries);\n        var spacing = series.columnSpacing;\n        var columnWidth = (series.columnWidth === null || isNaN(+series.columnWidth)) ? 0.7 : Math.min(series.columnWidth, 1);\n        this.getSideBySidePositions(series);\n        var pos = series.position;\n        var all = series.rectCount;\n        var width = minimumPointDelta * columnWidth;\n        var loc = (pos - (series.stackingGroup === '' ? 1 : 0)) / all - 0.5;\n        var range = this.getDoubleRange(loc, loc + (1 / all));\n        if (!this.chart.enableSideBySidePlacement) {\n            return this.getDoubleRange(-width / 2, width / 2);\n        }\n        if (!range.isEmpty) {\n            range = this.getDoubleRange(range.start * width, range.end * width);\n            var radius = spacing * range.delta;\n            range = this.getDoubleRange(range.start + radius / 2, range.end - radius / 2);\n        }\n        return range;\n    };\n    __decorate([\n        Property('')\n    ], Chart3DSeries.prototype, \"xName\", void 0);\n    __decorate([\n        Property('')\n    ], Chart3DSeries.prototype, \"pointColorMapping\", void 0);\n    __decorate([\n        Property(true)\n    ], Chart3DSeries.prototype, \"visible\", void 0);\n    __decorate([\n        Property(null)\n    ], Chart3DSeries.prototype, \"xAxisName\", void 0);\n    __decorate([\n        Property(null)\n    ], Chart3DSeries.prototype, \"yAxisName\", void 0);\n    __decorate([\n        Complex({ duration: 2000 }, Animation)\n    ], Chart3DSeries.prototype, \"animation\", void 0);\n    __decorate([\n        Property(null)\n    ], Chart3DSeries.prototype, \"fill\", void 0);\n    __decorate([\n        Property('')\n    ], Chart3DSeries.prototype, \"dataSource\", void 0);\n    __decorate([\n        Property()\n    ], Chart3DSeries.prototype, \"query\", void 0);\n    __decorate([\n        Complex({}, Chart3DDataLabelSettings)\n    ], Chart3DSeries.prototype, \"dataLabel\", void 0);\n    __decorate([\n        Property('')\n    ], Chart3DSeries.prototype, \"name\", void 0);\n    __decorate([\n        Property('')\n    ], Chart3DSeries.prototype, \"yName\", void 0);\n    __decorate([\n        Property('')\n    ], Chart3DSeries.prototype, \"size\", void 0);\n    __decorate([\n        Property('')\n    ], Chart3DSeries.prototype, \"stackingGroup\", void 0);\n    __decorate([\n        Property(1)\n    ], Chart3DSeries.prototype, \"opacity\", void 0);\n    __decorate([\n        Property('')\n    ], Chart3DSeries.prototype, \"groupName\", void 0);\n    __decorate([\n        Property('Column')\n    ], Chart3DSeries.prototype, \"type\", void 0);\n    __decorate([\n        Property(true)\n    ], Chart3DSeries.prototype, \"enableTooltip\", void 0);\n    __decorate([\n        Property('')\n    ], Chart3DSeries.prototype, \"tooltipFormat\", void 0);\n    __decorate([\n        Property('')\n    ], Chart3DSeries.prototype, \"tooltipMappingName\", void 0);\n    __decorate([\n        Property('SeriesType')\n    ], Chart3DSeries.prototype, \"legendShape\", void 0);\n    __decorate([\n        Property('')\n    ], Chart3DSeries.prototype, \"legendImageUrl\", void 0);\n    __decorate([\n        Complex(null, Chart3DEmptyPointSettings)\n    ], Chart3DSeries.prototype, \"emptyPointSettings\", void 0);\n    __decorate([\n        Property(null)\n    ], Chart3DSeries.prototype, \"columnWidth\", void 0);\n    __decorate([\n        Property('Rectangle')\n    ], Chart3DSeries.prototype, \"columnFacet\", void 0);\n    __decorate([\n        Property(0.1)\n    ], Chart3DSeries.prototype, \"columnSpacing\", void 0);\n    return Chart3DSeries;\n}(ChildProperty));\nexport { Chart3DSeries };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}