{"ast":null,"code":"import { subtractThickness, sum } from '../../common/utils/helper';\nimport { subArray } from '../../common/utils/helper';\nimport { Thickness } from '../../common/utils/helper';\nimport { Size, Rect } from '@syncfusion/ej2-svg-base';\n/**\n * Specifies the Cartesian Axis Layout.\n */\nvar axisPadding = 10;\n/**\n * The `CartesianAxisLayoutPanel` class is responsible for managing the layout of Cartesian axes in a 3D chart.\n */\nvar CartesianAxisLayoutPanel = /** @class */function () {\n  /**\n   *\n   *\n   * @param {Chart3D} chartModule - Specifies the chart module.\n   * @private\n   */\n  function CartesianAxisLayoutPanel(chartModule) {\n    this.chart = chartModule;\n  }\n  /**\n   * Measures and calculates the dimensions of the axis based on the provided rectangle.\n   *\n   * @param {Rect} rect - The rectangle used as a reference for axis measurement and sizing.\n   * @returns {void}\n   */\n  CartesianAxisLayoutPanel.prototype.measureAxis = function (rect) {\n    var chart = this.chart;\n    this.seriesClipRect = new Rect(rect.x, rect.y, rect.width, rect.height);\n    this.initialClipRect = rect;\n    this.leftSize = 0;\n    this.rightSize = 0;\n    this.topSize = 0;\n    this.bottomSize = 0;\n    this.measureRowAxis(chart, this.initialClipRect);\n    this.initialClipRect = subtractThickness(this.initialClipRect, new Thickness(this.leftSize, this.rightSize, 0, 0));\n    this.measureColumnAxis(chart, this.initialClipRect);\n    this.initialClipRect = subtractThickness(this.initialClipRect, new Thickness(0, 0, this.topSize, this.bottomSize));\n    if (!this.chart.delayRedraw) {\n      this.calculateAxisSize(this.initialClipRect);\n    }\n    this.leftSize = 0;\n    this.rightSize = 0;\n    this.topSize = 0;\n    this.bottomSize = 0;\n    this.measureRowAxis(chart, this.initialClipRect);\n    this.seriesClipRect = subtractThickness(this.seriesClipRect, new Thickness(this.leftSize, this.rightSize, 0, 0));\n    this.measureColumnAxis(chart, this.initialClipRect);\n    this.seriesClipRect = subtractThickness(this.seriesClipRect, new Thickness(0, 0, this.topSize, this.bottomSize));\n    if (!this.chart.delayRedraw) {\n      chart.refreshAxis();\n      this.calculateAxisSize(this.seriesClipRect);\n    }\n  };\n  /**\n   * Measures and calculates the dimensions of the row axis within the 3D chart.\n   *\n   * @param {Chart3D} chart - The 3D chart containing the row axis.\n   * @param {Rect} rect - The initial rect values.\n   * @returns {void}\n   */\n  CartesianAxisLayoutPanel.prototype.measureRowAxis = function (chart, rect) {\n    var row;\n    this.calculateRowSize(rect);\n    for (var _i = 0, _a = chart.rows; _i < _a.length; _i++) {\n      var item = _a[_i];\n      row = item;\n      row.nearSizes = [];\n      row.farSizes = [];\n      this.arrangeAxis(row);\n      this.measureDefinition(row, chart, new Size(chart.availableSize.width, row.computedHeight));\n      if (this.leftSize < sum(row.nearSizes)) {\n        this.leftSize = sum(row.nearSizes);\n      }\n      if (this.rightSize < sum(row.farSizes)) {\n        this.rightSize = sum(row.farSizes);\n      }\n    }\n  };\n  /**\n   * Measures and calculates the dimensions of the column axis within the 3D chart.\n   *\n   * @param {Chart3D} chart - The 3D chart containing the column axis.\n   * @param {Rect} rect - The initial rect values.\n   * @returns {void}\n   */\n  CartesianAxisLayoutPanel.prototype.measureColumnAxis = function (chart, rect) {\n    var column;\n    this.calculateColumnSize(rect);\n    for (var _i = 0, _a = chart.columns; _i < _a.length; _i++) {\n      var item = _a[_i];\n      column = item;\n      column.farSizes = [];\n      column.nearSizes = [];\n      this.arrangeAxis(column);\n      this.measureDefinition(column, chart, new Size(column.computedWidth, chart.availableSize.height));\n      if (this.bottomSize < sum(column.nearSizes)) {\n        this.bottomSize = sum(column.nearSizes);\n      }\n      if (this.topSize < sum(column.farSizes)) {\n        this.topSize = sum(column.farSizes);\n      }\n    }\n  };\n  /**\n   * Measure the column and row in chart.\n   *\n   * @param {Chart3DRow | Chart3DColumn} definition - Specifies the row or column.\n   * @param {Chart3D} chart - Specifies the chart.\n   * @param {Size} size - Specifies the size.\n   * @returns {void}\n   * @private\n   */\n  CartesianAxisLayoutPanel.prototype.measureDefinition = function (definition, chart, size) {\n    for (var _i = 0, _a = definition.axes; _i < _a.length; _i++) {\n      var axis = _a[_i];\n      axis.getModule(chart);\n      axis.baseModule.calculateRangeAndInterval(size, axis);\n      definition.computeSize(axis, chart);\n    }\n    if (definition.farSizes.length > 0) {\n      definition.farSizes[definition.farSizes.length - 1] -= axisPadding;\n    }\n    if (definition.nearSizes.length > 0) {\n      definition.nearSizes[definition.nearSizes.length - 1] -= axisPadding;\n    }\n  };\n  /**\n   * Measure the axis.\n   *\n   * @param {Rect} rect - The initial rect values.\n   * @returns {void}\n   * @private\n   */\n  CartesianAxisLayoutPanel.prototype.calculateAxisSize = function (rect) {\n    var chart = this.chart;\n    var row;\n    var column;\n    var definition;\n    var axis;\n    var nearCount = 0;\n    var farCount = 0;\n    var size = 0;\n    var x;\n    var y;\n    var axisOffset;\n    this.calculateRowSize(rect);\n    for (var i = 0, len = chart.rows.length; i < len; i++) {\n      row = chart.rows[i];\n      nearCount = 0;\n      farCount = 0;\n      for (var j = 0, len_1 = row.axes.length; j < len_1; j++) {\n        axis = row.axes[j];\n        axisOffset = axis.plotOffset;\n        if (axis.rect.height === 0) {\n          axis.rect.height = row.computedHeight;\n          size = 0;\n          for (var k = i + 1, len_2 = i + axis.span; k < len_2; k++) {\n            definition = chart.rows[k];\n            size += definition.computedHeight;\n          }\n          axis.rect.y = row.computedTop - size + (axis.plotOffsetTop ? axis.plotOffsetTop : axisOffset);\n          axis.rect.height = axis.rect.height + size - this.getAxisOffsetValue(axis.plotOffsetTop, axis.plotOffsetBottom, axis.plotOffset);\n          axis.rect.width = 0;\n        }\n        if (axis.isAxisOpposedPosition) {\n          x = rect.x + rect.width + sum(subArray(row.farSizes, farCount));\n          axis.rect.x = axis.rect.x >= x ? axis.rect.x : x;\n          farCount++;\n        } else {\n          x = rect.x - sum(subArray(row.nearSizes, nearCount));\n          axis.rect.x = axis.rect.x <= x ? axis.rect.x : x;\n          nearCount++;\n        }\n      }\n    }\n    this.calculateColumnSize(rect);\n    for (var i = 0, len = chart.columns.length; i < len; i++) {\n      column = chart.columns[i];\n      nearCount = 0;\n      farCount = 0;\n      for (var j = 0, len_3 = column.axes.length; j < len_3; j++) {\n        axis = column.axes[j];\n        axisOffset = axis.plotOffset;\n        if (axis.rect.width === 0) {\n          for (var k = i, len_4 = i + axis.span; k < len_4; k++) {\n            definition = chart.columns[k];\n            axis.rect.width += definition.computedWidth;\n          }\n          axis.rect.x = column.computedLeft + (axis.plotOffsetLeft ? axis.plotOffsetLeft : axisOffset);\n          axis.rect.width -= this.getAxisOffsetValue(axis.plotOffsetLeft, axis.plotOffsetRight, axis.plotOffset);\n          axis.rect.height = 0;\n        }\n        if (axis.isAxisOpposedPosition) {\n          y = rect.y - sum(subArray(column.farSizes, farCount));\n          axis.rect.y = axis.rect.y <= y ? axis.rect.y : y;\n          farCount++;\n        } else {\n          y = rect.y + rect.height + sum(subArray(column.nearSizes, nearCount));\n          axis.rect.y = axis.rect.y >= y ? axis.rect.y : y;\n          nearCount++;\n        }\n      }\n    }\n  };\n  /**\n   * Measure the axis.\n   *\n   * @returns {void}\n   * @private\n   */\n  CartesianAxisLayoutPanel.prototype.measure = function () {\n    var chart = this.chart;\n    var row;\n    var column;\n    var definition;\n    var actualIndex;\n    var span;\n    for (var _i = 0, _a = chart.axisCollections; _i < _a.length; _i++) {\n      var axis = _a[_i];\n      if (axis.orientation === 'Vertical') {\n        chart.verticalAxes.push(axis);\n        actualIndex = this.getActualRow(axis);\n        row = chart.rows[actualIndex];\n        this.pushAxis(row, axis);\n        span = actualIndex + axis.span > chart.rows.length ? chart.rows.length : actualIndex + axis.span;\n        for (var j = actualIndex + 1; j < span; j++) {\n          definition = chart.rows[j];\n          definition.axes[row.axes.length - 1] = axis;\n          chart.rows[j] = definition;\n        }\n        chart.rows[actualIndex] = row;\n      } else {\n        chart.horizontalAxes.push(axis);\n        actualIndex = this.getActualColumn(axis);\n        column = chart.columns[actualIndex];\n        this.pushAxis(column, axis);\n        span = actualIndex + axis.span > chart.columns.length ? chart.columns.length : actualIndex + axis.span;\n        for (var j = actualIndex + 1; j < span; j++) {\n          definition = chart.columns[j];\n          definition.axes[column.axes.length - 1] = axis;\n          chart.columns[j] = definition;\n        }\n        chart.columns[actualIndex] = column;\n      }\n      axis.isRTLEnabled = chart.enableRtl;\n      axis.setIsInversedAndOpposedPosition();\n    }\n  };\n  /**\n   * Calculates the offset value for an axis based on positions and a plot offset.\n   *\n   * @param {number} position1 - The first position.\n   * @param {number} position2 - The second position.\n   * @param {number} plotOffset - The plot offset value.\n   * @returns {number} - The calculated axis offset value.\n   */\n  CartesianAxisLayoutPanel.prototype.getAxisOffsetValue = function (position1, position2, plotOffset) {\n    var rangeOffset = position1 ? position1 + (position2 ? position2 : plotOffset) : position2 ? position2 + plotOffset : 2 * plotOffset;\n    return rangeOffset;\n  };\n  /**\n   * Pushes an axis definition into the specified row or column within the 3D chart.\n   *\n   * @param {Chart3DRow | Chart3DColumn} definition - The row or column definition to which the axis is added.\n   * @param {Chart3DAxis} axis - The axis to be pushed into the definition.\n   * @returns {void}\n   */\n  CartesianAxisLayoutPanel.prototype.pushAxis = function (definition, axis) {\n    for (var i = 0, len = definition.axes.length; i <= len; i++) {\n      if (!definition.axes[i]) {\n        definition.axes[i] = axis;\n        break;\n      }\n    }\n  };\n  /**\n   * Arranges and positions axis elements within the specified row or column definition.\n   *\n   * @param {Chart3DRow | Chart3DColumn} definition - The row or column definition in which axis elements are arranged.\n   * @returns {void}\n   */\n  CartesianAxisLayoutPanel.prototype.arrangeAxis = function (definition) {\n    var axisCollection = [];\n    for (var i = 0, len = definition.axes.length; i <= len; i++) {\n      if (definition.axes[i]) {\n        axisCollection.push(definition.axes[i]);\n      }\n    }\n    definition.axes = axisCollection;\n  };\n  /**\n   * Retrieves the actual column index for the specified axis within the 3D chart.\n   *\n   * @param {Chart3DAxis} axis - The axis for which the actual column index is retrieved.\n   * @returns {number} - The actual column index.\n   */\n  CartesianAxisLayoutPanel.prototype.getActualColumn = function (axis) {\n    var actualLength = this.chart.columns.length;\n    var pos = axis.columnIndex;\n    var result = pos >= actualLength ? actualLength - 1 : pos < 0 ? 0 : pos;\n    return result;\n  };\n  /**\n   * Retrieves the actual row index for the specified axis within the 3D chart.\n   *\n   * @param {Chart3DAxis} axis - The axis for which the actual row index is retrieved.\n   * @returns {number} - The actual row index.\n   */\n  CartesianAxisLayoutPanel.prototype.getActualRow = function (axis) {\n    var actualLength = this.chart.rows.length;\n    var pos = axis.rowIndex;\n    var result = pos >= actualLength ? actualLength - 1 : pos < 0 ? 0 : pos;\n    return result;\n  };\n  /**\n   * Measure the row size.\n   *\n   * @param {Rect} rect - The available rect value.\n   * @returns {void}\n   */\n  CartesianAxisLayoutPanel.prototype.calculateRowSize = function (rect) {\n    /** Calculate row size */\n    var chart = this.chart;\n    var row;\n    var rowTop = rect.y + rect.height;\n    var height = 0;\n    var remainingHeight = Math.max(0, rect.height);\n    for (var i = 0, len = chart.rows.length; i < len; i++) {\n      row = chart.rows[i];\n      if (row.height.indexOf('%') !== -1) {\n        height = Math.min(remainingHeight, rect.height * parseInt(row.height, 10) / 100);\n      } else {\n        height = Math.min(remainingHeight, parseInt(row.height, 10));\n      }\n      height = i !== len - 1 ? height : remainingHeight;\n      row.computedHeight = height;\n      rowTop -= height;\n      row.computedTop = rowTop;\n      remainingHeight -= height;\n    }\n  };\n  /**\n   * Measure the column size.\n   *\n   * @param {Rect} rect - The available rect value.\n   * @returns {void}\n   */\n  CartesianAxisLayoutPanel.prototype.calculateColumnSize = function (rect) {\n    /** Calculate column size */\n    var chart = this.chart;\n    var column;\n    var columnLeft = rect.x;\n    var width = 0;\n    var remainingWidth = Math.max(0, rect.width);\n    for (var i = 0, len = chart.columns.length; i < len; i++) {\n      column = chart.columns[i];\n      if (column.width.indexOf('%') !== -1) {\n        width = Math.min(remainingWidth, rect.width * parseInt(column.width, 10) / 100);\n      } else {\n        width = Math.min(remainingWidth, parseInt(column.width, 10));\n      }\n      width = i !== len - 1 ? width : remainingWidth;\n      column.computedWidth = width;\n      column.computedLeft = columnLeft;\n      columnLeft += width;\n      remainingWidth -= width;\n    }\n  };\n  return CartesianAxisLayoutPanel;\n}();\nexport { CartesianAxisLayoutPanel };","map":{"version":3,"names":["subtractThickness","sum","subArray","Thickness","Size","Rect","axisPadding","CartesianAxisLayoutPanel","chartModule","chart","prototype","measureAxis","rect","seriesClipRect","x","y","width","height","initialClipRect","leftSize","rightSize","topSize","bottomSize","measureRowAxis","measureColumnAxis","delayRedraw","calculateAxisSize","refreshAxis","row","calculateRowSize","_i","_a","rows","length","item","nearSizes","farSizes","arrangeAxis","measureDefinition","availableSize","computedHeight","column","calculateColumnSize","columns","computedWidth","definition","size","axes","axis","getModule","baseModule","calculateRangeAndInterval","computeSize","nearCount","farCount","axisOffset","i","len","j","len_1","plotOffset","k","len_2","span","computedTop","plotOffsetTop","getAxisOffsetValue","plotOffsetBottom","isAxisOpposedPosition","len_3","len_4","computedLeft","plotOffsetLeft","plotOffsetRight","measure","actualIndex","axisCollections","orientation","verticalAxes","push","getActualRow","pushAxis","horizontalAxes","getActualColumn","isRTLEnabled","enableRtl","setIsInversedAndOpposedPosition","position1","position2","rangeOffset","axisCollection","actualLength","pos","columnIndex","result","rowIndex","rowTop","remainingHeight","Math","max","indexOf","min","parseInt","columnLeft","remainingWidth"],"sources":["C:/Users/mkfun/Desktop/ct assignment/admin/node_modules/@syncfusion/ej2-charts/src/chart3d/axis/cartesian-panel.js"],"sourcesContent":["import { subtractThickness, sum } from '../../common/utils/helper';\nimport { subArray } from '../../common/utils/helper';\nimport { Thickness } from '../../common/utils/helper';\nimport { Size, Rect } from '@syncfusion/ej2-svg-base';\n/**\n * Specifies the Cartesian Axis Layout.\n */\nvar axisPadding = 10;\n/**\n * The `CartesianAxisLayoutPanel` class is responsible for managing the layout of Cartesian axes in a 3D chart.\n */\nvar CartesianAxisLayoutPanel = /** @class */ (function () {\n    /**\n     *\n     *\n     * @param {Chart3D} chartModule - Specifies the chart module.\n     * @private\n     */\n    function CartesianAxisLayoutPanel(chartModule) {\n        this.chart = chartModule;\n    }\n    /**\n     * Measures and calculates the dimensions of the axis based on the provided rectangle.\n     *\n     * @param {Rect} rect - The rectangle used as a reference for axis measurement and sizing.\n     * @returns {void}\n     */\n    CartesianAxisLayoutPanel.prototype.measureAxis = function (rect) {\n        var chart = this.chart;\n        this.seriesClipRect = new Rect(rect.x, rect.y, rect.width, rect.height);\n        this.initialClipRect = rect;\n        this.leftSize = 0;\n        this.rightSize = 0;\n        this.topSize = 0;\n        this.bottomSize = 0;\n        this.measureRowAxis(chart, this.initialClipRect);\n        this.initialClipRect = subtractThickness(this.initialClipRect, new Thickness(this.leftSize, this.rightSize, 0, 0));\n        this.measureColumnAxis(chart, this.initialClipRect);\n        this.initialClipRect = subtractThickness(this.initialClipRect, new Thickness(0, 0, this.topSize, this.bottomSize));\n        if (!this.chart.delayRedraw) {\n            this.calculateAxisSize(this.initialClipRect);\n        }\n        this.leftSize = 0;\n        this.rightSize = 0;\n        this.topSize = 0;\n        this.bottomSize = 0;\n        this.measureRowAxis(chart, this.initialClipRect);\n        this.seriesClipRect = subtractThickness(this.seriesClipRect, new Thickness(this.leftSize, this.rightSize, 0, 0));\n        this.measureColumnAxis(chart, this.initialClipRect);\n        this.seriesClipRect = subtractThickness(this.seriesClipRect, new Thickness(0, 0, this.topSize, this.bottomSize));\n        if (!this.chart.delayRedraw) {\n            chart.refreshAxis();\n            this.calculateAxisSize(this.seriesClipRect);\n        }\n    };\n    /**\n     * Measures and calculates the dimensions of the row axis within the 3D chart.\n     *\n     * @param {Chart3D} chart - The 3D chart containing the row axis.\n     * @param {Rect} rect - The initial rect values.\n     * @returns {void}\n     */\n    CartesianAxisLayoutPanel.prototype.measureRowAxis = function (chart, rect) {\n        var row;\n        this.calculateRowSize(rect);\n        for (var _i = 0, _a = chart.rows; _i < _a.length; _i++) {\n            var item = _a[_i];\n            row = item;\n            row.nearSizes = [];\n            row.farSizes = [];\n            this.arrangeAxis(row);\n            this.measureDefinition(row, chart, new Size(chart.availableSize.width, row.computedHeight));\n            if (this.leftSize < sum(row.nearSizes)) {\n                this.leftSize = sum(row.nearSizes);\n            }\n            if (this.rightSize < sum(row.farSizes)) {\n                this.rightSize = sum(row.farSizes);\n            }\n        }\n    };\n    /**\n     * Measures and calculates the dimensions of the column axis within the 3D chart.\n     *\n     * @param {Chart3D} chart - The 3D chart containing the column axis.\n     * @param {Rect} rect - The initial rect values.\n     * @returns {void}\n     */\n    CartesianAxisLayoutPanel.prototype.measureColumnAxis = function (chart, rect) {\n        var column;\n        this.calculateColumnSize(rect);\n        for (var _i = 0, _a = chart.columns; _i < _a.length; _i++) {\n            var item = _a[_i];\n            column = item;\n            column.farSizes = [];\n            column.nearSizes = [];\n            this.arrangeAxis(column);\n            this.measureDefinition(column, chart, new Size(column.computedWidth, chart.availableSize.height));\n            if (this.bottomSize < sum(column.nearSizes)) {\n                this.bottomSize = sum(column.nearSizes);\n            }\n            if (this.topSize < sum(column.farSizes)) {\n                this.topSize = sum(column.farSizes);\n            }\n        }\n    };\n    /**\n     * Measure the column and row in chart.\n     *\n     * @param {Chart3DRow | Chart3DColumn} definition - Specifies the row or column.\n     * @param {Chart3D} chart - Specifies the chart.\n     * @param {Size} size - Specifies the size.\n     * @returns {void}\n     * @private\n     */\n    CartesianAxisLayoutPanel.prototype.measureDefinition = function (definition, chart, size) {\n        for (var _i = 0, _a = definition.axes; _i < _a.length; _i++) {\n            var axis = _a[_i];\n            axis.getModule(chart);\n            axis.baseModule.calculateRangeAndInterval(size, axis);\n            definition.computeSize(axis, chart);\n        }\n        if (definition.farSizes.length > 0) {\n            definition.farSizes[definition.farSizes.length - 1] -= axisPadding;\n        }\n        if (definition.nearSizes.length > 0) {\n            definition.nearSizes[definition.nearSizes.length - 1] -= axisPadding;\n        }\n    };\n    /**\n     * Measure the axis.\n     *\n     * @param {Rect} rect - The initial rect values.\n     * @returns {void}\n     * @private\n     */\n    CartesianAxisLayoutPanel.prototype.calculateAxisSize = function (rect) {\n        var chart = this.chart;\n        var row;\n        var column;\n        var definition;\n        var axis;\n        var nearCount = 0;\n        var farCount = 0;\n        var size = 0;\n        var x;\n        var y;\n        var axisOffset;\n        this.calculateRowSize(rect);\n        for (var i = 0, len = chart.rows.length; i < len; i++) {\n            row = chart.rows[i];\n            nearCount = 0;\n            farCount = 0;\n            for (var j = 0, len_1 = row.axes.length; j < len_1; j++) {\n                axis = row.axes[j];\n                axisOffset = axis.plotOffset;\n                if (axis.rect.height === 0) {\n                    axis.rect.height = row.computedHeight;\n                    size = 0;\n                    for (var k = i + 1, len_2 = i + axis.span; k < len_2; k++) {\n                        definition = chart.rows[k];\n                        size += definition.computedHeight;\n                    }\n                    axis.rect.y = (row.computedTop - size) + (axis.plotOffsetTop ? axis.plotOffsetTop : axisOffset);\n                    axis.rect.height = (axis.rect.height + size) -\n                        (this.getAxisOffsetValue(axis.plotOffsetTop, axis.plotOffsetBottom, axis.plotOffset));\n                    axis.rect.width = 0;\n                }\n                if (axis.isAxisOpposedPosition) {\n                    x = rect.x + rect.width + sum(subArray(row.farSizes, farCount));\n                    axis.rect.x = axis.rect.x >= x ? axis.rect.x : x;\n                    farCount++;\n                }\n                else {\n                    x = rect.x - sum(subArray(row.nearSizes, nearCount));\n                    axis.rect.x = axis.rect.x <= x ? axis.rect.x : x;\n                    nearCount++;\n                }\n            }\n        }\n        this.calculateColumnSize(rect);\n        for (var i = 0, len = chart.columns.length; i < len; i++) {\n            column = chart.columns[i];\n            nearCount = 0;\n            farCount = 0;\n            for (var j = 0, len_3 = column.axes.length; j < len_3; j++) {\n                axis = column.axes[j];\n                axisOffset = axis.plotOffset;\n                if (axis.rect.width === 0) {\n                    for (var k = i, len_4 = (i + axis.span); k < len_4; k++) {\n                        definition = chart.columns[k];\n                        axis.rect.width += definition.computedWidth;\n                    }\n                    axis.rect.x = column.computedLeft + (axis.plotOffsetLeft ? axis.plotOffsetLeft : axisOffset);\n                    axis.rect.width -= (this.getAxisOffsetValue(axis.plotOffsetLeft, axis.plotOffsetRight, axis.plotOffset));\n                    axis.rect.height = 0;\n                }\n                if (axis.isAxisOpposedPosition) {\n                    y = rect.y - sum(subArray(column.farSizes, farCount));\n                    axis.rect.y = axis.rect.y <= y ? axis.rect.y : y;\n                    farCount++;\n                }\n                else {\n                    y = rect.y + rect.height + sum(subArray(column.nearSizes, nearCount));\n                    axis.rect.y = axis.rect.y >= y ? axis.rect.y : y;\n                    nearCount++;\n                }\n            }\n        }\n    };\n    /**\n     * Measure the axis.\n     *\n     * @returns {void}\n     * @private\n     */\n    CartesianAxisLayoutPanel.prototype.measure = function () {\n        var chart = this.chart;\n        var row;\n        var column;\n        var definition;\n        var actualIndex;\n        var span;\n        for (var _i = 0, _a = chart.axisCollections; _i < _a.length; _i++) {\n            var axis = _a[_i];\n            if (axis.orientation === 'Vertical') {\n                chart.verticalAxes.push(axis);\n                actualIndex = this.getActualRow(axis);\n                row = chart.rows[actualIndex];\n                this.pushAxis(row, axis);\n                span = ((actualIndex + axis.span) > chart.rows.length ? chart.rows.length : (actualIndex + axis.span));\n                for (var j = actualIndex + 1; j < span; j++) {\n                    definition = chart.rows[j];\n                    definition.axes[row.axes.length - 1] = axis;\n                    chart.rows[j] = definition;\n                }\n                chart.rows[actualIndex] = row;\n            }\n            else {\n                chart.horizontalAxes.push(axis);\n                actualIndex = this.getActualColumn(axis);\n                column = chart.columns[actualIndex];\n                this.pushAxis(column, axis);\n                span = ((actualIndex + axis.span) > chart.columns.length ? chart.columns.length : (actualIndex + axis.span));\n                for (var j = actualIndex + 1; j < span; j++) {\n                    definition = chart.columns[j];\n                    definition.axes[column.axes.length - 1] = axis;\n                    chart.columns[j] = definition;\n                }\n                chart.columns[actualIndex] = column;\n            }\n            axis.isRTLEnabled = chart.enableRtl;\n            axis.setIsInversedAndOpposedPosition();\n        }\n    };\n    /**\n     * Calculates the offset value for an axis based on positions and a plot offset.\n     *\n     * @param {number} position1 - The first position.\n     * @param {number} position2 - The second position.\n     * @param {number} plotOffset - The plot offset value.\n     * @returns {number} - The calculated axis offset value.\n     */\n    CartesianAxisLayoutPanel.prototype.getAxisOffsetValue = function (position1, position2, plotOffset) {\n        var rangeOffset = position1 ? (position1 + (position2 ? position2 :\n            plotOffset)) : (position2 ? position2 + plotOffset : 2 * plotOffset);\n        return rangeOffset;\n    };\n    /**\n     * Pushes an axis definition into the specified row or column within the 3D chart.\n     *\n     * @param {Chart3DRow | Chart3DColumn} definition - The row or column definition to which the axis is added.\n     * @param {Chart3DAxis} axis - The axis to be pushed into the definition.\n     * @returns {void}\n     */\n    CartesianAxisLayoutPanel.prototype.pushAxis = function (definition, axis) {\n        for (var i = 0, len = definition.axes.length; i <= len; i++) {\n            if (!definition.axes[i]) {\n                definition.axes[i] = axis;\n                break;\n            }\n        }\n    };\n    /**\n     * Arranges and positions axis elements within the specified row or column definition.\n     *\n     * @param {Chart3DRow | Chart3DColumn} definition - The row or column definition in which axis elements are arranged.\n     * @returns {void}\n     */\n    CartesianAxisLayoutPanel.prototype.arrangeAxis = function (definition) {\n        var axisCollection = [];\n        for (var i = 0, len = definition.axes.length; i <= len; i++) {\n            if (definition.axes[i]) {\n                axisCollection.push(definition.axes[i]);\n            }\n        }\n        definition.axes = axisCollection;\n    };\n    /**\n     * Retrieves the actual column index for the specified axis within the 3D chart.\n     *\n     * @param {Chart3DAxis} axis - The axis for which the actual column index is retrieved.\n     * @returns {number} - The actual column index.\n     */\n    CartesianAxisLayoutPanel.prototype.getActualColumn = function (axis) {\n        var actualLength = this.chart.columns.length;\n        var pos = axis.columnIndex;\n        var result = pos >= actualLength ? actualLength - 1 : (pos < 0 ? 0 : pos);\n        return result;\n    };\n    /**\n     * Retrieves the actual row index for the specified axis within the 3D chart.\n     *\n     * @param {Chart3DAxis} axis - The axis for which the actual row index is retrieved.\n     * @returns {number} - The actual row index.\n     */\n    CartesianAxisLayoutPanel.prototype.getActualRow = function (axis) {\n        var actualLength = this.chart.rows.length;\n        var pos = axis.rowIndex;\n        var result = pos >= actualLength ? actualLength - 1 : (pos < 0 ? 0 : pos);\n        return result;\n    };\n    /**\n     * Measure the row size.\n     *\n     * @param {Rect} rect - The available rect value.\n     * @returns {void}\n     */\n    CartesianAxisLayoutPanel.prototype.calculateRowSize = function (rect) {\n        /** Calculate row size */\n        var chart = this.chart;\n        var row;\n        var rowTop = rect.y + rect.height;\n        var height = 0;\n        var remainingHeight = Math.max(0, rect.height);\n        for (var i = 0, len = chart.rows.length; i < len; i++) {\n            row = chart.rows[i];\n            if (row.height.indexOf('%') !== -1) {\n                height = Math.min(remainingHeight, (rect.height * parseInt(row.height, 10) / 100));\n            }\n            else {\n                height = Math.min(remainingHeight, parseInt(row.height, 10));\n            }\n            height = (i !== (len - 1)) ? height : remainingHeight;\n            row.computedHeight = height;\n            rowTop -= height;\n            row.computedTop = rowTop;\n            remainingHeight -= height;\n        }\n    };\n    /**\n     * Measure the column size.\n     *\n     * @param {Rect} rect - The available rect value.\n     * @returns {void}\n     */\n    CartesianAxisLayoutPanel.prototype.calculateColumnSize = function (rect) {\n        /** Calculate column size */\n        var chart = this.chart;\n        var column;\n        var columnLeft = rect.x;\n        var width = 0;\n        var remainingWidth = Math.max(0, rect.width);\n        for (var i = 0, len = chart.columns.length; i < len; i++) {\n            column = chart.columns[i];\n            if (column.width.indexOf('%') !== -1) {\n                width = Math.min(remainingWidth, (rect.width * parseInt(column.width, 10) / 100));\n            }\n            else {\n                width = Math.min(remainingWidth, parseInt(column.width, 10));\n            }\n            width = (i !== (len - 1)) ? width : remainingWidth;\n            column.computedWidth = width;\n            column.computedLeft = columnLeft;\n            columnLeft += width;\n            remainingWidth -= width;\n        }\n    };\n    return CartesianAxisLayoutPanel;\n}());\nexport { CartesianAxisLayoutPanel };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}