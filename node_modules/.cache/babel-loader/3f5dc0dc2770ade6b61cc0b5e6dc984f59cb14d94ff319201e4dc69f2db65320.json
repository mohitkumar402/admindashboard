{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { firstToLowerCase, RectOption } from '../../common/utils/helper';\nimport { NiceInterval } from '../../chart/axis/axis-helper';\nimport { DataManager, DataUtil } from '@syncfusion/ej2-data';\nimport { DataPoint } from '../utils/helper';\nimport { animationMode, getValue, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { getSeriesColor } from '../../common/model/theme';\nimport { PathOption, Rect, measureText, Size } from '@syncfusion/ej2-svg-base';\nimport { Data } from '../../common/model/data';\n/**\n * To render Chart series\n */\nvar RangeSeries = /** @class */function (_super) {\n  __extends(RangeSeries, _super);\n  function RangeSeries(range) {\n    var _this = _super.call(this) || this;\n    _this.dataSource = range.dataSource;\n    _this.xName = range.xName;\n    _this.yName = range.yName;\n    _this.query = range.query;\n    _this.xMin = Infinity;\n    _this.xMax = -Infinity;\n    _this.yMin = Infinity;\n    _this.yMax = -Infinity;\n    _this.labels = [];\n    _this.indexLabels = {};\n    return _this;\n  }\n  /**\n   * To render light weight and data manager process.\n   *\n   * @param {RangeNavigator} control - RangeNavigator instance.\n   * @returns {void}\n   */\n  RangeSeries.prototype.renderChart = function (control) {\n    var _this = this;\n    var dataSource;\n    var query;\n    this.seriesLength = 0;\n    control.rangeSlider.points = [];\n    if (control.series.length) {\n      control.series.map(function (series) {\n        dataSource = series.dataSource || control.dataSource;\n        query = series.query || control.query;\n        series.points = [];\n        _this.processDataSource(dataSource, query, control, series);\n      });\n    } else {\n      this.processDataSource(control.dataSource, control.query, control);\n    }\n  };\n  RangeSeries.prototype.processDataSource = function (dataSource, query, control, series) {\n    var _this = this;\n    if (!(dataSource instanceof DataManager) && !isNullOrUndefined(dataSource) && isNullOrUndefined(query)) {\n      this.dataManagerSuccess({\n        result: dataSource,\n        count: dataSource.length\n      }, control, series);\n      return;\n    }\n    control.dataModule = new Data(dataSource, query);\n    var dataManager = control.dataModule.getData(control.dataModule.generateQuery().requiresCount());\n    dataManager.then(function (e) {\n      return _this.dataManagerSuccess(e, control, series);\n    });\n  };\n  /**\n   * data manager process calculated here.\n   *\n   * @param {Object} e - The data manager result object.\n   * @param {Object} e.result - The result of the data manager process.\n   * @param {number} e.count - The count of items in the result.\n   * @param {RangeNavigator} control - The RangeNavigator control.\n   * @param {RangeNavigatorSeries} series - Optional parameter representing the series data.\n   * @returns {void}\n   */\n  RangeSeries.prototype.dataManagerSuccess = function (e, control, series) {\n    var viewData = e.count ? e.result : [];\n    control.allowServerDataBinding = false;\n    this.processJsonData(viewData, control, Object.keys(viewData).length, series);\n    this.seriesLength += series ? 1 : this.seriesLength;\n    if (!series || this.seriesLength === control.series.length) {\n      this.processXAxis(control);\n      this.calculateGroupingBounds(control);\n      this.processYAxis(control);\n      control.renderChart();\n    }\n  };\n  /**\n   * Process JSON data from data source.\n   *\n   * @param {Object[]} viewData - The data array to be processed.\n   * @param {RangeNavigator} control - The RangeNavigator control.\n   * @param {number} len - The length of the data array.\n   * @param {RangeNavigatorSeries} series - The series data for the RangeNavigator control.\n   * @returns {void}\n   */\n  RangeSeries.prototype.processJsonData = function (viewData, control, len, series) {\n    var i = 0;\n    var point;\n    var xName = series && series.xName || control.xName;\n    var yName = series && series.yName || control.yName;\n    while (i < len) {\n      point = new DataPoint(getValue(xName, viewData[i]), getValue(yName, viewData[i]));\n      point.yValue = +point.y;\n      if (control.valueType.indexOf('DateTime') > -1) {\n        var dateParser = control.intl.getDateParser({\n          skeleton: 'full',\n          type: 'dateTime'\n        });\n        var dateFormatter = control.intl.getDateFormat({\n          skeleton: 'full',\n          type: 'dateTime'\n        });\n        point.x = new Date(DataUtil.parse.parseJson({\n          val: point.x\n        }).val);\n        point.xValue = Date.parse(dateParser(dateFormatter(point.x)));\n        if (control.valueType === 'DateTimeCategory') {\n          if (this.indexLabels[point.xValue.toString()] === undefined) {\n            this.indexLabels[point.xValue.toString()] = this.labels.length;\n            this.labels.push(point.xValue.toString());\n          }\n          point.xValue = this.indexLabels[point.xValue];\n        }\n      } else {\n        point.xValue = +point.x;\n      }\n      if (series) {\n        series.points.push(point);\n      }\n      this.xMin = Math.min(this.xMin, point.xValue);\n      this.yMin = Math.min(this.yMin, point.yValue);\n      this.xMax = Math.max(this.xMax, point.xValue);\n      this.yMax = Math.max(this.yMax, point.yValue);\n      control.rangeSlider.points.push(point);\n      i++;\n    }\n  };\n  /**\n   * Process x axis for range navigator.\n   *\n   * @private\n   * @param {RangeNavigator} control - The RangeNavigator control.\n   * @returns {void}\n   */\n  RangeSeries.prototype.processXAxis = function (control) {\n    var axis = {\n      minimum: control.minimum,\n      maximum: control.maximum,\n      interval: control.interval,\n      valueType: control.valueType,\n      isInversed: control.enableRtl,\n      labelFormat: control.labelFormat,\n      logBase: control.logBase,\n      skeleton: control.skeleton,\n      skeletonType: control.skeletonType\n    };\n    this.xAxis = axis;\n    this.xAxis.intervalType = control.intervalType;\n    this.xAxis.maximumLabels = 3;\n    this.xAxis.skeleton = control.skeleton;\n    this.xAxis.intervalDivs = [10, 5, 2, 1];\n    this.xAxis.rect = control.bounds;\n    this.xAxis.visibleLabels = [];\n    this.xAxis.orientation = 'Horizontal';\n    this.xAxis.labels = this.labels;\n    this.xAxis.indexLabels = this.indexLabels;\n    var axisModule = control[firstToLowerCase(control.valueType) + 'Module'];\n    axisModule.min = this.xMin;\n    axisModule.max = this.xMax;\n    axisModule.getActualRange(this.xAxis, control.bounds);\n    if (this.xAxis.valueType === 'Double' || this.xAxis.valueType === 'DateTime' || this.xAxis.valueType === 'DateTimeCategory') {\n      axisModule.updateActualRange(this.xAxis, this.xAxis.actualRange.min, this.xAxis.actualRange.max, this.xAxis.actualRange.interval);\n    }\n    this.xAxis.actualRange.delta = this.xAxis.actualRange.max - this.xAxis.actualRange.min;\n    this.xAxis.visibleRange = this.xAxis.actualRange;\n    axisModule.calculateVisibleLabels(this.xAxis, control);\n    if (this.xAxis.valueType === 'DateTimeCategory' && control.periodSelectorModule) {\n      control.periodSelectorModule.isDatetimeCategory = true;\n      control.periodSelectorModule.sortedData = this.labels.map(function (label) {\n        return parseInt(label, 10);\n      });\n    }\n  };\n  /**\n   * Process yAxis for range navigator.\n   *\n   * @param {RangeNavigator} control - RangeNavigator instance.\n   * @private\n   * @returns {void}\n   */\n  RangeSeries.prototype.processYAxis = function (control) {\n    var axis = {\n      majorGridLines: {\n        width: 0\n      },\n      rangePadding: 'None',\n      majorTickLines: {\n        width: 0\n      },\n      labelStyle: {\n        size: '0'\n      },\n      visible: false,\n      valueType: 'Double',\n      minimum: null,\n      maximum: null,\n      interval: null\n    };\n    this.yAxis = axis;\n    this.yAxis.rect = control.bounds;\n    this.yAxis.maximumLabels = 3;\n    this.yAxis.intervalDivs = [10, 5, 2, 1];\n    this.yAxis.orientation = 'Vertical';\n    if (this.yMin === this.yMax) {\n      this.yMax += 1;\n      this.yMin -= 1;\n    }\n    control.doubleModule.min = this.yMin;\n    control.doubleModule.max = this.yMax;\n    control.doubleModule.getActualRange(this.yAxis, control.bounds);\n    control.doubleModule.updateActualRange(this.yAxis, this.yAxis.actualRange.min, this.yAxis.actualRange.max, this.yAxis.actualRange.interval);\n    this.yAxis.actualRange.delta = this.yAxis.actualRange.max - this.yAxis.actualRange.min;\n    this.yAxis.visibleRange = this.yAxis.actualRange;\n  };\n  /**\n   * Process Light weight control.\n   *\n   * @param {RangeNavigator} control - RangeNavigator instance.\n   * @private\n   * @returns {void}\n   */\n  RangeSeries.prototype.renderSeries = function (control) {\n    var _this = this;\n    this.chartGroup = control.renderer.createGroup({\n      id: control.element.id + '_chart'\n    });\n    var colors = getSeriesColor(control.theme);\n    control.series.map(function (series, index) {\n      var isSeriesVisible = control.stockChart ? control.stockChart.series[index].visible : true;\n      if (isSeriesVisible) {\n        series.xAxis = _this.xAxis;\n        series.yAxis = _this.yAxis;\n        series.chart = control;\n        series.index = index;\n        series.xAxis.isInversed = control.enableRtl;\n        series.interior = series.fill || colors[index % colors.length];\n        _this.createSeriesElement(control, series, index);\n        if (series.xAxis.valueType === 'DateTimeCategory') {\n          for (var i = 0; i < series.points.length; i++) {\n            series.points[i].xValue = _this.xAxis.labels.indexOf(Date.parse(series.points[i].x.toString()).toString());\n          }\n        }\n        if (control[firstToLowerCase(series.type) + 'SeriesModule']) {\n          control[firstToLowerCase(series.type) + 'SeriesModule'].render(series, _this.xAxis, _this.yAxis, false);\n        } else {\n          control['line' + 'SeriesModule'].render(series, _this.xAxis, _this.yAxis, false);\n        }\n        _this.chartGroup.appendChild(series.seriesElement);\n        if ((series.animation.enable && animationMode !== 'Disable' || animationMode === 'Enable') && control.animateSeries) {\n          if (control[firstToLowerCase(series.type) + 'SeriesModule']) {\n            control[firstToLowerCase(series.type) + 'SeriesModule'].doAnimation(series);\n          } else {\n            //control['line' + 'SeriesModule'].doAnimation(series);\n          }\n        }\n      }\n    });\n  };\n  /**\n   * Append series elements in element.\n   *\n   * @param {RangeNavigator} control - The RangeNavigator control.\n   * @returns {void}\n   */\n  RangeSeries.prototype.appendSeriesElements = function (control) {\n    control.svgObject.appendChild(this.chartGroup);\n    if (control.series.length) {\n      this.drawSeriesBorder(control);\n    }\n  };\n  RangeSeries.prototype.createSeriesElement = function (control, series, index) {\n    var elementId = control.element.id;\n    series.clipRect = new Rect(this.xAxis.rect.x, this.yAxis.rect.y, this.xAxis.rect.width, this.yAxis.rect.height);\n    series.clipRectElement = control.renderer.drawClipPath(new RectOption(elementId + '_RangeSeriesClipRect_' + index, 'transparent', {\n      width: 1,\n      color: 'Gray'\n    }, 1, {\n      x: 0,\n      y: 0,\n      width: series.clipRect.width,\n      height: series.clipRect.height\n    }));\n    series.seriesElement = control.renderer.createGroup({\n      'id': elementId + 'SeriesGroup' + index,\n      'transform': 'translate(' + series.clipRect.x + ',' + series.clipRect.y + ')',\n      'clip-path': 'url(#' + elementId + '_RangeSeriesClipRect_' + index + ')'\n    });\n    series.seriesElement.appendChild(series.clipRectElement);\n  };\n  /**\n   * Calculate grouping bounds for x axis.\n   *\n   * @private\n   * @param {RangeNavigator} control - The RangeNavigator control.\n   * @returns {void}\n   */\n  RangeSeries.prototype.calculateGroupingBounds = function (control) {\n    var padding = control.margin.bottom;\n    var labelHeight = measureText('string', control.labelStyle, control.themeStyle.axisLabelFont).height;\n    var xMin = control.valueType === 'DateTimeCategory' ? parseInt(this.xAxis.labels[this.xMin], 10) : this.xMin;\n    var xMax = control.valueType === 'DateTimeCategory' ? parseInt(this.xAxis.labels[this.xMax], 10) : this.xMax;\n    this.calculateDateTimeNiceInterval(this.xAxis, new Size(control.bounds.width, control.bounds.height), xMin, xMax, false);\n    if (control.enableGrouping && (control.valueType === 'DateTime' || control.valueType === 'DateTimeCategory') && (this.xAxis.actualIntervalType !== 'Years' || !control.series.length)) {\n      control.bounds.height -= control.labelPosition === 'Outside' || control.series.length === 0 ? padding + labelHeight : labelHeight + 2 * padding;\n    }\n    if (!control.series.length) {\n      control.bounds.y += control.bounds.height / 4;\n      control.bounds.height = control.bounds.height / 2;\n    }\n  };\n  RangeSeries.prototype.drawSeriesBorder = function (control) {\n    var start = control.stockChart ? 'M' : 'L';\n    var close = control.stockChart ? '' : 'Z';\n    var options = new PathOption(control.element.id + '_SeriesBorder', 'transparent', control.navigatorBorder.width, control.navigatorBorder.color || (control.theme.indexOf('Dark') > -1 ? '#49454F' : '#DDDDDD'), 1, control.navigatorBorder.dashArray, 'M ' + control.bounds.x + ' ' + control.bounds.y + ' L ' + (control.bounds.x + control.bounds.width) + ' ' + control.bounds.y + start + (control.bounds.x + control.bounds.width) + ' ' + (control.bounds.y + control.bounds.height) + ' L ' + control.bounds.x + ' ' + (control.bounds.y + control.bounds.height) + close);\n    var htmlObject = control.renderer.drawPath(options);\n    control.svgObject.appendChild(htmlObject);\n  };\n  return RangeSeries;\n}(NiceInterval);\nexport { RangeSeries };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","firstToLowerCase","RectOption","NiceInterval","DataManager","DataUtil","DataPoint","animationMode","getValue","isNullOrUndefined","getSeriesColor","PathOption","Rect","measureText","Size","Data","RangeSeries","_super","range","_this","call","dataSource","xName","yName","query","xMin","Infinity","xMax","yMin","yMax","labels","indexLabels","renderChart","control","seriesLength","rangeSlider","points","series","length","map","processDataSource","dataManagerSuccess","result","count","dataModule","dataManager","getData","generateQuery","requiresCount","then","e","viewData","allowServerDataBinding","processJsonData","keys","processXAxis","calculateGroupingBounds","processYAxis","len","i","point","yValue","y","valueType","indexOf","dateParser","intl","getDateParser","skeleton","type","dateFormatter","getDateFormat","x","Date","parse","parseJson","val","xValue","toString","undefined","push","Math","min","max","axis","minimum","maximum","interval","isInversed","enableRtl","labelFormat","logBase","skeletonType","xAxis","intervalType","maximumLabels","intervalDivs","rect","bounds","visibleLabels","orientation","axisModule","getActualRange","updateActualRange","actualRange","delta","visibleRange","calculateVisibleLabels","periodSelectorModule","isDatetimeCategory","sortedData","label","parseInt","majorGridLines","width","rangePadding","majorTickLines","labelStyle","size","visible","yAxis","doubleModule","renderSeries","chartGroup","renderer","createGroup","id","element","colors","theme","index","isSeriesVisible","stockChart","chart","interior","fill","createSeriesElement","render","appendChild","seriesElement","animation","enable","animateSeries","doAnimation","appendSeriesElements","svgObject","drawSeriesBorder","elementId","clipRect","height","clipRectElement","drawClipPath","color","padding","margin","bottom","labelHeight","themeStyle","axisLabelFont","calculateDateTimeNiceInterval","enableGrouping","actualIntervalType","labelPosition","start","close","options","navigatorBorder","dashArray","htmlObject","drawPath"],"sources":["C:/Users/mkfun/Desktop/ct assignment/admin/node_modules/@syncfusion/ej2-charts/src/range-navigator/renderer/chart-render.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { firstToLowerCase, RectOption } from '../../common/utils/helper';\nimport { NiceInterval } from '../../chart/axis/axis-helper';\nimport { DataManager, DataUtil } from '@syncfusion/ej2-data';\nimport { DataPoint } from '../utils/helper';\nimport { animationMode, getValue, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { getSeriesColor } from '../../common/model/theme';\nimport { PathOption, Rect, measureText, Size } from '@syncfusion/ej2-svg-base';\nimport { Data } from '../../common/model/data';\n/**\n * To render Chart series\n */\nvar RangeSeries = /** @class */ (function (_super) {\n    __extends(RangeSeries, _super);\n    function RangeSeries(range) {\n        var _this = _super.call(this) || this;\n        _this.dataSource = range.dataSource;\n        _this.xName = range.xName;\n        _this.yName = range.yName;\n        _this.query = range.query;\n        _this.xMin = Infinity;\n        _this.xMax = -Infinity;\n        _this.yMin = Infinity;\n        _this.yMax = -Infinity;\n        _this.labels = [];\n        _this.indexLabels = {};\n        return _this;\n    }\n    /**\n     * To render light weight and data manager process.\n     *\n     * @param {RangeNavigator} control - RangeNavigator instance.\n     * @returns {void}\n     */\n    RangeSeries.prototype.renderChart = function (control) {\n        var _this = this;\n        var dataSource;\n        var query;\n        this.seriesLength = 0;\n        control.rangeSlider.points = [];\n        if (control.series.length) {\n            control.series.map(function (series) {\n                dataSource = series.dataSource || control.dataSource;\n                query = series.query || control.query;\n                series.points = [];\n                _this.processDataSource(dataSource, query, control, series);\n            });\n        }\n        else {\n            this.processDataSource(control.dataSource, control.query, control);\n        }\n    };\n    RangeSeries.prototype.processDataSource = function (dataSource, query, control, series) {\n        var _this = this;\n        if (!(dataSource instanceof DataManager) && !isNullOrUndefined(dataSource) && isNullOrUndefined(query)) {\n            this.dataManagerSuccess({ result: dataSource, count: dataSource.length }, control, series);\n            return;\n        }\n        control.dataModule = new Data(dataSource, query);\n        var dataManager = control.dataModule.getData(control.dataModule.generateQuery().requiresCount());\n        dataManager.then(function (e) { return _this.dataManagerSuccess(e, control, series); });\n    };\n    /**\n     * data manager process calculated here.\n     *\n     * @param {Object} e - The data manager result object.\n     * @param {Object} e.result - The result of the data manager process.\n     * @param {number} e.count - The count of items in the result.\n     * @param {RangeNavigator} control - The RangeNavigator control.\n     * @param {RangeNavigatorSeries} series - Optional parameter representing the series data.\n     * @returns {void}\n     */\n    RangeSeries.prototype.dataManagerSuccess = function (e, control, series) {\n        var viewData = e.count ? e.result : [];\n        control.allowServerDataBinding = false;\n        this.processJsonData(viewData, control, Object.keys(viewData).length, series);\n        this.seriesLength += series ? 1 : this.seriesLength;\n        if (!series || this.seriesLength === control.series.length) {\n            this.processXAxis(control);\n            this.calculateGroupingBounds(control);\n            this.processYAxis(control);\n            control.renderChart();\n        }\n    };\n    /**\n     * Process JSON data from data source.\n     *\n     * @param {Object[]} viewData - The data array to be processed.\n     * @param {RangeNavigator} control - The RangeNavigator control.\n     * @param {number} len - The length of the data array.\n     * @param {RangeNavigatorSeries} series - The series data for the RangeNavigator control.\n     * @returns {void}\n     */\n    RangeSeries.prototype.processJsonData = function (viewData, control, len, series) {\n        var i = 0;\n        var point;\n        var xName = (series && series.xName) || control.xName;\n        var yName = (series && series.yName) || control.yName;\n        while (i < len) {\n            point = new DataPoint(getValue(xName, viewData[i]), getValue(yName, viewData[i]));\n            point.yValue = +point.y;\n            if (control.valueType.indexOf('DateTime') > -1) {\n                var dateParser = control.intl.getDateParser({ skeleton: 'full', type: 'dateTime' });\n                var dateFormatter = control.intl.getDateFormat({ skeleton: 'full', type: 'dateTime' });\n                point.x = new Date(DataUtil.parse.parseJson({ val: point.x }).val);\n                point.xValue = Date.parse(dateParser(dateFormatter(point.x)));\n                if (control.valueType === 'DateTimeCategory') {\n                    if (this.indexLabels[point.xValue.toString()] === undefined) {\n                        this.indexLabels[point.xValue.toString()] = this.labels.length;\n                        this.labels.push(point.xValue.toString());\n                    }\n                    point.xValue = this.indexLabels[point.xValue];\n                }\n            }\n            else {\n                point.xValue = +point.x;\n            }\n            if (series) {\n                series.points.push(point);\n            }\n            this.xMin = Math.min(this.xMin, point.xValue);\n            this.yMin = Math.min(this.yMin, point.yValue);\n            this.xMax = Math.max(this.xMax, point.xValue);\n            this.yMax = Math.max(this.yMax, point.yValue);\n            control.rangeSlider.points.push(point);\n            i++;\n        }\n    };\n    /**\n     * Process x axis for range navigator.\n     *\n     * @private\n     * @param {RangeNavigator} control - The RangeNavigator control.\n     * @returns {void}\n     */\n    RangeSeries.prototype.processXAxis = function (control) {\n        var axis = {\n            minimum: control.minimum, maximum: control.maximum,\n            interval: control.interval, valueType: control.valueType,\n            isInversed: control.enableRtl, labelFormat: control.labelFormat,\n            logBase: control.logBase, skeleton: control.skeleton, skeletonType: control.skeletonType\n        };\n        this.xAxis = axis;\n        this.xAxis.intervalType = control.intervalType;\n        this.xAxis.maximumLabels = 3;\n        this.xAxis.skeleton = control.skeleton;\n        this.xAxis.intervalDivs = [10, 5, 2, 1];\n        this.xAxis.rect = control.bounds;\n        this.xAxis.visibleLabels = [];\n        this.xAxis.orientation = 'Horizontal';\n        this.xAxis.labels = this.labels;\n        this.xAxis.indexLabels = this.indexLabels;\n        var axisModule = control[firstToLowerCase(control.valueType) + 'Module'];\n        axisModule.min = this.xMin;\n        axisModule.max = this.xMax;\n        axisModule.getActualRange(this.xAxis, control.bounds);\n        if (this.xAxis.valueType === 'Double' || this.xAxis.valueType === 'DateTime' || this.xAxis.valueType === 'DateTimeCategory') {\n            axisModule.updateActualRange(this.xAxis, this.xAxis.actualRange.min, this.xAxis.actualRange.max, this.xAxis.actualRange.interval);\n        }\n        this.xAxis.actualRange.delta = this.xAxis.actualRange.max - this.xAxis.actualRange.min;\n        this.xAxis.visibleRange = this.xAxis.actualRange;\n        axisModule.calculateVisibleLabels(this.xAxis, control);\n        if (this.xAxis.valueType === 'DateTimeCategory' && control.periodSelectorModule) {\n            control.periodSelectorModule.isDatetimeCategory = true;\n            control.periodSelectorModule.sortedData = this.labels.map(function (label) { return parseInt(label, 10); });\n        }\n    };\n    /**\n     * Process yAxis for range navigator.\n     *\n     * @param {RangeNavigator} control - RangeNavigator instance.\n     * @private\n     * @returns {void}\n     */\n    RangeSeries.prototype.processYAxis = function (control) {\n        var axis = {\n            majorGridLines: { width: 0 }, rangePadding: 'None',\n            majorTickLines: { width: 0 }, labelStyle: { size: '0' },\n            visible: false, valueType: 'Double', minimum: null, maximum: null,\n            interval: null\n        };\n        this.yAxis = axis;\n        this.yAxis.rect = control.bounds;\n        this.yAxis.maximumLabels = 3;\n        this.yAxis.intervalDivs = [10, 5, 2, 1];\n        this.yAxis.orientation = 'Vertical';\n        if (this.yMin === this.yMax) {\n            this.yMax += 1;\n            this.yMin -= 1;\n        }\n        control.doubleModule.min = this.yMin;\n        control.doubleModule.max = this.yMax;\n        control.doubleModule.getActualRange(this.yAxis, control.bounds);\n        control.doubleModule.updateActualRange(this.yAxis, this.yAxis.actualRange.min, this.yAxis.actualRange.max, this.yAxis.actualRange.interval);\n        this.yAxis.actualRange.delta = this.yAxis.actualRange.max - this.yAxis.actualRange.min;\n        this.yAxis.visibleRange = this.yAxis.actualRange;\n    };\n    /**\n     * Process Light weight control.\n     *\n     * @param {RangeNavigator} control - RangeNavigator instance.\n     * @private\n     * @returns {void}\n     */\n    RangeSeries.prototype.renderSeries = function (control) {\n        var _this = this;\n        this.chartGroup = control.renderer.createGroup({ id: control.element.id + '_chart' });\n        var colors = getSeriesColor(control.theme);\n        control.series.map(function (series, index) {\n            var isSeriesVisible = control.stockChart ? control.stockChart.series[index].visible : true;\n            if (isSeriesVisible) {\n                series.xAxis = _this.xAxis;\n                series.yAxis = _this.yAxis;\n                series.chart = control;\n                series.index = index;\n                series.xAxis.isInversed = control.enableRtl;\n                series.interior = series.fill || colors[index % colors.length];\n                _this.createSeriesElement(control, series, index);\n                if (series.xAxis.valueType === 'DateTimeCategory') {\n                    for (var i = 0; i < series.points.length; i++) {\n                        series.points[i].xValue =\n                            _this.xAxis.labels.indexOf(Date.parse(series.points[i].x.toString()).toString());\n                    }\n                }\n                if (control[firstToLowerCase(series.type) + 'SeriesModule']) {\n                    control[firstToLowerCase(series.type) + 'SeriesModule'].render(series, _this.xAxis, _this.yAxis, false);\n                }\n                else {\n                    control['line' + 'SeriesModule'].render(series, _this.xAxis, _this.yAxis, false);\n                }\n                _this.chartGroup.appendChild(series.seriesElement);\n                if (((series.animation.enable && animationMode !== 'Disable') || animationMode === 'Enable') && control.animateSeries) {\n                    if (control[firstToLowerCase(series.type) + 'SeriesModule']) {\n                        control[firstToLowerCase(series.type) + 'SeriesModule'].doAnimation(series);\n                    }\n                    else {\n                        //control['line' + 'SeriesModule'].doAnimation(series);\n                    }\n                }\n            }\n        });\n    };\n    /**\n     * Append series elements in element.\n     *\n     * @param {RangeNavigator} control - The RangeNavigator control.\n     * @returns {void}\n     */\n    RangeSeries.prototype.appendSeriesElements = function (control) {\n        control.svgObject.appendChild(this.chartGroup);\n        if (control.series.length) {\n            this.drawSeriesBorder(control);\n        }\n    };\n    RangeSeries.prototype.createSeriesElement = function (control, series, index) {\n        var elementId = control.element.id;\n        series.clipRect = new Rect(this.xAxis.rect.x, this.yAxis.rect.y, this.xAxis.rect.width, this.yAxis.rect.height);\n        series.clipRectElement = control.renderer.drawClipPath(new RectOption(elementId + '_RangeSeriesClipRect_' + index, 'transparent', { width: 1, color: 'Gray' }, 1, {\n            x: 0, y: 0,\n            width: series.clipRect.width,\n            height: series.clipRect.height\n        }));\n        series.seriesElement = control.renderer.createGroup({\n            'id': elementId + 'SeriesGroup' + index,\n            'transform': 'translate(' + series.clipRect.x + ',' + (series.clipRect.y) + ')',\n            'clip-path': 'url(#' + elementId + '_RangeSeriesClipRect_' + index + ')'\n        });\n        series.seriesElement.appendChild(series.clipRectElement);\n    };\n    /**\n     * Calculate grouping bounds for x axis.\n     *\n     * @private\n     * @param {RangeNavigator} control - The RangeNavigator control.\n     * @returns {void}\n     */\n    RangeSeries.prototype.calculateGroupingBounds = function (control) {\n        var padding = control.margin.bottom;\n        var labelHeight = measureText('string', control.labelStyle, control.themeStyle.axisLabelFont).height;\n        var xMin = control.valueType === 'DateTimeCategory' ? parseInt(this.xAxis.labels[this.xMin], 10) : this.xMin;\n        var xMax = control.valueType === 'DateTimeCategory' ? parseInt(this.xAxis.labels[this.xMax], 10) : this.xMax;\n        this.calculateDateTimeNiceInterval(this.xAxis, new Size(control.bounds.width, control.bounds.height), xMin, xMax, false);\n        if (control.enableGrouping && (control.valueType === 'DateTime' || control.valueType === 'DateTimeCategory')\n            && (this.xAxis.actualIntervalType !== 'Years' || !control.series.length)) {\n            control.bounds.height -= (control.labelPosition === 'Outside' || control.series.length === 0) ? padding + labelHeight :\n                (labelHeight + 2 * padding);\n        }\n        if (!control.series.length) {\n            control.bounds.y += control.bounds.height / 4;\n            control.bounds.height = control.bounds.height / 2;\n        }\n    };\n    RangeSeries.prototype.drawSeriesBorder = function (control) {\n        var start = control.stockChart ? 'M' : 'L';\n        var close = control.stockChart ? '' : 'Z';\n        var options = new PathOption(control.element.id + '_SeriesBorder', 'transparent', control.navigatorBorder.width, control.navigatorBorder.color || (control.theme.indexOf('Dark') > -1 ? '#49454F' : '#DDDDDD'), 1, control.navigatorBorder.dashArray, ('M ' + (control.bounds.x) + ' ' + (control.bounds.y) +\n            ' L ' + (control.bounds.x + control.bounds.width) + ' ' + control.bounds.y +\n            start + (control.bounds.x + control.bounds.width) + ' ' + (control.bounds.y + control.bounds.height) +\n            ' L ' + (control.bounds.x) + ' ' + (control.bounds.y + control.bounds.height) + close));\n        var htmlObject = control.renderer.drawPath(options);\n        control.svgObject.appendChild(htmlObject);\n    };\n    return RangeSeries;\n}(NiceInterval));\nexport { RangeSeries };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}