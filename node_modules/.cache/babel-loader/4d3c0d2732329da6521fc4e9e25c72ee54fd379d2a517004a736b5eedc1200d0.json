{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * Circular 3D chart legend.\n */\nimport { Browser, isNullOrUndefined, Animation, Property, Complex, ChildProperty } from '@syncfusion/ej2-base';\nimport { Border, ContainerPadding, Font, Margin } from '../../common/model/base';\nimport { BaseLegend, LegendOptions } from '../../common/legend/legend';\nimport { Rect, measureText } from '@syncfusion/ej2-svg-base';\nimport { textTrim, getElement } from '../../common/utils/helper';\nimport { textWrap } from '../../common/utils/helper';\nimport { legendClick } from '../../common/model/constants';\nimport { Location } from '../../common/model/base';\n/**\n * Configures the legends in circular 3D charts.\n */\nvar CircularChart3DLegendSettings = /** @class */function (_super) {\n  __extends(CircularChart3DLegendSettings, _super);\n  function CircularChart3DLegendSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  __decorate([Property(true)], CircularChart3DLegendSettings.prototype, \"visible\", void 0);\n  __decorate([Property(null)], CircularChart3DLegendSettings.prototype, \"height\", void 0);\n  __decorate([Property(null)], CircularChart3DLegendSettings.prototype, \"width\", void 0);\n  __decorate([Complex({\n    x: 0,\n    y: 0\n  }, Location)], CircularChart3DLegendSettings.prototype, \"location\", void 0);\n  __decorate([Property('Auto')], CircularChart3DLegendSettings.prototype, \"position\", void 0);\n  __decorate([Property(8)], CircularChart3DLegendSettings.prototype, \"padding\", void 0);\n  __decorate([Property(null)], CircularChart3DLegendSettings.prototype, \"itemPadding\", void 0);\n  __decorate([Property('Center')], CircularChart3DLegendSettings.prototype, \"alignment\", void 0);\n  __decorate([Complex({\n    fontFamily: null,\n    size: null,\n    fontStyle: null,\n    fontWeight: null,\n    color: null\n  }, Font)], CircularChart3DLegendSettings.prototype, \"textStyle\", void 0);\n  __decorate([Property(10)], CircularChart3DLegendSettings.prototype, \"shapeHeight\", void 0);\n  __decorate([Property(10)], CircularChart3DLegendSettings.prototype, \"shapeWidth\", void 0);\n  __decorate([Complex({}, Border)], CircularChart3DLegendSettings.prototype, \"border\", void 0);\n  __decorate([Complex({\n    left: 0,\n    right: 0,\n    top: 0,\n    bottom: 0\n  }, Margin)], CircularChart3DLegendSettings.prototype, \"margin\", void 0);\n  __decorate([Complex({\n    left: 0,\n    right: 0,\n    top: 0,\n    bottom: 0\n  }, ContainerPadding)], CircularChart3DLegendSettings.prototype, \"containerPadding\", void 0);\n  __decorate([Property(8)], CircularChart3DLegendSettings.prototype, \"shapePadding\", void 0);\n  __decorate([Property('transparent')], CircularChart3DLegendSettings.prototype, \"background\", void 0);\n  __decorate([Property(1)], CircularChart3DLegendSettings.prototype, \"opacity\", void 0);\n  __decorate([Property(true)], CircularChart3DLegendSettings.prototype, \"toggleVisibility\", void 0);\n  __decorate([Property(false)], CircularChart3DLegendSettings.prototype, \"enableHighlight\", void 0);\n  __decorate([Property(null)], CircularChart3DLegendSettings.prototype, \"description\", void 0);\n  __decorate([Property(3)], CircularChart3DLegendSettings.prototype, \"tabIndex\", void 0);\n  __decorate([Property(null)], CircularChart3DLegendSettings.prototype, \"title\", void 0);\n  __decorate([Complex({\n    fontFamily: null,\n    size: null,\n    fontStyle: null,\n    fontWeight: null,\n    color: null\n  }, Font)], CircularChart3DLegendSettings.prototype, \"titleStyle\", void 0);\n  __decorate([Property('Top')], CircularChart3DLegendSettings.prototype, \"titlePosition\", void 0);\n  __decorate([Property('Normal')], CircularChart3DLegendSettings.prototype, \"textWrap\", void 0);\n  __decorate([Property('Ellipsis')], CircularChart3DLegendSettings.prototype, \"textOverflow\", void 0);\n  __decorate([Property(100)], CircularChart3DLegendSettings.prototype, \"maximumTitleWidth\", void 0);\n  __decorate([Property(null)], CircularChart3DLegendSettings.prototype, \"maximumLabelWidth\", void 0);\n  __decorate([Property(true)], CircularChart3DLegendSettings.prototype, \"enablePages\", void 0);\n  __decorate([Property(false)], CircularChart3DLegendSettings.prototype, \"isInversed\", void 0);\n  __decorate([Property(false)], CircularChart3DLegendSettings.prototype, \"reverse\", void 0);\n  return CircularChart3DLegendSettings;\n}(ChildProperty);\nexport { CircularChart3DLegendSettings };\n/**\n * The `CircularChartLegend3D` module used to render the legend for a circular 3D chart.\n */\nvar CircularChartLegend3D = /** @class */function (_super) {\n  __extends(CircularChartLegend3D, _super);\n  /**\n   * Constructor for CircularChart3D legend.\n   *\n   * @param {CircularChart3D} chart - The chart instance to which the legend belongs.\n   */\n  function CircularChartLegend3D(chart) {\n    var _this = _super.call(this, chart) || this;\n    _this.library = _this;\n    _this.titleRect = new Rect(0, chart.margin.top, 0, 0);\n    _this.addEventListener();\n    return _this;\n  }\n  /**\n   * Binds events for the legend module.\n   *\n   * @returns {void}\n   */\n  CircularChartLegend3D.prototype.addEventListener = function () {\n    if (this.chart.isDestroyed) {\n      return;\n    }\n    this.chart.on(Browser.touchMoveEvent, this.mouseMove, this);\n    this.chart.on(Browser.touchEndEvent, this.mouseEnd, this);\n    this.chart.on('click', this.click, this);\n  };\n  /**\n   * Unbinds events for the legend module.\n   *\n   * @returns {void}\n   */\n  CircularChartLegend3D.prototype.removeEventListener = function () {\n    if (this.chart.isDestroyed) {\n      return;\n    }\n    this.chart.off(Browser.touchMoveEvent, this.mouseMove);\n    this.chart.off('click', this.click);\n    this.chart.off(Browser.touchEndEvent, this.mouseEnd);\n  };\n  /**\n   * Handles mouse movement for the legend module.\n   *\n   * @param {MouseEvent} e - The mouse event.\n   * @returns {void}\n   */\n  CircularChartLegend3D.prototype.mouseMove = function (e) {\n    if (this.chart.legendSettings.visible && !this.chart.isTouch) {\n      this.move(e);\n      if (this.chart.circularChartHighlight3DModule && (this.chart.highlightMode !== 'None' || this.chart.legendSettings.enableHighlight)) {\n        var legendItemsId = [this.legendID + '_text_', this.legendID + '_shape_marker_', this.legendID + '_shape_', this.legendID + '_g_'];\n        var targetId = e.target.id;\n        for (var _i = 0, legendItemsId_1 = legendItemsId; _i < legendItemsId_1.length; _i++) {\n          var id = legendItemsId_1[_i];\n          if (targetId.indexOf(id) > -1) {\n            if (this.chart.circularChartSelection3DModule) {\n              this.chart.circularChartSelection3DModule.legendSelection(this.chart, e.target, e.type);\n            } else if (this.chart.circularChartHighlight3DModule) {\n              this.chart.circularChartHighlight3DModule.legendSelection(this.chart, e.target, e.type);\n            }\n            break;\n          }\n        }\n      }\n    }\n  };\n  /**\n   * Handles mouse end for the legend module.\n   *\n   * @param {MouseEvent} e - The mouse event.\n   * @returns {void}\n   */\n  CircularChartLegend3D.prototype.mouseEnd = function (e) {\n    if (this.chart.legendSettings.visible && this.chart.isTouch) {\n      this.move(e);\n    }\n  };\n  /**\n   * Retrieves the legend options for the circular 3D chart.\n   *\n   * @param {CircularChart3D} chart - The circular 3D chart instance.\n   * @param {CircularChart3DSeries[]} series - The array of circular 3D series in the chart.\n   * @returns {void}\n   * @private\n   */\n  CircularChartLegend3D.prototype.getLegendOptions = function (chart, series) {\n    this.legendCollections = [];\n    this.isRtlEnable = chart.enableRtl;\n    this.isReverse = !this.isRtlEnable && chart.legendSettings.reverse;\n    for (var i = 0; i < 1; i++) {\n      for (var _i = 0, _a = series[i].points; _i < _a.length; _i++) {\n        var point = _a[_i];\n        if (!isNullOrUndefined(point.x) && !isNullOrUndefined(point.y)) {\n          this.legendCollections.push(new LegendOptions(point.x.toString(), point.color, series[i].legendShape, point.visible, 'Pie', series[0].legendImageUrl, null, null, point.index, series[i].index));\n        }\n      }\n      if (this.isReverse) {\n        this.legendCollections.reverse();\n      }\n    }\n  };\n  /**\n   * Calculates the legend bounds based on the available size, existing legend bounds, and legend settings.\n   *\n   * @param {Size} availableSize - The available size for the legend.\n   * @param {Rect} legendBounds - The existing bounds of the legend.\n   * @param {LegendSettingsModel} legend - The legend settings model.\n   * @returns {void}\n   * @private\n   */\n  CircularChartLegend3D.prototype.getLegendBounds = function (availableSize, legendBounds, legend) {\n    this.calculateLegendTitle(legend, legendBounds);\n    this.isTitle = legend.title ? true : false;\n    var extraWidth = 0;\n    var extraHeight = 0;\n    var legendOption;\n    this.chartRowCount = 1;\n    this.rowHeights = [];\n    this.columnHeights = [];\n    this.pageHeights = [];\n    var padding = legend.padding;\n    var titlePosition = legend.titlePosition;\n    var titlePlusArrowSpace = 0;\n    var arrowWidth = this.arrowWidth;\n    var arrowHeight = legend.enablePages ? 0 : this.arrowHeight;\n    if (!this.isVertical) {\n      extraHeight = !legend.height ? availableSize.height / 100 * 5 : 0;\n    } else {\n      extraWidth = !legend.width ? availableSize.width / 100 * 5 : 0;\n    }\n    legendBounds.width += extraWidth;\n    legendBounds.height += extraHeight;\n    var shapePadding = legend.shapePadding;\n    var maximumWidth = legend.maximumLabelWidth ? legend.maximumLabelWidth : 0;\n    var shapeWidth = legend.shapeWidth;\n    var rowWidth = 0;\n    var columnCount = 0;\n    var rowCount = 0;\n    var columnWidth = [];\n    var pageWidth = [];\n    var pageRowWidth = 0;\n    var previousRowCount = 0;\n    var columnHeight = 0;\n    var legendWidth = 0;\n    var titleHeight = 0;\n    this.maxItemHeight = Math.max(measureText('MeasureText', legend.textStyle, this.chart.themeStyle.legendLabelFont).height, legend.shapeHeight);\n    var legendEventArgs;\n    var render = false;\n    for (var i = 0; i < this.legendCollections.length; i++) {\n      legendOption = this.legendCollections[i];\n      legendEventArgs = {\n        fill: legendOption.fill,\n        text: legendOption.text,\n        shape: legendOption.shape,\n        name: 'legendRender',\n        cancel: false\n      };\n      this.chart.trigger('legendRender', legendEventArgs);\n      legendOption.render = !legendEventArgs.cancel;\n      legendOption.text = legendEventArgs.text.indexOf('&') > -1 ? this.convertHtmlEntities(legendEventArgs.text) : legendEventArgs.text;\n      legendOption.fill = legendEventArgs.fill;\n      legendOption.shape = legendEventArgs.shape;\n      legendOption.textSize = measureText(legendOption.text, legend.textStyle, this.chart.themeStyle.legendLabelFont);\n      if (legendOption.render && legendOption.text !== '') {\n        render = true;\n        legendWidth = shapeWidth + shapePadding + (legend.maximumLabelWidth ? legend.maximumLabelWidth : legendOption.textSize.width) + (!this.isVertical ? i === 0 ? padding : this.itemPadding : padding);\n        this.getLegendHeight(legendOption, legend, legendBounds, rowWidth, this.maxItemHeight, padding);\n        if (this.isVertical) {\n          columnHeight += legendOption.textSize.height + (i === 0 ? padding : this.itemPadding);\n          if (columnHeight + this.itemPadding + arrowHeight / this.pageButtonSize > legendBounds.height) {\n            rowWidth = rowWidth + maximumWidth;\n            pageRowWidth = this.getPageWidth(pageWidth);\n            this.totalPages = Math.max(rowCount, this.totalPages || 1);\n            if (rowWidth - pageRowWidth + legendWidth > legendBounds.width) {\n              pageWidth.push(rowWidth - pageRowWidth);\n              rowCount = this.rowHeights.length;\n              previousRowCount = rowCount;\n            } else {\n              rowCount = previousRowCount;\n            }\n            columnWidth.push(maximumWidth);\n            maximumWidth = 0;\n            columnHeight = legendOption.textSize.height + padding;\n            columnCount++;\n          }\n          this.columnHeights[columnCount] = (this.columnHeights[columnCount] ? this.columnHeights[columnCount] : 0) + legendOption.textSize.height + (i === 0 ? padding : this.itemPadding);\n          maximumWidth = Math.max(legendWidth, maximumWidth);\n          this.rowHeights[rowCount] = Math.max(this.rowHeights[rowCount] ? this.rowHeights[rowCount] : 0, legendOption.textSize.height);\n          rowCount++;\n        } else {\n          if (!legend.enablePages) {\n            // For new legend navigation support\n            titlePlusArrowSpace = this.isTitle && titlePosition !== 'Top' ? this.legendTitleSize.width + this.fivePixel : 0;\n            titlePlusArrowSpace += arrowWidth;\n          }\n          rowWidth = rowWidth + legendWidth;\n          if (legendBounds.width < padding + rowWidth + titlePlusArrowSpace) {\n            maximumWidth = Math.max(maximumWidth, rowWidth + padding + titlePlusArrowSpace - legendWidth);\n            if (rowCount === 0 && legendWidth !== rowWidth) {\n              rowCount = 1;\n            }\n            rowWidth = legendWidth;\n            rowCount++;\n            columnCount = 0;\n          }\n          var len = rowCount ? rowCount - 1 : rowCount;\n          this.rowHeights[len] = Math.max(this.rowHeights[len] ? this.rowHeights[len] : 0, legendOption.textSize.height);\n          this.columnHeights[columnCount] = (this.columnHeights[columnCount] ? this.columnHeights[columnCount] : 0) + legendOption.textSize.height + padding;\n          columnCount++;\n        }\n      }\n    }\n    titleHeight = titlePosition === 'Top' ? this.legendTitleSize.height : 0;\n    if (this.isVertical) {\n      rowWidth = rowWidth + maximumWidth;\n      this.isPaging = legendBounds.width < rowWidth + padding;\n      columnHeight = Math.max.apply(null, this.columnHeights) + padding + arrowHeight + titleHeight;\n      columnHeight = Math.max(columnHeight, (this.totalPages || 1) * (this.maxItemHeight + padding) + padding + arrowHeight);\n      this.isPaging = this.isPaging && this.totalPages > 1;\n      columnWidth.push(maximumWidth);\n    } else {\n      this.totalPages = rowCount;\n      columnHeight = Math.max.apply(null, this.columnHeights) + padding + arrowHeight + titleHeight;\n      this.isPaging = legendBounds.height < columnHeight;\n      columnHeight = !legend.enablePages && this.isPaging ? this.maxItemHeight + padding + padding + titleHeight : columnHeight;\n      columnHeight = Math.max(columnHeight, this.maxItemHeight + padding + padding + titleHeight);\n      if (!this.isPaging) {\n        // For title left and right position\n        rowWidth += this.isTitle && titlePosition !== 'Top' ? this.fivePixel + this.legendTitleSize.width + this.fivePixel : 0;\n      }\n    }\n    this.maxColumns = 0; // initialization for max columns\n    var width = this.isVertical ? this.getMaxColumn(columnWidth, legendBounds.width, padding, rowWidth + padding) : Math.max(rowWidth + padding, maximumWidth);\n    if (render) {\n      // if any legends not skipped in event check\n      this.setBounds(width, columnHeight, legend, legendBounds);\n    } else {\n      this.setBounds(0, 0, legend, legendBounds);\n    }\n  };\n  /**\n   * Calculates the total width by summing up the values in the provided array of page widths.\n   *\n   * @param {number[]} pageWidth - An array containing individual page widths.\n   * @returns {number} - The total width calculated as the sum of page widths.\n   * @private\n   */\n  CircularChartLegend3D.prototype.getPageWidth = function (pageWidth) {\n    var sum = 0;\n    for (var i = 0; i < pageWidth.length; i++) {\n      sum += pageWidth[i];\n    }\n    return sum;\n  };\n  /**\n   * Calculates the legend height based on the provided legend options, legend settings, bounds, row width,\n   * legend height, and padding values.\n   *\n   * @param {LegendOptions} option - The legend options containing necessary information.\n   * @param {LegendSettingsModel} legend - The legend settings model.\n   * @param {Rect} bounds - The bounds of the legend.\n   * @param {number} rowWidth - The width of the legend row.\n   * @param {number} legendHeight - The height of the legend.\n   * @param {number} padding - The padding value for additional space.\n   * @returns {void}\n   * @private\n   */\n  CircularChartLegend3D.prototype.getLegendHeight = function (option, legend, bounds, rowWidth, legendHeight, padding) {\n    var legendWidth = option.textSize.width;\n    var textPadding = legend.shapePadding + padding * 2 + legend.shapeWidth;\n    switch (legend.textWrap) {\n      case 'Wrap':\n      case 'AnyWhere':\n        if (legendWidth > legend.maximumLabelWidth || legendWidth + rowWidth > bounds.width) {\n          option.textCollection = textWrap(option.text, legend.maximumLabelWidth ? Math.min(legend.maximumLabelWidth, bounds.width - textPadding) : bounds.width - textPadding, legend.textStyle, this.chart.enableRtl, null, null, this.chart.themeStyle.legendLabelFont);\n        } else {\n          option.textCollection.push(option.text);\n        }\n        option.textSize.height = legendHeight * option.textCollection.length;\n        break;\n    }\n  };\n  /**\n   * Converts HTML entities in the given legend text to their corresponding normal string values.\n   *\n   * @param {string} legendText - The legend text containing HTML entities.\n   * @returns {string} - The string with HTML entities converted to their normal values.\n   * @private\n   */\n  CircularChartLegend3D.prototype.convertHtmlEntities = function (legendText) {\n    var text = legendText.replace('&amp;', '&').replace('&lt;', '<').replace('&gt;', '>').replace('&quot;', '\"').replace('&nbsp;', ' ').replace('&cent;', '¢').replace('&pound;', '£').replace('&yen;', '¥').replace('&euro;', '€').replace('&copy;', '©').replace('&reg;', '®');\n    text = text.replace('&#38;', '&').replace('&#60;', '<').replace('&#62;', '>').replace('&#34;', '\"').replace('&#160;', ' ').replace('&#162;', '¢').replace('&#163;', '£').replace('&#165;', '¥').replace('&#8364;', '€').replace('&#169;', '©').replace('&#174;', '®');\n    return text;\n  };\n  /**\n   * Retrieves the maximum column value for a given set of columns based on the specified width, padding, and row width.\n   *\n   * @param {number[]} columns - The array of column values to find the maximum from.\n   * @param {number} width - The width parameter used in the calculation.\n   * @param {number} padding - The padding value for additional space.\n   * @param {number} rowWidth - The width of the legend row.\n   * @returns {number} - The maximum column value calculated from the provided array.\n   * @private\n   */\n  CircularChartLegend3D.prototype.getMaxColumn = function (columns, width, padding, rowWidth) {\n    var maxPageColumn = padding;\n    this.maxColumnWidth = Math.max.apply(null, columns);\n    for (var i = 0; i < columns.length; i++) {\n      maxPageColumn += this.maxColumnWidth;\n      this.maxColumns++;\n      if (maxPageColumn + padding > width) {\n        maxPageColumn -= this.maxColumnWidth;\n        this.maxColumns--;\n        break;\n      }\n    }\n    this.isPaging = maxPageColumn < rowWidth && this.totalPages > 1;\n    if (maxPageColumn === padding) {\n      maxPageColumn = width;\n    }\n    this.maxColumns = Math.max(1, this.maxColumns);\n    this.maxWidth = maxPageColumn;\n    var columnWidth = this.maxColumnWidth + padding;\n    var prevPage = 0;\n    var columnCount = this.columnHeights.length;\n    if (this.isPaging && this.isVertical) {\n      for (var i = 1; i < columnCount; i++) {\n        columnWidth += this.maxColumnWidth + padding;\n        if (columnWidth > width) {\n          this.pageHeights.push(prevPage !== i - 1 ? Math.max.apply(null, this.columnHeights.slice(prevPage, i - 1)) : this.columnHeights[prevPage]);\n          columnWidth = this.maxColumnWidth + padding;\n          prevPage = i;\n        }\n      }\n      this.pageHeights.push(prevPage !== columnCount - 1 ? Math.max.apply(null, this.columnHeights.slice(prevPage, columnCount - 1)) : this.columnHeights[prevPage]);\n      this.totalPages = this.pageHeights.length;\n    }\n    return maxPageColumn;\n  };\n  /**\n   * Calculates the available width from the legend's x position.\n   *\n   * @param {number} tx - The x position of the legend.\n   * @param {number} width - The width of the legend.\n   * @returns {number} - The available width of the legend.\n   */\n  CircularChartLegend3D.prototype.getAvailWidth = function (tx, width) {\n    if (this.isVertical) {\n      width = this.maxWidth;\n    } else if (!this.isVertical && this.isPaging && !this.legend.enablePages) {\n      return width - tx - this.fivePixel;\n    }\n    return width - (this.legend.padding * 2 + this.legend.shapeWidth + this.legend.shapePadding);\n  };\n  /**\n   * Determines the legend rendering locations from legend items.\n   *\n   * @param {LegendOptions} legendOption - The current legend option.\n   * @param {ChartLocation} start - The start location of the legend.\n   * @param {number} textPadding - The text padding of the legend text.\n   * @param {LegendOptions} prevLegend - The previous legend option.\n   * @param {Rect} rect - The legend bounds.\n   * @param {number} count - The legend index.\n   * @param {number} firstLegend - The current legend location.\n   * @returns {void}\n   * @private\n   */\n  CircularChartLegend3D.prototype.getRenderPoint = function (legendOption, start, textPadding, prevLegend, rect, count, firstLegend) {\n    var padding = this.legend.padding;\n    var previousLocation = prevLegend.location.y + this.maxItemHeight / 4 + (prevLegend.textCollection.length > 0 ? (prevLegend.textCollection.length - 1) * this.maxItemHeight : 0);\n    if (this.isVertical) {\n      if (count === firstLegend || previousLocation + legendOption.textSize.height + padding > rect.y + rect.height) {\n        legendOption.location.x = prevLegend.location.x + (count === firstLegend ? 0 : !this.isRtlEnable ? this.maxColumnWidth : -this.maxColumnWidth);\n        legendOption.location.y = start.y;\n        var textStartLoc = this.legend.shapeWidth / 2 + padding;\n        this.pageXCollections.push(legendOption.location.x + (!this.isRtlEnable ? -textStartLoc : textStartLoc));\n      } else {\n        legendOption.location.x = prevLegend.location.x;\n        legendOption.location.y = prevLegend.location.y + prevLegend.textSize.height + this.itemPadding;\n      }\n    } else {\n      var textWidth = textPadding + (this.legend.maximumLabelWidth ? this.legend.maximumLabelWidth : prevLegend.textSize.width);\n      var previousBound = prevLegend.location.x + (!this.isRtlEnable ? textWidth : -textWidth);\n      if (this.isWithinBounds(previousBound, (this.legend.maximumLabelWidth ? this.legend.maximumLabelWidth : legendOption.textSize.width) + textPadding - this.itemPadding, rect, this.legend.shapeWidth / 2)) {\n        if (count !== firstLegend) {\n          this.chartRowCount++;\n        }\n        legendOption.location.y = count === firstLegend ? prevLegend.location.y : prevLegend.location.y + this.rowHeights[this.chartRowCount - 2] + padding;\n        legendOption.location.x = start.x;\n      } else {\n        legendOption.location.y = prevLegend.location.y;\n        legendOption.location.x = count === firstLegend ? prevLegend.location.x : previousBound;\n      }\n    }\n    var availablewidth = this.getAvailWidth(legendOption.location.x, this.legendBounds.width);\n    availablewidth = this.legend.maximumLabelWidth ? Math.min(this.legend.maximumLabelWidth, availablewidth) : availablewidth;\n    if (this.legend.textOverflow === 'Ellipsis' && this.legend.textWrap === 'Normal') {\n      legendOption.text = textTrim(+availablewidth.toFixed(4), legendOption.text, this.legend.textStyle, this.chart.enableRtl, this.chart.themeStyle.legendLabelFont);\n    }\n  };\n  /**\n   * Checks whether the legend group is within the specified legend bounds, considering RTL (Right-to-Left) rendering.\n   *\n   * @param {number} previousBound - The previous legend bound value.\n   * @param {number} textWidth - The width of the legend text.\n   * @param {Rect} legendBounds - The bounds of the legend.\n   * @param {number} shapeWidth - The width of the legend shape.\n   * @returns {boolean} - Returns true if the legend group is within bounds; otherwise, returns false.\n   * @private\n   */\n  CircularChartLegend3D.prototype.isWithinBounds = function (previousBound, textWidth, legendBounds, shapeWidth) {\n    if (!this.isRtlEnable) {\n      return previousBound + textWidth > legendBounds.x + legendBounds.width + shapeWidth;\n    } else {\n      return previousBound - textWidth < legendBounds.x - shapeWidth;\n    }\n  };\n  /**\n   * Determines the smart legend placement based on specified label bounds, legend bounds, and margin settings.\n   *\n   * @param {Rect} labelBound - The bounds of the legend label.\n   * @param {Rect} legendBound - The bounds of the legend.\n   * @param {MarginModel} margin - The margin settings for additional space.\n   * @returns {void}\n   * @private\n   */\n  CircularChartLegend3D.prototype.getSmartLegendLocation = function (labelBound, legendBound, margin) {\n    var space;\n    switch (this.position) {\n      case 'Left':\n        space = (labelBound.x - legendBound.width - margin.left) / 2;\n        legendBound.x = labelBound.x - legendBound.width < margin.left ? legendBound.x : labelBound.x - legendBound.width - space;\n        break;\n      case 'Right':\n        space = (this.chart.availableSize.width - margin.right - (labelBound.x + labelBound.width + legendBound.width)) / 2;\n        legendBound.x = labelBound.x + labelBound.width + legendBound.width > this.chart.availableSize.width - margin.right ? legendBound.x : labelBound.x + labelBound.width + space;\n        break;\n      case 'Top':\n        this.getTitleRect(this.chart);\n        space = (labelBound.y - legendBound.height - (this.titleRect.y + this.titleRect.height)) / 2;\n        legendBound.y = labelBound.y - legendBound.height < margin.top ? legendBound.y : labelBound.y - legendBound.height - space;\n        break;\n      case 'Bottom':\n        space = (this.chart.availableSize.height - margin.bottom - (labelBound.y + labelBound.height + legendBound.height)) / 2;\n        legendBound.y = labelBound.y + labelBound.height + legendBound.height > this.chart.availableSize.height - margin.bottom ? legendBound.y : labelBound.y + labelBound.height + space;\n        break;\n    }\n  };\n  /**\n   * Retrieves the title rectangle for the circular 3D chart.\n   *\n   * @param {CircularChart3D} circular - The circular 3D chart instance.\n   * @returns {Rect | null} - The title rectangle or null if no title is present.\n   * @private\n   */\n  CircularChartLegend3D.prototype.getTitleRect = function (circular) {\n    if (!circular.title) {\n      return null;\n    }\n    var titleSize = measureText(circular.title, circular.titleStyle, this.chart.themeStyle.legendTitleFont);\n    this.titleRect = new Rect(circular.availableSize.width / 2 - titleSize.width / 2, circular.margin.top, titleSize.width, titleSize.height);\n  };\n  /**\n   * Retrieves the legend options based on the specified index from the given legend collections.\n   *\n   * @param {number} index - The index used to find the corresponding legend in the legend collections.\n   * @param {LegendOptions[]} legendCollections - The array of legend options containing legend information.\n   * @returns {LegendOptions | undefined} - The legend options corresponding to the specified index, or null if not found.\n   * @private\n   */\n  CircularChartLegend3D.prototype.legendByIndex = function (index, legendCollections) {\n    for (var _i = 0, legendCollections_1 = legendCollections; _i < legendCollections_1.length; _i++) {\n      var legend = legendCollections_1[_i];\n      if (legend.pointIndex === index) {\n        return legend;\n      }\n    }\n    return null;\n  };\n  /**\n   * Handles the click event to show or hide the legend.\n   *\n   * @param {Event} event - The event object representing the click event.\n   * @returns {void}\n   * @private\n   */\n  CircularChartLegend3D.prototype.click = function (event) {\n    var targetId = event.target.id.indexOf('_chart_legend_g_') > -1 ? event.target.firstChild['id'] : event.target.id;\n    var chart = this.chart;\n    var legendItemsId = [this.legendID + '_text_', this.legendID + '_shape_', this.legendID + '_shape_marker_'];\n    this.chart.animateSeries = false;\n    for (var _i = 0, legendItemsId_2 = legendItemsId; _i < legendItemsId_2.length; _i++) {\n      var id = legendItemsId_2[_i];\n      if (targetId.indexOf(id) > -1) {\n        var pointIndex = parseInt(targetId.split(id)[1], 10);\n        if (this.chart.legendSettings.toggleVisibility && !isNaN(pointIndex)) {\n          var currentSeries = this.chart.visibleSeries[0];\n          var point = currentSeries.points[pointIndex];\n          var legendOption = this.legendByIndex(pointIndex, this.legendCollections);\n          var legendClickArgs = {\n            legendText: legendOption.text,\n            legendShape: legendOption.shape,\n            chart: chart,\n            series: currentSeries,\n            point: point,\n            name: legendClick,\n            cancel: false\n          };\n          this.chart.trigger(legendClick, legendClickArgs);\n          if (!legendClickArgs.cancel) {\n            point.visible = !point.visible;\n            legendOption.visible = point.visible;\n            currentSeries.sumOfPoints += point.visible ? point.y : -point.y;\n            chart.redraw = chart.enableAnimation;\n            this.sliceVisibility(pointIndex, point.visible);\n            chart.removeSeriesElements(chart);\n            chart.removeSvg();\n            var svgObject = document.getElementById(this.chart.element.id + '-svg-chart-3d');\n            if (svgObject) {\n              while (svgObject.childNodes.length > 0) {\n                svgObject.removeChild(svgObject.firstChild);\n              }\n            }\n            this.chart.circular3DPolygon = [];\n            this.chart.visibleSeries[0].segments = [];\n            this.chart.animateSeries = false;\n            this.chart.calculateBounds();\n            this.chart.renderElements();\n            if (chart.circularChartHighlight3DModule && (chart.highlightMode !== 'None' || chart.legendSettings.enableHighlight)) {\n              chart.circularChartHighlight3DModule.redrawSelection(chart);\n            }\n          }\n        } else {\n          if (this.chart.circularChartSelection3DModule && !isNaN(pointIndex)) {\n            this.chart.circularChartSelection3DModule.legendSelection(this.chart, event.target, event.type);\n          } else if (this.chart.circularChartHighlight3DModule && !isNaN(pointIndex)) {\n            this.chart.circularChartHighlight3DModule.legendSelection(this.chart, event.target, event.type);\n          }\n        }\n      }\n    }\n    if (targetId.indexOf(this.legendID + '_pageup') > -1) {\n      this.changePage(event, true);\n    } else if (targetId.indexOf(this.legendID + '_pagedown') > -1) {\n      this.changePage(event, false);\n    }\n    chart.redraw = false;\n  };\n  /**\n   * Updates the visibility of a slice in the circular 3D chart based on the specified index and visibility status.\n   *\n   * @param {number} index - The index of the slice to be updated.\n   * @param {boolean} isVisible - The visibility status to be set for the slice.\n   * @returns {void}\n   * @private\n   */\n  CircularChartLegend3D.prototype.sliceVisibility = function (index, isVisible) {\n    var sliceId = this.chart.element.id + '_Series_0_Point_';\n    if (this.chart.visibleSeries[0].dataLabel.visible) {\n      sliceId = this.chart.element.id + '_datalabel_Series_0_';\n      this.sliceAnimate(getElement(sliceId + 'g_' + index), isVisible);\n    }\n  };\n  /**\n   * Performs animation on the specified slice elements based on the visibility of a slice.\n   *\n   * @param {Element} element - The slice element to be animated.\n   * @param {boolean} isVisible - A boolean value indicating the visibility of the slice.\n   * @returns {void}\n   */\n  CircularChartLegend3D.prototype.sliceAnimate = function (element, isVisible) {\n    if (!element) {\n      return null;\n    }\n    new Animation({}).animate(element, {\n      duration: 300,\n      delay: 0,\n      name: isVisible ? 'FadeIn' : 'FadeOut',\n      end: function (args) {\n        args.element.style.visibility = isVisible ? 'visible' : 'hidden';\n      }\n    });\n  };\n  /**\n   * Retrieves the module name for the circular 3D chart legend.\n   *\n   * @returns {string} - The module name.\n   */\n  CircularChartLegend3D.prototype.getModuleName = function () {\n    return 'CircularChartLegend3D';\n  };\n  /**\n   * Destroys the circular 3D chart legend.\n   *\n   * @returns {void}\n   * @private\n   */\n  CircularChartLegend3D.prototype.destroy = function () {\n    this.removeEventListener();\n  };\n  return CircularChartLegend3D;\n}(BaseLegend);\nexport { CircularChartLegend3D };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","Browser","isNullOrUndefined","Animation","Property","Complex","ChildProperty","Border","ContainerPadding","Font","Margin","BaseLegend","LegendOptions","Rect","measureText","textTrim","getElement","textWrap","legendClick","Location","CircularChart3DLegendSettings","_super","apply","x","y","fontFamily","size","fontStyle","fontWeight","color","left","right","top","bottom","CircularChartLegend3D","chart","_this","call","library","titleRect","margin","addEventListener","isDestroyed","on","touchMoveEvent","mouseMove","touchEndEvent","mouseEnd","click","removeEventListener","off","e","legendSettings","visible","isTouch","move","circularChartHighlight3DModule","highlightMode","enableHighlight","legendItemsId","legendID","targetId","id","_i","legendItemsId_1","indexOf","circularChartSelection3DModule","legendSelection","type","getLegendOptions","series","legendCollections","isRtlEnable","enableRtl","isReverse","reverse","_a","points","point","push","toString","legendShape","legendImageUrl","index","getLegendBounds","availableSize","legendBounds","legend","calculateLegendTitle","isTitle","title","extraWidth","extraHeight","legendOption","chartRowCount","rowHeights","columnHeights","pageHeights","padding","titlePosition","titlePlusArrowSpace","arrowWidth","arrowHeight","enablePages","isVertical","height","width","shapePadding","maximumWidth","maximumLabelWidth","shapeWidth","rowWidth","columnCount","rowCount","columnWidth","pageWidth","pageRowWidth","previousRowCount","columnHeight","legendWidth","titleHeight","maxItemHeight","Math","max","textStyle","themeStyle","legendLabelFont","shapeHeight","legendEventArgs","render","fill","text","shape","name","cancel","trigger","convertHtmlEntities","textSize","itemPadding","getLegendHeight","pageButtonSize","getPageWidth","totalPages","legendTitleSize","fivePixel","len","isPaging","maxColumns","getMaxColumn","setBounds","sum","option","bounds","legendHeight","textPadding","textCollection","min","legendText","replace","columns","maxPageColumn","maxColumnWidth","maxWidth","prevPage","slice","getAvailWidth","tx","getRenderPoint","start","prevLegend","rect","count","firstLegend","previousLocation","location","textStartLoc","pageXCollections","textWidth","previousBound","isWithinBounds","availablewidth","textOverflow","toFixed","getSmartLegendLocation","labelBound","legendBound","space","position","getTitleRect","circular","titleSize","titleStyle","legendTitleFont","legendByIndex","legendCollections_1","pointIndex","event","firstChild","animateSeries","legendItemsId_2","parseInt","split","toggleVisibility","isNaN","currentSeries","visibleSeries","legendClickArgs","sumOfPoints","redraw","enableAnimation","sliceVisibility","removeSeriesElements","removeSvg","svgObject","document","getElementById","element","childNodes","removeChild","circular3DPolygon","segments","calculateBounds","renderElements","redrawSelection","changePage","isVisible","sliceId","dataLabel","sliceAnimate","animate","duration","delay","end","args","style","visibility","getModuleName","destroy"],"sources":["C:/Users/mkfun/Desktop/ct assignment/admin/node_modules/@syncfusion/ej2-charts/src/circularchart3d/legend/legend.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * Circular 3D chart legend.\n */\nimport { Browser, isNullOrUndefined, Animation, Property, Complex, ChildProperty } from '@syncfusion/ej2-base';\nimport { Border, ContainerPadding, Font, Margin } from '../../common/model/base';\nimport { BaseLegend, LegendOptions } from '../../common/legend/legend';\nimport { Rect, measureText } from '@syncfusion/ej2-svg-base';\nimport { textTrim, getElement } from '../../common/utils/helper';\nimport { textWrap } from '../../common/utils/helper';\nimport { legendClick } from '../../common/model/constants';\nimport { Location } from '../../common/model/base';\n/**\n * Configures the legends in circular 3D charts.\n */\nvar CircularChart3DLegendSettings = /** @class */ (function (_super) {\n    __extends(CircularChart3DLegendSettings, _super);\n    function CircularChart3DLegendSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property(true)\n    ], CircularChart3DLegendSettings.prototype, \"visible\", void 0);\n    __decorate([\n        Property(null)\n    ], CircularChart3DLegendSettings.prototype, \"height\", void 0);\n    __decorate([\n        Property(null)\n    ], CircularChart3DLegendSettings.prototype, \"width\", void 0);\n    __decorate([\n        Complex({ x: 0, y: 0 }, Location)\n    ], CircularChart3DLegendSettings.prototype, \"location\", void 0);\n    __decorate([\n        Property('Auto')\n    ], CircularChart3DLegendSettings.prototype, \"position\", void 0);\n    __decorate([\n        Property(8)\n    ], CircularChart3DLegendSettings.prototype, \"padding\", void 0);\n    __decorate([\n        Property(null)\n    ], CircularChart3DLegendSettings.prototype, \"itemPadding\", void 0);\n    __decorate([\n        Property('Center')\n    ], CircularChart3DLegendSettings.prototype, \"alignment\", void 0);\n    __decorate([\n        Complex({ fontFamily: null, size: null, fontStyle: null, fontWeight: null, color: null }, Font)\n    ], CircularChart3DLegendSettings.prototype, \"textStyle\", void 0);\n    __decorate([\n        Property(10)\n    ], CircularChart3DLegendSettings.prototype, \"shapeHeight\", void 0);\n    __decorate([\n        Property(10)\n    ], CircularChart3DLegendSettings.prototype, \"shapeWidth\", void 0);\n    __decorate([\n        Complex({}, Border)\n    ], CircularChart3DLegendSettings.prototype, \"border\", void 0);\n    __decorate([\n        Complex({ left: 0, right: 0, top: 0, bottom: 0 }, Margin)\n    ], CircularChart3DLegendSettings.prototype, \"margin\", void 0);\n    __decorate([\n        Complex({ left: 0, right: 0, top: 0, bottom: 0 }, ContainerPadding)\n    ], CircularChart3DLegendSettings.prototype, \"containerPadding\", void 0);\n    __decorate([\n        Property(8)\n    ], CircularChart3DLegendSettings.prototype, \"shapePadding\", void 0);\n    __decorate([\n        Property('transparent')\n    ], CircularChart3DLegendSettings.prototype, \"background\", void 0);\n    __decorate([\n        Property(1)\n    ], CircularChart3DLegendSettings.prototype, \"opacity\", void 0);\n    __decorate([\n        Property(true)\n    ], CircularChart3DLegendSettings.prototype, \"toggleVisibility\", void 0);\n    __decorate([\n        Property(false)\n    ], CircularChart3DLegendSettings.prototype, \"enableHighlight\", void 0);\n    __decorate([\n        Property(null)\n    ], CircularChart3DLegendSettings.prototype, \"description\", void 0);\n    __decorate([\n        Property(3)\n    ], CircularChart3DLegendSettings.prototype, \"tabIndex\", void 0);\n    __decorate([\n        Property(null)\n    ], CircularChart3DLegendSettings.prototype, \"title\", void 0);\n    __decorate([\n        Complex({ fontFamily: null, size: null, fontStyle: null, fontWeight: null, color: null }, Font)\n    ], CircularChart3DLegendSettings.prototype, \"titleStyle\", void 0);\n    __decorate([\n        Property('Top')\n    ], CircularChart3DLegendSettings.prototype, \"titlePosition\", void 0);\n    __decorate([\n        Property('Normal')\n    ], CircularChart3DLegendSettings.prototype, \"textWrap\", void 0);\n    __decorate([\n        Property('Ellipsis')\n    ], CircularChart3DLegendSettings.prototype, \"textOverflow\", void 0);\n    __decorate([\n        Property(100)\n    ], CircularChart3DLegendSettings.prototype, \"maximumTitleWidth\", void 0);\n    __decorate([\n        Property(null)\n    ], CircularChart3DLegendSettings.prototype, \"maximumLabelWidth\", void 0);\n    __decorate([\n        Property(true)\n    ], CircularChart3DLegendSettings.prototype, \"enablePages\", void 0);\n    __decorate([\n        Property(false)\n    ], CircularChart3DLegendSettings.prototype, \"isInversed\", void 0);\n    __decorate([\n        Property(false)\n    ], CircularChart3DLegendSettings.prototype, \"reverse\", void 0);\n    return CircularChart3DLegendSettings;\n}(ChildProperty));\nexport { CircularChart3DLegendSettings };\n/**\n * The `CircularChartLegend3D` module used to render the legend for a circular 3D chart.\n */\nvar CircularChartLegend3D = /** @class */ (function (_super) {\n    __extends(CircularChartLegend3D, _super);\n    /**\n     * Constructor for CircularChart3D legend.\n     *\n     * @param {CircularChart3D} chart - The chart instance to which the legend belongs.\n     */\n    function CircularChartLegend3D(chart) {\n        var _this = _super.call(this, chart) || this;\n        _this.library = _this;\n        _this.titleRect = new Rect(0, chart.margin.top, 0, 0);\n        _this.addEventListener();\n        return _this;\n    }\n    /**\n     * Binds events for the legend module.\n     *\n     * @returns {void}\n     */\n    CircularChartLegend3D.prototype.addEventListener = function () {\n        if (this.chart.isDestroyed) {\n            return;\n        }\n        this.chart.on(Browser.touchMoveEvent, this.mouseMove, this);\n        this.chart.on(Browser.touchEndEvent, this.mouseEnd, this);\n        this.chart.on('click', this.click, this);\n    };\n    /**\n     * Unbinds events for the legend module.\n     *\n     * @returns {void}\n     */\n    CircularChartLegend3D.prototype.removeEventListener = function () {\n        if (this.chart.isDestroyed) {\n            return;\n        }\n        this.chart.off(Browser.touchMoveEvent, this.mouseMove);\n        this.chart.off('click', this.click);\n        this.chart.off(Browser.touchEndEvent, this.mouseEnd);\n    };\n    /**\n     * Handles mouse movement for the legend module.\n     *\n     * @param {MouseEvent} e - The mouse event.\n     * @returns {void}\n     */\n    CircularChartLegend3D.prototype.mouseMove = function (e) {\n        if (this.chart.legendSettings.visible && !this.chart.isTouch) {\n            this.move(e);\n            if (this.chart.circularChartHighlight3DModule && (this.chart.highlightMode !== 'None' || this.chart.legendSettings.enableHighlight)) {\n                var legendItemsId = [this.legendID + '_text_', this.legendID + '_shape_marker_',\n                    this.legendID + '_shape_', this.legendID + '_g_'];\n                var targetId = e.target.id;\n                for (var _i = 0, legendItemsId_1 = legendItemsId; _i < legendItemsId_1.length; _i++) {\n                    var id = legendItemsId_1[_i];\n                    if (targetId.indexOf(id) > -1) {\n                        if (this.chart.circularChartSelection3DModule) {\n                            this.chart.circularChartSelection3DModule.legendSelection(this.chart, e.target, e.type);\n                        }\n                        else if (this.chart.circularChartHighlight3DModule) {\n                            this.chart.circularChartHighlight3DModule.legendSelection(this.chart, e.target, e.type);\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * Handles mouse end for the legend module.\n     *\n     * @param {MouseEvent} e - The mouse event.\n     * @returns {void}\n     */\n    CircularChartLegend3D.prototype.mouseEnd = function (e) {\n        if (this.chart.legendSettings.visible && this.chart.isTouch) {\n            this.move(e);\n        }\n    };\n    /**\n     * Retrieves the legend options for the circular 3D chart.\n     *\n     * @param {CircularChart3D} chart - The circular 3D chart instance.\n     * @param {CircularChart3DSeries[]} series - The array of circular 3D series in the chart.\n     * @returns {void}\n     * @private\n     */\n    CircularChartLegend3D.prototype.getLegendOptions = function (chart, series) {\n        this.legendCollections = [];\n        this.isRtlEnable = chart.enableRtl;\n        this.isReverse = !this.isRtlEnable && chart.legendSettings.reverse;\n        for (var i = 0; i < 1; i++) {\n            for (var _i = 0, _a = series[i].points; _i < _a.length; _i++) {\n                var point = _a[_i];\n                if (!isNullOrUndefined(point.x) && !isNullOrUndefined(point.y)) {\n                    this.legendCollections.push(new LegendOptions(point.x.toString(), point.color, series[i].legendShape, point.visible, 'Pie', series[0].legendImageUrl, null, null, point.index, series[i].index));\n                }\n            }\n            if (this.isReverse) {\n                this.legendCollections.reverse();\n            }\n        }\n    };\n    /**\n     * Calculates the legend bounds based on the available size, existing legend bounds, and legend settings.\n     *\n     * @param {Size} availableSize - The available size for the legend.\n     * @param {Rect} legendBounds - The existing bounds of the legend.\n     * @param {LegendSettingsModel} legend - The legend settings model.\n     * @returns {void}\n     * @private\n     */\n    CircularChartLegend3D.prototype.getLegendBounds = function (availableSize, legendBounds, legend) {\n        this.calculateLegendTitle(legend, legendBounds);\n        this.isTitle = legend.title ? true : false;\n        var extraWidth = 0;\n        var extraHeight = 0;\n        var legendOption;\n        this.chartRowCount = 1;\n        this.rowHeights = [];\n        this.columnHeights = [];\n        this.pageHeights = [];\n        var padding = legend.padding;\n        var titlePosition = legend.titlePosition;\n        var titlePlusArrowSpace = 0;\n        var arrowWidth = this.arrowWidth;\n        var arrowHeight = legend.enablePages ? 0 : this.arrowHeight;\n        if (!this.isVertical) {\n            extraHeight = !legend.height ? ((availableSize.height / 100) * 5) : 0;\n        }\n        else {\n            extraWidth = !legend.width ? ((availableSize.width / 100) * 5) : 0;\n        }\n        legendBounds.width += extraWidth;\n        legendBounds.height += extraHeight;\n        var shapePadding = legend.shapePadding;\n        var maximumWidth = legend.maximumLabelWidth ? legend.maximumLabelWidth : 0;\n        var shapeWidth = legend.shapeWidth;\n        var rowWidth = 0;\n        var columnCount = 0;\n        var rowCount = 0;\n        var columnWidth = [];\n        var pageWidth = [];\n        var pageRowWidth = 0;\n        var previousRowCount = 0;\n        var columnHeight = 0;\n        var legendWidth = 0;\n        var titleHeight = 0;\n        this.maxItemHeight = Math.max(measureText('MeasureText', legend.textStyle, this.chart.themeStyle.legendLabelFont).height, legend.shapeHeight);\n        var legendEventArgs;\n        var render = false;\n        for (var i = 0; i < this.legendCollections.length; i++) {\n            legendOption = this.legendCollections[i];\n            legendEventArgs = {\n                fill: legendOption.fill, text: legendOption.text, shape: legendOption.shape,\n                name: 'legendRender', cancel: false\n            };\n            this.chart.trigger('legendRender', legendEventArgs);\n            legendOption.render = !legendEventArgs.cancel;\n            legendOption.text = ((legendEventArgs.text.indexOf('&') > -1) ?\n                this.convertHtmlEntities(legendEventArgs.text) : legendEventArgs.text);\n            legendOption.fill = legendEventArgs.fill;\n            legendOption.shape = legendEventArgs.shape;\n            legendOption.textSize = measureText(legendOption.text, legend.textStyle, this.chart.themeStyle.legendLabelFont);\n            if (legendOption.render && legendOption.text !== '') {\n                render = true;\n                legendWidth = shapeWidth + shapePadding + (legend.maximumLabelWidth ? legend.maximumLabelWidth :\n                    legendOption.textSize.width) + (!this.isVertical ? (i === 0) ? padding : this.itemPadding : padding);\n                this.getLegendHeight(legendOption, legend, legendBounds, rowWidth, this.maxItemHeight, padding);\n                if (this.isVertical) {\n                    columnHeight += legendOption.textSize.height + ((i === 0) ? padding : this.itemPadding);\n                    if (columnHeight + this.itemPadding + (arrowHeight / this.pageButtonSize) > (legendBounds.height)) {\n                        rowWidth = rowWidth + maximumWidth;\n                        pageRowWidth = this.getPageWidth(pageWidth);\n                        this.totalPages = Math.max(rowCount, this.totalPages || 1);\n                        if ((rowWidth - pageRowWidth + legendWidth) > legendBounds.width) {\n                            pageWidth.push(rowWidth - pageRowWidth);\n                            rowCount = this.rowHeights.length;\n                            previousRowCount = rowCount;\n                        }\n                        else {\n                            rowCount = previousRowCount;\n                        }\n                        columnWidth.push(maximumWidth);\n                        maximumWidth = 0;\n                        columnHeight = legendOption.textSize.height + padding;\n                        columnCount++;\n                    }\n                    this.columnHeights[columnCount] = (this.columnHeights[columnCount] ?\n                        this.columnHeights[columnCount] : 0) +\n                        legendOption.textSize.height + ((i === 0) ? padding : this.itemPadding);\n                    maximumWidth = Math.max(legendWidth, maximumWidth);\n                    this.rowHeights[rowCount] = Math.max((this.rowHeights[rowCount] ?\n                        this.rowHeights[rowCount] : 0), legendOption.textSize.height);\n                    rowCount++;\n                }\n                else {\n                    if (!legend.enablePages) { // For new legend navigation support\n                        titlePlusArrowSpace = this.isTitle && titlePosition !== 'Top' ? this.legendTitleSize.width + this.fivePixel : 0;\n                        titlePlusArrowSpace += arrowWidth;\n                    }\n                    rowWidth = rowWidth + legendWidth;\n                    if (legendBounds.width < (padding + rowWidth + titlePlusArrowSpace)) {\n                        maximumWidth = Math.max(maximumWidth, (rowWidth + padding + titlePlusArrowSpace - legendWidth));\n                        if (rowCount === 0 && (legendWidth !== rowWidth)) {\n                            rowCount = 1;\n                        }\n                        rowWidth = legendWidth;\n                        rowCount++;\n                        columnCount = 0;\n                    }\n                    var len = rowCount ? (rowCount - 1) : rowCount;\n                    this.rowHeights[len] = Math.max((this.rowHeights[len] ? this.rowHeights[len] : 0), legendOption.textSize.height);\n                    this.columnHeights[columnCount] = (this.columnHeights[columnCount] ?\n                        this.columnHeights[columnCount] : 0) +\n                        legendOption.textSize.height + padding;\n                    columnCount++;\n                }\n            }\n        }\n        titleHeight = titlePosition === 'Top' ? this.legendTitleSize.height : 0;\n        if (this.isVertical) {\n            rowWidth = rowWidth + maximumWidth;\n            this.isPaging = legendBounds.width < (rowWidth + padding);\n            columnHeight = Math.max.apply(null, this.columnHeights) + padding + arrowHeight + titleHeight;\n            columnHeight = Math.max(columnHeight, ((this.totalPages || 1) * (this.maxItemHeight + padding)) + padding + arrowHeight);\n            this.isPaging = this.isPaging && (this.totalPages > 1);\n            columnWidth.push(maximumWidth);\n        }\n        else {\n            this.totalPages = rowCount;\n            columnHeight = Math.max.apply(null, this.columnHeights) + padding + arrowHeight + titleHeight;\n            this.isPaging = legendBounds.height < columnHeight;\n            columnHeight = !legend.enablePages && this.isPaging ? (this.maxItemHeight + padding) + padding + titleHeight : columnHeight;\n            columnHeight = Math.max(columnHeight, (this.maxItemHeight + padding) + padding + titleHeight);\n            if (!this.isPaging) { // For title left and right position\n                rowWidth += this.isTitle && titlePosition !== 'Top' ? (this.fivePixel + this.legendTitleSize.width + this.fivePixel) : 0;\n            }\n        }\n        this.maxColumns = 0; // initialization for max columns\n        var width = this.isVertical ? this.getMaxColumn(columnWidth, legendBounds.width, padding, rowWidth + padding) :\n            Math.max(rowWidth + padding, maximumWidth);\n        if (render) { // if any legends not skipped in event check\n            this.setBounds(width, columnHeight, legend, legendBounds);\n        }\n        else {\n            this.setBounds(0, 0, legend, legendBounds);\n        }\n    };\n    /**\n     * Calculates the total width by summing up the values in the provided array of page widths.\n     *\n     * @param {number[]} pageWidth - An array containing individual page widths.\n     * @returns {number} - The total width calculated as the sum of page widths.\n     * @private\n     */\n    CircularChartLegend3D.prototype.getPageWidth = function (pageWidth) {\n        var sum = 0;\n        for (var i = 0; i < pageWidth.length; i++) {\n            sum += pageWidth[i];\n        }\n        return sum;\n    };\n    /**\n     * Calculates the legend height based on the provided legend options, legend settings, bounds, row width,\n     * legend height, and padding values.\n     *\n     * @param {LegendOptions} option - The legend options containing necessary information.\n     * @param {LegendSettingsModel} legend - The legend settings model.\n     * @param {Rect} bounds - The bounds of the legend.\n     * @param {number} rowWidth - The width of the legend row.\n     * @param {number} legendHeight - The height of the legend.\n     * @param {number} padding - The padding value for additional space.\n     * @returns {void}\n     * @private\n     */\n    CircularChartLegend3D.prototype.getLegendHeight = function (option, legend, bounds, rowWidth, legendHeight, padding) {\n        var legendWidth = option.textSize.width;\n        var textPadding = legend.shapePadding + (padding * 2) + legend.shapeWidth;\n        switch (legend.textWrap) {\n            case 'Wrap':\n            case 'AnyWhere':\n                if (legendWidth > legend.maximumLabelWidth || legendWidth + rowWidth > bounds.width) {\n                    option.textCollection = textWrap(option.text, (legend.maximumLabelWidth ? Math.min(legend.maximumLabelWidth, (bounds.width - textPadding)) :\n                        (bounds.width - textPadding)), legend.textStyle, this.chart.enableRtl, null, null, this.chart.themeStyle.legendLabelFont);\n                }\n                else {\n                    option.textCollection.push(option.text);\n                }\n                option.textSize.height = (legendHeight * option.textCollection.length);\n                break;\n        }\n    };\n    /**\n     * Converts HTML entities in the given legend text to their corresponding normal string values.\n     *\n     * @param {string} legendText - The legend text containing HTML entities.\n     * @returns {string} - The string with HTML entities converted to their normal values.\n     * @private\n     */\n    CircularChartLegend3D.prototype.convertHtmlEntities = function (legendText) {\n        var text = (legendText).replace('&amp;', '&').replace('&lt;', '<').replace('&gt;', '>').replace('&quot;', '\"').replace('&nbsp;', ' ').replace('&cent;', '¢').replace('&pound;', '£').replace('&yen;', '¥').replace('&euro;', '€').replace('&copy;', '©').replace('&reg;', '®');\n        text = (text).replace('&#38;', '&').replace('&#60;', '<').replace('&#62;', '>').replace('&#34;', '\"').replace('&#160;', ' ').\n            replace('&#162;', '¢').replace('&#163;', '£').replace('&#165;', '¥').replace('&#8364;', '€').replace('&#169;', '©').replace('&#174;', '®');\n        return text;\n    };\n    /**\n     * Retrieves the maximum column value for a given set of columns based on the specified width, padding, and row width.\n     *\n     * @param {number[]} columns - The array of column values to find the maximum from.\n     * @param {number} width - The width parameter used in the calculation.\n     * @param {number} padding - The padding value for additional space.\n     * @param {number} rowWidth - The width of the legend row.\n     * @returns {number} - The maximum column value calculated from the provided array.\n     * @private\n     */\n    CircularChartLegend3D.prototype.getMaxColumn = function (columns, width, padding, rowWidth) {\n        var maxPageColumn = padding;\n        this.maxColumnWidth = Math.max.apply(null, columns);\n        for (var i = 0; i < columns.length; i++) {\n            maxPageColumn += this.maxColumnWidth;\n            this.maxColumns++;\n            if (maxPageColumn + padding > width) {\n                maxPageColumn -= this.maxColumnWidth;\n                this.maxColumns--;\n                break;\n            }\n        }\n        this.isPaging = (maxPageColumn < rowWidth) && (this.totalPages > 1);\n        if (maxPageColumn === padding) {\n            maxPageColumn = width;\n        }\n        this.maxColumns = Math.max(1, this.maxColumns);\n        this.maxWidth = maxPageColumn;\n        var columnWidth = this.maxColumnWidth + padding;\n        var prevPage = 0;\n        var columnCount = this.columnHeights.length;\n        if (this.isPaging && this.isVertical) {\n            for (var i = 1; i < columnCount; i++) {\n                columnWidth += (this.maxColumnWidth + padding);\n                if (columnWidth > width) {\n                    this.pageHeights.push(((prevPage !== i - 1) ? Math.max.apply(null, this.columnHeights.slice(prevPage, i - 1)) :\n                        this.columnHeights[prevPage]));\n                    columnWidth = this.maxColumnWidth + padding;\n                    prevPage = i;\n                }\n            }\n            this.pageHeights.push(((prevPage !== columnCount - 1) ?\n                Math.max.apply(null, this.columnHeights.slice(prevPage, columnCount - 1)) : this.columnHeights[prevPage]));\n            this.totalPages = this.pageHeights.length;\n        }\n        return maxPageColumn;\n    };\n    /**\n     * Calculates the available width from the legend's x position.\n     *\n     * @param {number} tx - The x position of the legend.\n     * @param {number} width - The width of the legend.\n     * @returns {number} - The available width of the legend.\n     */\n    CircularChartLegend3D.prototype.getAvailWidth = function (tx, width) {\n        if (this.isVertical) {\n            width = this.maxWidth;\n        }\n        else if (!this.isVertical && this.isPaging && !this.legend.enablePages) {\n            return width - tx - this.fivePixel;\n        }\n        return width - ((this.legend.padding * 2) + this.legend.shapeWidth + this.legend.shapePadding);\n    };\n    /**\n     * Determines the legend rendering locations from legend items.\n     *\n     * @param {LegendOptions} legendOption - The current legend option.\n     * @param {ChartLocation} start - The start location of the legend.\n     * @param {number} textPadding - The text padding of the legend text.\n     * @param {LegendOptions} prevLegend - The previous legend option.\n     * @param {Rect} rect - The legend bounds.\n     * @param {number} count - The legend index.\n     * @param {number} firstLegend - The current legend location.\n     * @returns {void}\n     * @private\n     */\n    CircularChartLegend3D.prototype.getRenderPoint = function (legendOption, start, textPadding, prevLegend, rect, count, firstLegend) {\n        var padding = this.legend.padding;\n        var previousLocation = prevLegend.location.y + this.maxItemHeight / 4 + (prevLegend.textCollection.length > 0 ?\n            ((prevLegend.textCollection.length - 1) * this.maxItemHeight) : 0);\n        if (this.isVertical) {\n            if (count === firstLegend || (previousLocation + legendOption.textSize.height + padding > (rect.y + rect.height))) {\n                legendOption.location.x = prevLegend.location.x + ((count === firstLegend) ? 0 : (!this.isRtlEnable) ?\n                    this.maxColumnWidth : -this.maxColumnWidth);\n                legendOption.location.y = start.y;\n                var textStartLoc = (this.legend.shapeWidth / 2) + padding;\n                this.pageXCollections.push(legendOption.location.x + ((!this.isRtlEnable) ? -textStartLoc : textStartLoc));\n            }\n            else {\n                legendOption.location.x = prevLegend.location.x;\n                legendOption.location.y = prevLegend.location.y + prevLegend.textSize.height + this.itemPadding;\n            }\n        }\n        else {\n            var textWidth = textPadding + (this.legend.maximumLabelWidth ?\n                this.legend.maximumLabelWidth : prevLegend.textSize.width);\n            var previousBound = prevLegend.location.x + ((!this.isRtlEnable) ? textWidth : -textWidth);\n            if (this.isWithinBounds(previousBound, (this.legend.maximumLabelWidth ? this.legend.maximumLabelWidth :\n                legendOption.textSize.width) + textPadding - this.itemPadding, rect, this.legend.shapeWidth / 2)) {\n                if (count !== firstLegend) {\n                    this.chartRowCount++;\n                }\n                legendOption.location.y = (count === firstLegend) ? prevLegend.location.y :\n                    prevLegend.location.y + this.rowHeights[(this.chartRowCount - 2)] + padding;\n                legendOption.location.x = start.x;\n            }\n            else {\n                legendOption.location.y = prevLegend.location.y;\n                legendOption.location.x = (count === firstLegend) ? prevLegend.location.x : previousBound;\n            }\n        }\n        var availablewidth = this.getAvailWidth(legendOption.location.x, this.legendBounds.width);\n        availablewidth = this.legend.maximumLabelWidth ? Math.min(this.legend.maximumLabelWidth, availablewidth) : availablewidth;\n        if (this.legend.textOverflow === 'Ellipsis' && this.legend.textWrap === 'Normal') {\n            legendOption.text = textTrim(+availablewidth.toFixed(4), legendOption.text, this.legend.textStyle, this.chart.enableRtl, this.chart.themeStyle.legendLabelFont);\n        }\n    };\n    /**\n     * Checks whether the legend group is within the specified legend bounds, considering RTL (Right-to-Left) rendering.\n     *\n     * @param {number} previousBound - The previous legend bound value.\n     * @param {number} textWidth - The width of the legend text.\n     * @param {Rect} legendBounds - The bounds of the legend.\n     * @param {number} shapeWidth - The width of the legend shape.\n     * @returns {boolean} - Returns true if the legend group is within bounds; otherwise, returns false.\n     * @private\n     */\n    CircularChartLegend3D.prototype.isWithinBounds = function (previousBound, textWidth, legendBounds, shapeWidth) {\n        if (!this.isRtlEnable) {\n            return (previousBound + textWidth) > (legendBounds.x + legendBounds.width + shapeWidth);\n        }\n        else {\n            return (previousBound - textWidth) < (legendBounds.x - shapeWidth);\n        }\n    };\n    /**\n     * Determines the smart legend placement based on specified label bounds, legend bounds, and margin settings.\n     *\n     * @param {Rect} labelBound - The bounds of the legend label.\n     * @param {Rect} legendBound - The bounds of the legend.\n     * @param {MarginModel} margin - The margin settings for additional space.\n     * @returns {void}\n     * @private\n     */\n    CircularChartLegend3D.prototype.getSmartLegendLocation = function (labelBound, legendBound, margin) {\n        var space;\n        switch (this.position) {\n            case 'Left':\n                space = ((labelBound.x - legendBound.width) - margin.left) / 2;\n                legendBound.x = (labelBound.x - legendBound.width) < margin.left ? legendBound.x :\n                    (labelBound.x - legendBound.width) - space;\n                break;\n            case 'Right':\n                space = ((this.chart.availableSize.width - margin.right) - (labelBound.x + labelBound.width + legendBound.width)) / 2;\n                legendBound.x = (labelBound.x + labelBound.width + legendBound.width) > (this.chart.availableSize.width - margin.right) ?\n                    legendBound.x : (labelBound.x + labelBound.width + space);\n                break;\n            case 'Top':\n                this.getTitleRect(this.chart);\n                space = ((labelBound.y - legendBound.height) - (this.titleRect.y + this.titleRect.height)) / 2;\n                legendBound.y = (labelBound.y - legendBound.height) < margin.top ? legendBound.y :\n                    (labelBound.y - legendBound.height) - space;\n                break;\n            case 'Bottom':\n                space = ((this.chart.availableSize.height - margin.bottom) - (labelBound.y + labelBound.height + legendBound.height)) / 2;\n                legendBound.y = labelBound.y + labelBound.height + legendBound.height > (this.chart.availableSize.height - margin.bottom) ?\n                    legendBound.y : (labelBound.y + labelBound.height) + space;\n                break;\n        }\n    };\n    /**\n     * Retrieves the title rectangle for the circular 3D chart.\n     *\n     * @param {CircularChart3D} circular - The circular 3D chart instance.\n     * @returns {Rect | null} - The title rectangle or null if no title is present.\n     * @private\n     */\n    CircularChartLegend3D.prototype.getTitleRect = function (circular) {\n        if (!circular.title) {\n            return null;\n        }\n        var titleSize = measureText(circular.title, circular.titleStyle, this.chart.themeStyle.legendTitleFont);\n        this.titleRect = new Rect(circular.availableSize.width / 2 - titleSize.width / 2, circular.margin.top, titleSize.width, titleSize.height);\n    };\n    /**\n     * Retrieves the legend options based on the specified index from the given legend collections.\n     *\n     * @param {number} index - The index used to find the corresponding legend in the legend collections.\n     * @param {LegendOptions[]} legendCollections - The array of legend options containing legend information.\n     * @returns {LegendOptions | undefined} - The legend options corresponding to the specified index, or null if not found.\n     * @private\n     */\n    CircularChartLegend3D.prototype.legendByIndex = function (index, legendCollections) {\n        for (var _i = 0, legendCollections_1 = legendCollections; _i < legendCollections_1.length; _i++) {\n            var legend = legendCollections_1[_i];\n            if (legend.pointIndex === index) {\n                return legend;\n            }\n        }\n        return null;\n    };\n    /**\n     * Handles the click event to show or hide the legend.\n     *\n     * @param {Event} event - The event object representing the click event.\n     * @returns {void}\n     * @private\n     */\n    CircularChartLegend3D.prototype.click = function (event) {\n        var targetId = event.target.id.indexOf('_chart_legend_g_') > -1 ?\n            event.target.firstChild['id'] : event.target.id;\n        var chart = this.chart;\n        var legendItemsId = [this.legendID + '_text_', this.legendID + '_shape_', this.legendID + '_shape_marker_'];\n        this.chart.animateSeries = false;\n        for (var _i = 0, legendItemsId_2 = legendItemsId; _i < legendItemsId_2.length; _i++) {\n            var id = legendItemsId_2[_i];\n            if (targetId.indexOf(id) > -1) {\n                var pointIndex = parseInt(targetId.split(id)[1], 10);\n                if (this.chart.legendSettings.toggleVisibility && !isNaN(pointIndex)) {\n                    var currentSeries = this.chart.visibleSeries[0];\n                    var point = currentSeries.points[pointIndex];\n                    var legendOption = this.legendByIndex(pointIndex, this.legendCollections);\n                    var legendClickArgs = {\n                        legendText: legendOption.text, legendShape: legendOption.shape,\n                        chart: chart,\n                        series: currentSeries, point: point,\n                        name: legendClick, cancel: false\n                    };\n                    this.chart.trigger(legendClick, legendClickArgs);\n                    if (!legendClickArgs.cancel) {\n                        point.visible = !point.visible;\n                        legendOption.visible = point.visible;\n                        currentSeries.sumOfPoints += point.visible ? point.y : -point.y;\n                        chart.redraw = chart.enableAnimation;\n                        this.sliceVisibility(pointIndex, point.visible);\n                        chart.removeSeriesElements(chart);\n                        chart.removeSvg();\n                        var svgObject = document.getElementById(this.chart.element.id + '-svg-chart-3d');\n                        if (svgObject) {\n                            while (svgObject.childNodes.length > 0) {\n                                svgObject.removeChild(svgObject.firstChild);\n                            }\n                        }\n                        this.chart.circular3DPolygon = [];\n                        this.chart.visibleSeries[0].segments = [];\n                        this.chart.animateSeries = false;\n                        this.chart.calculateBounds();\n                        this.chart.renderElements();\n                        if (chart.circularChartHighlight3DModule && (chart.highlightMode !== 'None' || chart.legendSettings.enableHighlight)) {\n                            chart.circularChartHighlight3DModule.redrawSelection(chart);\n                        }\n                    }\n                }\n                else {\n                    if (this.chart.circularChartSelection3DModule && !isNaN(pointIndex)) {\n                        this.chart.circularChartSelection3DModule.legendSelection(this.chart, event.target, event.type);\n                    }\n                    else if (this.chart.circularChartHighlight3DModule && !isNaN(pointIndex)) {\n                        this.chart.circularChartHighlight3DModule.legendSelection(this.chart, event.target, event.type);\n                    }\n                }\n            }\n        }\n        if (targetId.indexOf(this.legendID + '_pageup') > -1) {\n            this.changePage(event, true);\n        }\n        else if (targetId.indexOf(this.legendID + '_pagedown') > -1) {\n            this.changePage(event, false);\n        }\n        chart.redraw = false;\n    };\n    /**\n     * Updates the visibility of a slice in the circular 3D chart based on the specified index and visibility status.\n     *\n     * @param {number} index - The index of the slice to be updated.\n     * @param {boolean} isVisible - The visibility status to be set for the slice.\n     * @returns {void}\n     * @private\n     */\n    CircularChartLegend3D.prototype.sliceVisibility = function (index, isVisible) {\n        var sliceId = this.chart.element.id + '_Series_0_Point_';\n        if (this.chart.visibleSeries[0].dataLabel.visible) {\n            sliceId = this.chart.element.id + '_datalabel_Series_0_';\n            this.sliceAnimate(getElement(sliceId + 'g_' + index), isVisible);\n        }\n    };\n    /**\n     * Performs animation on the specified slice elements based on the visibility of a slice.\n     *\n     * @param {Element} element - The slice element to be animated.\n     * @param {boolean} isVisible - A boolean value indicating the visibility of the slice.\n     * @returns {void}\n     */\n    CircularChartLegend3D.prototype.sliceAnimate = function (element, isVisible) {\n        if (!element) {\n            return null;\n        }\n        new Animation({}).animate(element, {\n            duration: 300,\n            delay: 0,\n            name: isVisible ? 'FadeIn' : 'FadeOut',\n            end: function (args) {\n                args.element.style.visibility = isVisible ? 'visible' : 'hidden';\n            }\n        });\n    };\n    /**\n     * Retrieves the module name for the circular 3D chart legend.\n     *\n     * @returns {string} - The module name.\n     */\n    CircularChartLegend3D.prototype.getModuleName = function () {\n        return 'CircularChartLegend3D';\n    };\n    /**\n     * Destroys the circular 3D chart legend.\n     *\n     * @returns {void}\n     * @private\n     */\n    CircularChartLegend3D.prototype.destroy = function () {\n        this.removeEventListener();\n    };\n    return CircularChartLegend3D;\n}(BaseLegend));\nexport { CircularChartLegend3D };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}