{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Property, ChildProperty, Complex, Collection, getValue, animationMode } from '@syncfusion/ej2-base';\nimport { isNullOrUndefined, extend } from '@syncfusion/ej2-base';\nimport { StackValues, RectOption, appendChildElement, appendClipElement, getElement } from '../../common/utils/helper';\nimport { firstToLowerCase, CircleOption, getColorByValue } from '../../common/utils/helper';\nimport { Rect, Size } from '@syncfusion/ej2-svg-base';\nimport { Border, Font, Margin, Animation, DragSettings, EmptyPointSettings, Connector, CornerRadius, Accessibility, SeriesAccessibility } from '../../common/model/base';\nimport { DataManager, DataUtil } from '@syncfusion/ej2-data';\nimport { Offset } from '../../common/model/base';\nimport { seriesRender } from '../../common/model/constants';\nimport { getVisiblePoints, setRange, findClipRect } from '../../common/utils/helper';\nimport { Browser } from '@syncfusion/ej2-base';\n/**\n * This class provides options to customize the appearance and behavior of data labels within a series.\n */\nvar DataLabelSettings = /** @class */function (_super) {\n  __extends(DataLabelSettings, _super);\n  function DataLabelSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  __decorate([Property(false)], DataLabelSettings.prototype, \"visible\", void 0);\n  __decorate([Property(true)], DataLabelSettings.prototype, \"showZero\", void 0);\n  __decorate([Property(null)], DataLabelSettings.prototype, \"name\", void 0);\n  __decorate([Property('transparent')], DataLabelSettings.prototype, \"fill\", void 0);\n  __decorate([Property(null)], DataLabelSettings.prototype, \"format\", void 0);\n  __decorate([Property(1)], DataLabelSettings.prototype, \"opacity\", void 0);\n  __decorate([Property(0)], DataLabelSettings.prototype, \"angle\", void 0);\n  __decorate([Property(false)], DataLabelSettings.prototype, \"enableRotation\", void 0);\n  __decorate([Property('Auto')], DataLabelSettings.prototype, \"position\", void 0);\n  __decorate([Property(5)], DataLabelSettings.prototype, \"rx\", void 0);\n  __decorate([Property(5)], DataLabelSettings.prototype, \"ry\", void 0);\n  __decorate([Property('Center')], DataLabelSettings.prototype, \"alignment\", void 0);\n  __decorate([Complex({\n    width: null,\n    color: null\n  }, Border)], DataLabelSettings.prototype, \"border\", void 0);\n  __decorate([Complex({\n    left: 5,\n    right: 5,\n    top: 5,\n    bottom: 5\n  }, Margin)], DataLabelSettings.prototype, \"margin\", void 0);\n  __decorate([Complex({\n    size: null,\n    color: null,\n    fontStyle: null,\n    fontWeight: null,\n    fontFamily: null\n  }, Font)], DataLabelSettings.prototype, \"font\", void 0);\n  __decorate([Property(null)], DataLabelSettings.prototype, \"template\", void 0);\n  __decorate([Property('Hide')], DataLabelSettings.prototype, \"labelIntersectAction\", void 0);\n  return DataLabelSettings;\n}(ChildProperty);\nexport { DataLabelSettings };\n/**\n * This class is used to define the appearance and behavior of the series markers.\n */\nvar MarkerSettings = /** @class */function (_super) {\n  __extends(MarkerSettings, _super);\n  function MarkerSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  __decorate([Property(false)], MarkerSettings.prototype, \"visible\", void 0);\n  __decorate([Property(null)], MarkerSettings.prototype, \"shape\", void 0);\n  __decorate([Property('')], MarkerSettings.prototype, \"imageUrl\", void 0);\n  __decorate([Property(5)], MarkerSettings.prototype, \"height\", void 0);\n  __decorate([Property(false)], MarkerSettings.prototype, \"isFilled\", void 0);\n  __decorate([Property(5)], MarkerSettings.prototype, \"width\", void 0);\n  __decorate([Complex({\n    width: 2,\n    color: null\n  }, Border)], MarkerSettings.prototype, \"border\", void 0);\n  __decorate([Complex({\n    x: 0,\n    y: 0\n  }, Offset)], MarkerSettings.prototype, \"offset\", void 0);\n  __decorate([Property(null)], MarkerSettings.prototype, \"fill\", void 0);\n  __decorate([Property(true)], MarkerSettings.prototype, \"allowHighlight\", void 0);\n  __decorate([Property(1)], MarkerSettings.prototype, \"opacity\", void 0);\n  __decorate([Complex({}, DataLabelSettings)], MarkerSettings.prototype, \"dataLabel\", void 0);\n  return MarkerSettings;\n}(ChildProperty);\nexport { MarkerSettings };\n/**\n * The `ParetoOptions` class provides a set of properties for configuring the Pareto series.\n */\nvar ParetoOptions = /** @class */function (_super) {\n  __extends(ParetoOptions, _super);\n  function ParetoOptions() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  __decorate([Property(null)], ParetoOptions.prototype, \"fill\", void 0);\n  __decorate([Property(1)], ParetoOptions.prototype, \"width\", void 0);\n  __decorate([Property('0')], ParetoOptions.prototype, \"dashArray\", void 0);\n  __decorate([Complex(null, MarkerSettings)], ParetoOptions.prototype, \"marker\", void 0);\n  __decorate([Property(true)], ParetoOptions.prototype, \"showAxis\", void 0);\n  return ParetoOptions;\n}(ChildProperty);\nexport { ParetoOptions };\n/**\n * The model that represents how the points in a series are configured and displayed.\n *\n * @public\n */\nvar Points = /** @class */function () {\n  function Points() {\n    /** Specifies the locations of symbols associated with the point. */\n    this.symbolLocations = null;\n    /** Specifies the regions associated with the point. */\n    this.regions = null;\n    /** Specifies the percentage value of the point. */\n    this.percentage = null;\n    /** Specifies the region data of the point. */\n    this.regionData = null;\n    /** Indicates whether the point is selected. */\n    this.isSelect = false;\n    /** Specifies the marker settings for the point. */\n    this.marker = {\n      visible: false\n    };\n    /**\n     * Indicates whether the point is within the specified range.\n     *\n     * @private\n     */\n    this.isPointInRange = true;\n    /** Specifies the vertical error value for the point. */\n    this.verticalError = null;\n    /** Specifies the vertical negative error value for the point. */\n    this.verticalNegativeError = null;\n    /** Specifies the horizontal error value for the point. */\n    this.horizontalError = null;\n    /** Specifies the horizontal negative error value for the point. */\n    this.horizontalNegativeError = null;\n    /** Specifies the vertical positive error value for the point. */\n    this.verticalPositiveError = null;\n    /** Specifies the horizontal positive error value for the point. */\n    this.horizontalPositiveError = null;\n  }\n  return Points;\n}();\nexport { Points };\n/**\n * Configures the behavior and appearance of trendlines in a chart series.\n * Trendlines indicate trends and the rate of price changes over a period.\n */\nvar Trendline = /** @class */function (_super) {\n  __extends(Trendline, _super);\n  function Trendline() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /** @private */\n    _this.clipRect = new Rect(0, 0, 0, 0);\n    return _this;\n  }\n  /**\n   * Sets the data source for the specified series in the provided chart.\n   *\n   * @private\n   * @param {Series} series - The series for which the data source is set.\n   * @param {Chart} chart - The chart in which the data source is set.\n   * @returns {void}\n   */\n  Trendline.prototype.setDataSource = function (series, chart) {\n    if (series) {\n      this.points = series.points;\n    }\n    chart.trendLineModule.initDataSource(this);\n    chart.visibleSeriesCount++;\n  };\n  __decorate([Property('')], Trendline.prototype, \"name\", void 0);\n  __decorate([Property('')], Trendline.prototype, \"dashArray\", void 0);\n  __decorate([Property(true)], Trendline.prototype, \"visible\", void 0);\n  __decorate([Property('Linear')], Trendline.prototype, \"type\", void 0);\n  __decorate([Property(2)], Trendline.prototype, \"period\", void 0);\n  __decorate([Property(2)], Trendline.prototype, \"polynomialOrder\", void 0);\n  __decorate([Property(0)], Trendline.prototype, \"backwardForecast\", void 0);\n  __decorate([Property(0)], Trendline.prototype, \"forwardForecast\", void 0);\n  __decorate([Complex({}, Animation)], Trendline.prototype, \"animation\", void 0);\n  __decorate([Complex({}, MarkerSettings)], Trendline.prototype, \"marker\", void 0);\n  __decorate([Property(true)], Trendline.prototype, \"enableTooltip\", void 0);\n  __decorate([Property(null)], Trendline.prototype, \"intercept\", void 0);\n  __decorate([Property('')], Trendline.prototype, \"fill\", void 0);\n  __decorate([Property(1)], Trendline.prototype, \"width\", void 0);\n  __decorate([Property('SeriesType')], Trendline.prototype, \"legendShape\", void 0);\n  __decorate([Complex({}, Accessibility)], Trendline.prototype, \"accessibility\", void 0);\n  return Trendline;\n}(ChildProperty);\nexport { Trendline };\n/**\n * The `ErrorBarCapSettings` class provides options to customize the appearance and behavior of error bars in a series.\n */\nvar ErrorBarCapSettings = /** @class */function (_super) {\n  __extends(ErrorBarCapSettings, _super);\n  function ErrorBarCapSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  __decorate([Property(1)], ErrorBarCapSettings.prototype, \"width\", void 0);\n  __decorate([Property(10)], ErrorBarCapSettings.prototype, \"length\", void 0);\n  __decorate([Property(null)], ErrorBarCapSettings.prototype, \"color\", void 0);\n  __decorate([Property(1)], ErrorBarCapSettings.prototype, \"opacity\", void 0);\n  return ErrorBarCapSettings;\n}(ChildProperty);\nexport { ErrorBarCapSettings };\nvar ChartSegment = /** @class */function (_super) {\n  __extends(ChartSegment, _super);\n  function ChartSegment() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  __decorate([Property(null)], ChartSegment.prototype, \"value\", void 0);\n  __decorate([Property(null)], ChartSegment.prototype, \"color\", void 0);\n  __decorate([Property('0')], ChartSegment.prototype, \"dashArray\", void 0);\n  return ChartSegment;\n}(ChildProperty);\nexport { ChartSegment };\n/**\n * The `ErrorBarSettings` class provides options to customize the appearance and behavior of error bars in a series.\n *\n * @public\n */\nvar ErrorBarSettings = /** @class */function (_super) {\n  __extends(ErrorBarSettings, _super);\n  function ErrorBarSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  __decorate([Property(false)], ErrorBarSettings.prototype, \"visible\", void 0);\n  __decorate([Property('Fixed')], ErrorBarSettings.prototype, \"type\", void 0);\n  __decorate([Property('Both')], ErrorBarSettings.prototype, \"direction\", void 0);\n  __decorate([Property('Vertical')], ErrorBarSettings.prototype, \"mode\", void 0);\n  __decorate([Property(null)], ErrorBarSettings.prototype, \"color\", void 0);\n  __decorate([Property(1)], ErrorBarSettings.prototype, \"verticalError\", void 0);\n  __decorate([Property(1)], ErrorBarSettings.prototype, \"width\", void 0);\n  __decorate([Property(1)], ErrorBarSettings.prototype, \"horizontalError\", void 0);\n  __decorate([Property(3)], ErrorBarSettings.prototype, \"verticalPositiveError\", void 0);\n  __decorate([Property(3)], ErrorBarSettings.prototype, \"verticalNegativeError\", void 0);\n  __decorate([Property(1)], ErrorBarSettings.prototype, \"horizontalPositiveError\", void 0);\n  __decorate([Property(1)], ErrorBarSettings.prototype, \"horizontalNegativeError\", void 0);\n  __decorate([Complex(null, ErrorBarCapSettings)], ErrorBarSettings.prototype, \"errorBarCap\", void 0);\n  __decorate([Property('')], ErrorBarSettings.prototype, \"errorBarColorMapping\", void 0);\n  return ErrorBarSettings;\n}(ChildProperty);\nexport { ErrorBarSettings };\n/**\n * Defines the common behavior for series and technical indicators.\n */\nvar SeriesBase = /** @class */function (_super) {\n  __extends(SeriesBase, _super);\n  function SeriesBase() {\n    /**\n     * The data source field that contains the x value.\n     * It is applicable to both series and technical indicators.\n     *\n     * @default ''\n     */\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.rangeColorPoints = [];\n    _this.isAdvancedColor = undefined;\n    /** @private */\n    _this.currentViewData = [];\n    /** @private */\n    _this.clipRect = new Rect(0, 0, 0, 0);\n    /** @private */\n    _this.seriesType = 'XY';\n    _this.isRectTypeSeries = false;\n    _this.removedPointIndex = null;\n    /** @private */\n    _this.isLegendClicked = false;\n    return _this;\n  }\n  /**\n   * Process data for the series.\n   *\n   * @hidden\n   * @returns {void}\n   */\n  SeriesBase.prototype.processJsonData = function () {\n    var i = 0;\n    var point = new Points();\n    var xName = this instanceof Series && this.type === 'Histogram' ? 'x' : this.xName;\n    var textMappingName = this instanceof Series && this.marker.dataLabel.name ? this.marker.dataLabel.name : '';\n    if (this instanceof Series) {\n      if (this.type === 'Waterfall' || this.type === 'Histogram') {\n        this.currentViewData = this.chart[firstToLowerCase(this.type) + 'SeriesModule'].processInternalData(extend([], this.currentViewData, null, true), this);\n      }\n      if (this.category === 'Pareto') {\n        this.currentViewData = extend([], this.currentViewData, null, true);\n        if (this.type === 'Line') {\n          this.currentViewData = this.chart.paretoSeriesModule.performCumulativeCalculation(this.currentViewData, this);\n        }\n      }\n      this.isRectTypeSeries = this.type.indexOf('Column') > -1 || this.type.indexOf('Bar') > -1 || this.type.indexOf('Histogram') > -1;\n    }\n    var len = (this.currentViewData || []).length;\n    this.points = [];\n    this.xMin = Infinity;\n    this.xMax = -Infinity;\n    this.yMin = Infinity;\n    this.yMax = -Infinity;\n    this.sizeMax = -Infinity;\n    this.getSeriesType();\n    if (this.xAxis.valueType === 'Category') {\n      while (i < len) {\n        this.pushCategoryPoint(point, i, textMappingName, xName);\n        i++;\n      }\n    } else if (this.xAxis.valueType.indexOf('DateTime') > -1) {\n      var option = {\n        skeleton: 'full',\n        type: 'dateTime'\n      };\n      var dateParser = this.chart.intl.getDateParser(option);\n      var dateFormatter = this.chart.intl.getDateFormat(option);\n      while (i < len) {\n        this.pushDateTimePoint(point, i, textMappingName, xName, dateParser, dateFormatter);\n        i++;\n      }\n    } else {\n      while (i < len) {\n        this.pushDoublePoint(point, i, textMappingName, xName);\n        i++;\n      }\n    }\n    this.updateSplineValue();\n    this.updateYAxisForErrorBars();\n    if (this instanceof Series && this.type === 'Waterfall' && isNullOrUndefined(this.yAxis.minimum)) {\n      this.yMin = Math.min.apply(Math, this.chart.waterfallSeriesModule.cumulativeSums);\n    }\n  };\n  /**\n   * Calculates the errorbar and adds a range to axis if errorbar exeeds to the actual range.\n   *\n   * @returns {void}\n   * @private\n   */\n  SeriesBase.prototype.updateYAxisForErrorBars = function () {\n    if (this instanceof Series) {\n      if (this.chart.errorBarModule) {\n        var maxVerticalError = void 0;\n        var minVerticalError = void 0;\n        if (this.errorBar.verticalError) {\n          for (var i = 0; i < this.points.length; i++) {\n            var verticalErrors = [];\n            var minVerticalErrorValue = [];\n            for (var i_1 = 0; i_1 < this.points.length; i_1++) {\n              var point = this.points[i_1];\n              if (point.verticalError) {\n                verticalErrors.push(point.verticalError);\n                minVerticalErrorValue.push(point.yValue - point.verticalError);\n              }\n            }\n            maxVerticalError = verticalErrors && verticalErrors.length > 0 ? Math.max.apply(Math, verticalErrors) : 0;\n            minVerticalError = verticalErrors && verticalErrors.length > 0 ? Math.min.apply(Math, minVerticalErrorValue) : 0;\n          }\n        }\n        this.yMax += !isNaN(maxVerticalError) && isNullOrUndefined(this.yAxis.maximum) ? maxVerticalError : 0;\n        this.yMin = !isNaN(minVerticalError) && minVerticalError < this.yMin && minVerticalError < 0 && isNullOrUndefined(this.yAxis.minimum) ? minVerticalError : this.yMin;\n      }\n    }\n  };\n  /**\n   * Pushes a category point to the data collection.\n   *\n   * @param {Points} point -The point to be pushed.\n   * @param {number} index -The index of the point.\n   * @param {string} textMappingName -The name of the text mapping.\n   * @param {string} xName -The name of the x-coordinate.\n   * @returns {void}\n   * @private\n   */\n  SeriesBase.prototype.pushCategoryPoint = function (point, index, textMappingName, xName) {\n    point = this.dataPoint(index, textMappingName, xName);\n    this.pushCategoryData(point, index, point.x);\n    this.pushData(point, index);\n    this.setEmptyPoint(point, index);\n    this.rangeColorsInterior(point);\n  };\n  /**\n   * Pushes a double point to the data collection.\n   *\n   * @param {Points} point -The point to be pushed.\n   * @param {number} index -The index of the point.\n   * @param {string} textMappingName -The name of the text mapping.\n   * @param {string} xName -The name of the x-coordinate.\n   * @returns {void}\n   * @private\n   */\n  SeriesBase.prototype.pushDoublePoint = function (point, index, textMappingName, xName) {\n    point = this.dataPoint(index, textMappingName, xName);\n    point.xValue = point.x;\n    this.pushData(point, index);\n    this.setEmptyPoint(point, index);\n  };\n  /**\n   * Pushes a DateTime point to the data collection.\n   *\n   * @param {Points} point -The point to be pushed.\n   * @param {number} index -The index of the point.\n   * @param {string} textMappingName -The name of the text mapping.\n   * @param {string} xName -The name of the x-coordinate.\n   * @param {Function} dateParser -The date parser function.\n   * @param {Function} dateFormatter -The date formatter function.\n   * @returns {void}\n   * @private\n   */\n  SeriesBase.prototype.pushDateTimePoint = function (point, index, textMappingName, xName, dateParser, dateFormatter) {\n    point = this.dataPoint(index, textMappingName, xName);\n    if (!isNullOrUndefined(point.x) && point.x !== '') {\n      point.x = new Date(DataUtil.parse.parseJson({\n        val: point.x\n      }).val);\n      if (this.xAxis.valueType === 'DateTime') {\n        point.xValue = Date.parse(point.x.toString());\n      } else {\n        if (this.chart.isBlazor) {\n          this.pushCategoryData(point, index, Date.parse(point.x.toString()).toString());\n        } else {\n          this.pushCategoryData(point, index, Date.parse(dateParser(dateFormatter(point.x))).toString());\n        }\n      }\n      this.pushData(point, index);\n      this.setEmptyPoint(point, index);\n    } else {\n      point.visible = false;\n    }\n  };\n  SeriesBase.prototype.updateSplineValue = function () {\n    if (this instanceof Series && !(this.chart.stockChart && this.xAxis.valueType === 'DateTimeCategory')) {\n      if (this.type.indexOf('Spline') > -1 || this.drawType.indexOf('Spline') > -1 && this.chart.chartAreaType === 'PolarRadar') {\n        var isArea = this.type.indexOf('Area') > -1 || this.drawType.indexOf('Area') > -1;\n        var isRange = this.type.indexOf('Range') > -1;\n        this.chart['spline' + (isArea ? isRange ? 'RangeArea' : 'Area' : '') + 'SeriesModule'].findSplinePoint(this);\n      } else if (this.type.indexOf('Histogram') > -1 && (this.xAxis.maximum || this.xAxis.minimum)) {\n        this.chart['histogramSeriesModule'].calculateBinValues(this);\n      }\n      if (this.type.indexOf('Histogram') > -1 && this.points.length === 1) {\n        this.xMin = this.xMin - this.histogramValues.binWidth;\n        this.xMax = this.xMax + this.histogramValues.binWidth;\n      }\n    }\n  };\n  SeriesBase.prototype.rangeColorsInterior = function (point) {\n    if (this.chart.rangeColorSettings && this.chart.rangeColorSettings.length > 0 && this.chart.visibleSeries.length === 1 && (this.chart.series[0].type === 'Column' || this.chart.series[0].type === 'Bar' || this.chart.series[0].type === 'Scatter' || this.chart.series[0].type === 'Bubble')) {\n      if (!this.rangeColorPoints[point.interior]) {\n        this.rangeColorPoints[point.interior] = [];\n      } else if (this.rangeColorPoints[point.interior] !== undefined) {\n        this.rangeColorPoints[point.interior].push(point);\n      }\n    }\n  };\n  /**\n   * Sets the empty point values.\n   *\n   * @param {Points} point - The point to be set.\n   * @param {number} i - The index of the point.\n   * @private\n   * @returns {void}\n   */\n  SeriesBase.prototype.pushData = function (point, i) {\n    point.index = i;\n    point.yValue = point.y;\n    point.series = this;\n    // To find the min, max for the axis range.\n    this.xMin = Math.min(this.xMin, point.xValue);\n    this.xMax = Math.max(this.xMax, point.xValue);\n    this.xData.push(point.xValue);\n  };\n  /**\n   * Retrieves the data point at the specified index with the given text mapping name and x-name.\n   *\n   * @param {number} i - The index of the data point to retrieve.\n   * @param {string} textMappingName - The name used to map text data.\n   * @param {string} xName - The name used for the x-axis.\n   * @returns {Points} - The data point at the specified index.\n   * @private\n   */\n  SeriesBase.prototype.dataPoint = function (i, textMappingName, xName) {\n    this.points[i] = new Points();\n    var point = this.points[i];\n    var currentViewData = this.currentViewData[i];\n    var getObjectValueByMappingString = this.enableComplexProperty ? getValue : this.getObjectValue;\n    point.x = getObjectValueByMappingString(xName, currentViewData);\n    point.high = getObjectValueByMappingString(this.high, currentViewData);\n    point.low = getObjectValueByMappingString(this.low, currentViewData);\n    point.open = getObjectValueByMappingString(this.open, currentViewData);\n    point.close = getObjectValueByMappingString(this.close, currentViewData);\n    point.volume = getObjectValueByMappingString(this.volume, currentViewData);\n    point.interior = getObjectValueByMappingString(this.pointColorMapping, currentViewData);\n    if (this instanceof Series) {\n      if (this.errorBar.visible) {\n        point.errorBarColor = getObjectValueByMappingString(this.errorBar.errorBarColorMapping, currentViewData);\n        point.verticalError = typeof this.errorBar.verticalError == 'string' ? getObjectValueByMappingString(this.errorBar.verticalError, currentViewData) : this.errorBar.verticalError;\n        point.horizontalError = typeof this.errorBar.horizontalError == 'string' ? getObjectValueByMappingString(this.errorBar.horizontalError, currentViewData) : this.errorBar.horizontalError;\n        point.verticalNegativeError = typeof this.errorBar.verticalNegativeError == 'string' ? getObjectValueByMappingString(this.errorBar.verticalNegativeError, currentViewData) : this.errorBar.verticalNegativeError;\n        point.verticalPositiveError = typeof this.errorBar.verticalPositiveError == 'string' ? getObjectValueByMappingString(this.errorBar.verticalPositiveError, currentViewData) : this.errorBar.verticalPositiveError;\n        point.horizontalNegativeError = typeof this.errorBar.horizontalNegativeError == 'string' ? getObjectValueByMappingString(this.errorBar.horizontalNegativeError, currentViewData) : this.errorBar.horizontalNegativeError;\n        point.horizontalPositiveError = typeof this.errorBar.horizontalPositiveError == 'string' ? getObjectValueByMappingString(this.errorBar.horizontalPositiveError, currentViewData) : this.errorBar.horizontalPositiveError;\n      }\n      point.y = getObjectValueByMappingString(this.yName, currentViewData);\n      point.size = getObjectValueByMappingString(this.size, currentViewData);\n      point.text = getObjectValueByMappingString(textMappingName, currentViewData);\n      point.tooltip = getObjectValueByMappingString(this.tooltipMappingName, currentViewData);\n      if (this.isAdvancedColorSupported()) {\n        this.rangeColorName = this.colorName.length > 0 ? this.colorName : this.yName;\n        point.colorValue = getObjectValueByMappingString(this.rangeColorName, currentViewData);\n        point.interior = this.getPointFillColor(point.interior, point.colorValue);\n      }\n    }\n    return point;\n  };\n  SeriesBase.prototype.isAdvancedColorSupported = function () {\n    if (isNullOrUndefined(this.isAdvancedColor)) {\n      if (this.chart.rangeColorSettings && this.chart.rangeColorSettings.length > 0 && (this.chart.series[0].type === 'Column' || this.chart.series[0].type === 'Bar' || this.chart.series[0].type === 'Scatter' || this.chart.series[0].type === 'Bubble')) {\n        this.isAdvancedColor = true;\n      } else {\n        this.isAdvancedColor = false;\n      }\n    }\n    return this.isAdvancedColor;\n  };\n  SeriesBase.prototype.getPointFillColor = function (pointFill, value) {\n    var color = pointFill;\n    if (value && this.chart.rangeColorSettings && this.chart.rangeColorSettings.length > 0) {\n      for (var _i = 0, _a = this.chart.rangeColorSettings; _i < _a.length; _i++) {\n        var rangeMap = _a[_i];\n        if (value >= rangeMap.start && value <= rangeMap.end) {\n          if (rangeMap.colors.length > 1) {\n            color = getColorByValue(rangeMap, value);\n          } else {\n            color = rangeMap.colors[0];\n          }\n        }\n      }\n    }\n    return color;\n  };\n  /**\n   * Pushes a category point to the data collection.\n   *\n   * @param {string} mappingName - The name of the mapping.\n   * @param {Object} data - The data to be pushed.\n   * @returns {Object} - The data point at the specified index.\n   * @private\n   */\n  SeriesBase.prototype.getObjectValue = function (mappingName, data) {\n    return data[mappingName];\n  };\n  /**\n   * Sets the specified data point as an empty point at the given index.\n   *\n   * @private\n   * @param {Points} point - The data point to set as empty.\n   * @param {number} i - The index of the data point.\n   * @returns {void}\n   */\n  SeriesBase.prototype.setEmptyPoint = function (point, i) {\n    if (!this.findVisibility(point)) {\n      point.visible = true;\n      return null;\n    }\n    point.isEmpty = true;\n    var mode = this instanceof Series && point.isPointInRange ? this.emptyPointSettings.mode : 'Drop';\n    switch (mode) {\n      case 'Zero':\n        point.visible = true;\n        if (this instanceof Series && this.seriesType.indexOf('HighLow') > -1) {\n          point.high = point.low = 0;\n          if (this.seriesType.indexOf('HighLowOpenClose') > -1) {\n            point.open = point.close = 0;\n          }\n        } else {\n          point.y = point.yValue = this.yData[i] = 0;\n        }\n        break;\n      case 'Average':\n        if (this instanceof Series) {\n          if (this.seriesType.indexOf('HighLow') > -1) {\n            point.high = isNullOrUndefined(point.high) || isNaN(+point.high) ? this.getAverage(this.high, i) : point.high;\n            point.low = isNullOrUndefined(point.low) || isNaN(+point.low) ? this.getAverage(this.low, i) : point.low;\n            if (this.seriesType.indexOf('HighLowOpenClose') > -1) {\n              point.open = isNullOrUndefined(point.open) || isNaN(+point.open) ? this.getAverage(this.open, i) : point.open;\n              point.close = isNullOrUndefined(point.close) || isNaN(+point.close) ? this.getAverage(this.close, i) : point.close;\n            }\n          } else {\n            point.y = point.yValue = this.yData[i] = this.getAverage(this.yName, i);\n          }\n        }\n        point.visible = true;\n        break;\n      case 'Drop':\n      case 'Gap':\n        this.yData[i] = null;\n        point.visible = false;\n        break;\n    }\n  };\n  SeriesBase.prototype.findVisibility = function (point) {\n    var type = this instanceof Series ? this.seriesType : 'HighLowOpenClose';\n    var yValues;\n    var yAxisMin = this.yAxis.minimum;\n    var yAxisMax = this.yAxis.maximum;\n    switch (type) {\n      case 'XY':\n        if (this.chart.chartAreaType === 'PolarRadar' && (!isNullOrUndefined(yAxisMin) && point.yValue < yAxisMin || !isNullOrUndefined(yAxisMax) && point.yValue > yAxisMax)) {\n          point.isPointInRange = false;\n          return true;\n        }\n        this.setXYMinMax(point.yValue);\n        this.yData.push(point.yValue);\n        if (this instanceof Series && this.type === 'Bubble') {\n          this.sizeMax = Math.max(this.sizeMax, isNullOrUndefined(point.size) || isNaN(+point.size) ? this.sizeMax : point.size);\n        }\n        return isNullOrUndefined(point.x) || isNullOrUndefined(point.y) || isNaN(+point.y);\n      case 'HighLow':\n        this.setHiloMinMax(point.high, point.low);\n        return isNullOrUndefined(point.x) || isNullOrUndefined(point.low) || isNaN(+point.low) || isNullOrUndefined(point.high) || isNaN(+point.high);\n      case 'HighLowOpenClose':\n        this.setHiloMinMax(point.high, point.low);\n        return isNullOrUndefined(point.x) || isNullOrUndefined(point.low) || isNaN(+point.low) || isNullOrUndefined(point.open) || isNaN(+point.open) || isNullOrUndefined(point.close) || isNaN(+point.close) || isNullOrUndefined(point.high) || isNaN(+point.high);\n      case 'BoxPlot':\n        yValues = (point.y || [null]).filter(function (value) {\n          return !isNullOrUndefined(value) && !isNaN(value);\n        }).sort(function (a, b) {\n          return a - b;\n        });\n        point.y = yValues;\n        this.yMin = Math.min(this.yMin, Math.min.apply(Math, yValues));\n        this.yMax = Math.max(this.yMax, Math.max.apply(Math, yValues));\n        return !yValues.length;\n    }\n  };\n  /**\n   * To get Y min max for the provided point seriesType XY.\n   *\n   * @param {number} yValue - The y value used to determine the minimum and maximum values for the x and y coordinates.\n   * @returns {void}\n   */\n  SeriesBase.prototype.setXYMinMax = function (yValue) {\n    var isLogAxis = this.yAxis.valueType === 'Logarithmic' || this.xAxis.valueType === 'Logarithmic';\n    var isNegativeValue = yValue < 0 || this.yAxis.rangePadding === 'None';\n    var seriesMinY;\n    if (this.isRectTypeSeries && !setRange(this.yAxis)) {\n      seriesMinY = isLogAxis ? yValue : isNegativeValue ? yValue : 0;\n    } else {\n      seriesMinY = yValue;\n    }\n    this.yMin = isLogAxis ? Math.min(this.yMin, isNullOrUndefined(seriesMinY) || isNaN(seriesMinY) || seriesMinY === 0 || seriesMinY.toString() === '0' || seriesMinY.toString() === '' ? this.yMin : seriesMinY) : Math.min(this.yMin, isNullOrUndefined(seriesMinY) || isNaN(seriesMinY) ? this.yMin : seriesMinY);\n    this.yMax = Math.max(this.yMax, isNullOrUndefined(yValue) || isNaN(yValue) ? this.yMax : yValue);\n  };\n  /**\n   * Sets the minimum and maximum values for the high and low values.\n   *\n   * @private\n   * @param {number} high - The high value used to determine the maximum value.\n   * @param {number} low - The low value used to determine the minimum value.\n   * @returns {void}\n   */\n  SeriesBase.prototype.setHiloMinMax = function (high, low) {\n    this.yMin = Math.min(this.yMin, Math.min(isNullOrUndefined(low) || isNaN(low) ? this.yMin : low, isNullOrUndefined(high) || isNaN(high) ? this.yMin : high));\n    this.yMax = Math.max(this.yMax, Math.max(isNullOrUndefined(low) || isNaN(low) ? this.yMax : low, isNullOrUndefined(high) || isNaN(high) ? this.yMax : high));\n  };\n  /**\n   * Finds the type of the series.\n   *\n   * @private\n   * @returns {void}\n   */\n  SeriesBase.prototype.getSeriesType = function () {\n    var type;\n    if (this instanceof Series) {\n      var seriesType = this.chart.chartAreaType === 'PolarRadar' ? this.drawType : this.type;\n      if (seriesType) {\n        switch (seriesType) {\n          case 'RangeColumn':\n          case 'RangeArea':\n          case 'RangeStepArea':\n          case 'SplineRangeArea':\n          case 'Hilo':\n            type = 'HighLow';\n            break;\n          case 'HiloOpenClose':\n          case 'Candle':\n            type = 'HighLowOpenClose';\n            break;\n          case 'BoxAndWhisker':\n            type = 'BoxPlot';\n            break;\n          default:\n            type = 'XY';\n        }\n      }\n    }\n    this.seriesType = type;\n  };\n  /**\n   * Pushes category data into the series points.\n   *\n   * @param {Points} point - The point to which category data will be pushed.\n   * @param {number} index - The index of the data point.\n   * @param {string} pointX - The x-value of the point.\n   * @returns {void}\n   * @private\n   */\n  SeriesBase.prototype.pushCategoryData = function (point, index, pointX) {\n    if (!this.chart.tooltip.shared) {\n      if (!this.visible) {\n        return null;\n      }\n    }\n    if (!this.xAxis.isIndexed) {\n      if (this.xAxis.indexLabels[pointX] === undefined) {\n        this.xAxis.indexLabels[pointX] = this.xAxis.labels.length;\n        this.xAxis.labels.push(pointX);\n      }\n      point.xValue = this.xAxis.indexLabels[pointX];\n    } else {\n      if (this.xAxis.labels[index]) {\n        this.xAxis.labels[index] += ', ' + pointX;\n      } else {\n        this.xAxis.labels.push(pointX);\n      }\n      // this.xAxis.labels[index as number] ? this.xAxis.labels[index as number] += ', ' + pointX :\n      //     this.xAxis.labels.push(pointX);\n      point.xValue = index;\n    }\n  };\n  /**\n   * Gets the average value of a member in the specified data array or current view data.\n   *\n   * @param {string} member - The member whose average is to be calculated.\n   * @param {number} i - The index of the data point.\n   * @param {Object} data - The data array from which to calculate the average. Defaults to the current view data.\n   * @returns {number} - The average value of the specified member.\n   */\n  SeriesBase.prototype.getAverage = function (member, i, data) {\n    if (data === void 0) {\n      data = this.currentViewData;\n    }\n    var previous = data[i - 1] ? data[i - 1][member] || 0 : 0;\n    var next = data[i + 1] ? data[i + 1][member] || 0 : 0;\n    return (previous + next) / 2;\n  };\n  /**\n   * Refreshes the data manager for the provided chart.\n   *\n   * @param {Chart} chart - The chart whose data manager is to be refreshed.\n   * @returns {void}\n   * @private\n   */\n  SeriesBase.prototype.refreshDataManager = function (chart) {\n    var _this = this;\n    this.chart = chart;\n    var dataSource;\n    var isAngular = 'isAngular';\n    if (chart[isAngular]) {\n      dataSource = Object.keys(this.dataSource).length ? this.dataSource : chart.dataSource;\n    } else {\n      dataSource = this.dataSource || chart.dataSource;\n    }\n    if (!(dataSource instanceof DataManager) && isNullOrUndefined(this.query)) {\n      this.dataManagerSuccess({\n        result: dataSource,\n        count: dataSource.length\n      }, false);\n      return;\n    }\n    var dataManager = this.dataModule.getData(this.dataModule.generateQuery().requiresCount());\n    dataManager.then(function (e) {\n      return _this.dataManagerSuccess(e);\n    });\n  };\n  SeriesBase.prototype.dataManagerSuccess = function (e, isRemoteData) {\n    if (isRemoteData === void 0) {\n      isRemoteData = true;\n    }\n    this.currentViewData = e.count ? e.result : [];\n    this.chart.allowServerDataBinding = false;\n    if (this instanceof Series) {\n      if (this.chart.stockChart) {\n        this.chart.stockChart.series[this.index].localData = this.currentViewData;\n      }\n      var argsData = {\n        name: seriesRender,\n        series: this,\n        data: this.currentViewData,\n        fill: this.interior\n      };\n      this.chart.trigger(seriesRender, argsData);\n      this.interior = argsData.fill;\n      this.currentViewData = argsData.data;\n    }\n    if (this.chart.stockChart && !(this instanceof Series)) {\n      this.currentViewData = this.chart.stockChart.findCurrentData(this.chart.stockChart.series[0].localData, this.chart.stockChart.series[0].xName);\n    }\n    this.processJsonData();\n    this.recordsCount = e.count;\n    this.refreshChart(isRemoteData);\n    this.currentViewData = null;\n  };\n  SeriesBase.prototype.refreshChart = function (isRemoteData) {\n    var chart = this.chart;\n    if (this instanceof Series) {\n      chart.visibleSeriesCount += isRemoteData ? 1 : 0;\n    }\n    chart.refreshTechnicalIndicator(this);\n    if (this instanceof Series && this.category !== 'TrendLine') {\n      for (var _i = 0, _a = this.trendlines; _i < _a.length; _i++) {\n        var trendline = _a[_i];\n        trendline.setDataSource(this, chart);\n      }\n    }\n    //if (chart.visibleSeries.length === (chart.visibleSeriesCount - chart.indicators.length)) {\n    if (chart.visibleSeries.length === chart.visibleSeriesCount) {\n      chart.refreshBound();\n      chart.trigger('loaded', {\n        chart: chart.isBlazor ? {} : chart\n      });\n      if (this.chart.stockChart && this.chart.stockChart.initialRender) {\n        this.chart.stockChart.initialRender = false;\n        this.chart.stockChart.stockChartDataManagerSuccess();\n      }\n    }\n    if (this instanceof Series) {\n      chart.visibleSeriesCount += isRemoteData ? 0 : 1;\n    }\n  };\n  __decorate([Property('')], SeriesBase.prototype, \"xName\", void 0);\n  __decorate([Property('')], SeriesBase.prototype, \"colorName\", void 0);\n  __decorate([Property('')], SeriesBase.prototype, \"high\", void 0);\n  __decorate([Property('')], SeriesBase.prototype, \"low\", void 0);\n  __decorate([Property('')], SeriesBase.prototype, \"open\", void 0);\n  __decorate([Property('')], SeriesBase.prototype, \"close\", void 0);\n  __decorate([Property('')], SeriesBase.prototype, \"volume\", void 0);\n  __decorate([Property('')], SeriesBase.prototype, \"pointColorMapping\", void 0);\n  __decorate([Property(true)], SeriesBase.prototype, \"visible\", void 0);\n  __decorate([Property(null)], SeriesBase.prototype, \"xAxisName\", void 0);\n  __decorate([Property(null)], SeriesBase.prototype, \"yAxisName\", void 0);\n  __decorate([Complex(null, Animation)], SeriesBase.prototype, \"animation\", void 0);\n  __decorate([Property(null)], SeriesBase.prototype, \"fill\", void 0);\n  __decorate([Property(1)], SeriesBase.prototype, \"width\", void 0);\n  __decorate([Property('')], SeriesBase.prototype, \"dashArray\", void 0);\n  __decorate([Property('')], SeriesBase.prototype, \"dataSource\", void 0);\n  __decorate([Property()], SeriesBase.prototype, \"query\", void 0);\n  __decorate([Collection([], ChartSegment)], SeriesBase.prototype, \"segments\", void 0);\n  __decorate([Property('X')], SeriesBase.prototype, \"segmentAxis\", void 0);\n  __decorate([Property(false)], SeriesBase.prototype, \"enableComplexProperty\", void 0);\n  return SeriesBase;\n}(ChildProperty);\nexport { SeriesBase };\n/**\n * The `Series` class is used to configure individual series in a chart.\n *\n * @public\n */\nvar Series = /** @class */function (_super) {\n  __extends(Series, _super);\n  function Series(parent, propName, defaultValue, isArray) {\n    var _this = _super.call(this, parent, propName, defaultValue, isArray) || this;\n    _this.visibleSeriesCount = 0;\n    /** @private */\n    _this.category = 'Series';\n    /** @private */\n    _this.isRectSeries = false;\n    /** @private */\n    _this.drawPoints = [];\n    /** @private */\n    _this.lowDrawPoints = [];\n    /** @private */\n    _this.delayedAnimation = false;\n    /** @private */\n    _this.rangeColorName = _this.colorName.length > 0 ? _this.colorName : _this.yName;\n    /** @private */\n    _this.currentData = [];\n    return _this;\n  }\n  /**\n   * Refresh the axis label.\n   *\n   * @returns {void}\n   * @private\n   */\n  Series.prototype.refreshAxisLabel = function () {\n    if (this.xAxis.valueType.indexOf('Category') === -1) {\n      return null;\n    }\n    this.xAxis.labels = [];\n    this.xAxis.indexLabels = {};\n    var option = {\n      skeleton: 'full',\n      type: 'dateTime'\n    };\n    var dateParser = this.chart.intl.getDateParser(option);\n    var dateFormatter = this.chart.intl.getDateFormat(option);\n    for (var _i = 0, _a = this.xAxis.series; _i < _a.length; _i++) {\n      var item = _a[_i];\n      if (item.visible && item.category !== 'TrendLine') {\n        item.xMin = Infinity;\n        item.xMax = -Infinity;\n        for (var _b = 0, _c = item.points; _b < _c.length; _b++) {\n          var point = _c[_b];\n          item.pushCategoryData(point, point.index, this.xAxis.valueType === 'DateTimeCategory' ? Date.parse(dateParser(dateFormatter(point.x))).toString() : point.x);\n          item.xMin = Math.min(item.xMin, point.xValue);\n          item.xMax = Math.max(item.xMax, point.xValue);\n        }\n      }\n    }\n  };\n  /**\n   * To get the series collection.\n   *\n   * @returns {void}\n   * @private\n   */\n  Series.prototype.findSeriesCollection = function (column, row, isStack) {\n    var seriesCollection = [];\n    for (var _i = 0, _a = row.axes; _i < _a.length; _i++) {\n      var rowAxis = _a[_i];\n      for (var _b = 0, _c = rowAxis.series; _b < _c.length; _b++) {\n        var rowSeries = _c[_b];\n        for (var _d = 0, _e = column.axes; _d < _e.length; _d++) {\n          var axis = _e[_d];\n          for (var _f = 0, _g = axis.series; _f < _g.length; _f++) {\n            var series = _g[_f];\n            if (series === rowSeries && series.visible && this.rectSeriesInChart(series, isStack)) {\n              seriesCollection.push(series);\n            }\n          }\n        }\n      }\n    }\n    return seriesCollection;\n  };\n  /**\n   * Checks if the series in the chart are rectangular.\n   *\n   * @param {Series} series - The series to be checked.\n   * @param {boolean} isStack - Specifies whether the series are stacked.\n   * @returns {boolean} - Returns true if the series in the chart are rectangular, otherwise false.\n   */\n  Series.prototype.rectSeriesInChart = function (series, isStack) {\n    var type = series.type.toLowerCase();\n    return type.indexOf('column') !== -1 || type.indexOf('bar') !== -1 || type.indexOf('histogram') !== -1 || type.indexOf('hiloopenclose') !== -1 || type.indexOf('candle') !== -1 || type.indexOf('pareto') !== -1 || type.indexOf('hilo') !== -1 || series.drawType.indexOf('Column') !== -1 || type.indexOf('waterfall') !== -1 || type.indexOf('boxandwhisker') !== -1 || isStack;\n  };\n  /**\n   * Calculates the stacked value for the chart.\n   *\n   * @param {boolean} isStacking100 - Specifies whether the stacking is 100%.\n   * @param {Chart} chart - The chart for which the stacked value is calculated.\n   * @returns {void}\n   * @private\n   */\n  Series.prototype.calculateStackedValue = function (isStacking100, chart) {\n    for (var _i = 0, _a = chart.columns; _i < _a.length; _i++) {\n      var columnItem = _a[_i];\n      for (var _b = 0, _c = chart.rows; _b < _c.length; _b++) {\n        var item = _c[_b];\n        this.calculateStackingValues(this.findSeriesCollection(columnItem, item, true), isStacking100);\n      }\n    }\n  };\n  Series.prototype.calculateStackingValues = function (seriesCollection, isStacking100) {\n    var startValues;\n    var endValues;\n    var yValues = [];\n    var lastPositive = [];\n    var lastNegative = [];\n    var stackingGroup;\n    var lastValue;\n    var value;\n    var frequencies = [];\n    if (isStacking100) {\n      frequencies = this.findFrequencies(seriesCollection);\n    }\n    var groupingValues = [];\n    var visiblePoints = [];\n    for (var i = 0; i < seriesCollection.length; i++) {\n      var series = seriesCollection[i];\n      if (!groupingValues[series.stackingGroup]) {\n        groupingValues[series.stackingGroup] = [];\n        groupingValues[series.stackingGroup].push(series);\n      } else if (groupingValues[series.stackingGroup] !== undefined) {\n        groupingValues[series.stackingGroup].push(series);\n      }\n    }\n    var keys = Object.keys(groupingValues);\n    for (var k = 0; k < keys.length; k++) {\n      var stackingSeies = [];\n      var stackedValues = [];\n      var seriesCollection_2 = groupingValues[keys[k]];\n      for (var _i = 0, seriesCollection_1 = seriesCollection_2; _i < seriesCollection_1.length; _i++) {\n        var series = seriesCollection_1[_i];\n        if (series.type.indexOf('Stacking') !== -1 || series.drawType.indexOf('Stacking') !== -1 && series.chart.chartAreaType === 'PolarRadar') {\n          stackingGroup = series.type.indexOf('StackingArea') !== -1 ? 'StackingArea100' : series.type.indexOf('StackingLine') !== -1 ? 'StackingLine100' : series.stackingGroup;\n          if (!lastPositive[stackingGroup]) {\n            lastPositive[stackingGroup] = [];\n            lastNegative[stackingGroup] = [];\n          }\n          yValues = series.yData;\n          startValues = [];\n          endValues = [];\n          stackingSeies.push(series);\n          visiblePoints = getVisiblePoints(series);\n          for (var j = 0, pointsLength = visiblePoints.length; j < pointsLength; j++) {\n            lastValue = 0;\n            value = +yValues[j]; // Fix for chart not rendering while y value is given as string issue\n            if (lastPositive[stackingGroup][visiblePoints[j].xValue] === undefined) {\n              lastPositive[stackingGroup][visiblePoints[j].xValue] = 0;\n            }\n            if (lastNegative[stackingGroup][visiblePoints[j].xValue] === undefined) {\n              lastNegative[stackingGroup][visiblePoints[j].xValue] = 0;\n            }\n            if (isStacking100) {\n              value = value / frequencies[stackingGroup][visiblePoints[j].xValue] * 100;\n              value = !isNaN(value) ? value : 0;\n              visiblePoints[j].percentage = +value.toFixed(2);\n            } else {\n              stackedValues[j] = stackedValues[j] ? stackedValues[j] + Math.abs(value) : Math.abs(value);\n            }\n            if (value >= 0) {\n              lastValue = lastPositive[stackingGroup][visiblePoints[j].xValue];\n              lastPositive[stackingGroup][visiblePoints[j].xValue] += value;\n            } else {\n              lastValue = lastNegative[stackingGroup][visiblePoints[j].xValue];\n              lastNegative[stackingGroup][visiblePoints[j].xValue] += value;\n            }\n            startValues.push(lastValue);\n            endValues.push(value + lastValue);\n            if (isStacking100 && endValues[j] > 100) {\n              endValues[j] = 100;\n            }\n          }\n          series.stackedValues = new StackValues(startValues, endValues);\n          var isLogAxis = series.yAxis.valueType === 'Logarithmic';\n          var isColumnBarType = series.type.indexOf('Column') !== -1 || series.type.indexOf('Bar') !== -1;\n          series.yMin = isLogAxis && isColumnBarType && series.yMin < 1 ? series.yMin : series.yAxis.startFromZero && series.yAxis.rangePadding === 'Auto' && series.yMin >= 0 ? 0 : parseFloat(Math.min.apply(0, isStacking100 ? startValues : endValues).toFixed(10));\n          series.yMax = Math.max.apply(0, endValues);\n          if (series.yMin > Math.min.apply(0, endValues)) {\n            series.yMin = isStacking100 ? -100 : isLogAxis && isColumnBarType && series.yMin < 1 ? series.yMin : Math.min.apply(0, endValues);\n          }\n          if (series.yMax < Math.max.apply(0, startValues)) {\n            series.yMax = 0;\n          }\n        }\n      }\n      this.findPercentageOfStacking(stackingSeies, stackedValues, isStacking100);\n    }\n  };\n  Series.prototype.findPercentageOfStacking = function (stackingSeies, values, isStacking100) {\n    for (var _i = 0, stackingSeies_1 = stackingSeies; _i < stackingSeies_1.length; _i++) {\n      var item = stackingSeies_1[_i];\n      if (isStacking100) {\n        return null;\n      }\n      for (var _a = 0, _b = getVisiblePoints(item); _a < _b.length; _a++) {\n        var point = _b[_a];\n        point.percentage = Math.abs(+(point.y / values[point.index] * 100).toFixed(2));\n      }\n    }\n  };\n  Series.prototype.findFrequencies = function (seriesCollection) {\n    var frequencies = [];\n    var stackingGroup;\n    var visiblePoints = [];\n    for (var _i = 0, seriesCollection_3 = seriesCollection; _i < seriesCollection_3.length; _i++) {\n      var series = seriesCollection_3[_i];\n      series.yAxis.isStack100 = series.type.indexOf('100') !== -1 ? true : false;\n      visiblePoints = getVisiblePoints(series);\n      if (series.type.indexOf('Stacking') !== -1) {\n        stackingGroup = series.type.indexOf('StackingArea') !== -1 ? 'StackingArea100' : series.type.indexOf('StackingLine') !== -1 ? 'StackingLine100' : series.stackingGroup;\n        if (!frequencies[stackingGroup]) {\n          frequencies[stackingGroup] = [];\n        }\n        for (var j = 0, pointsLength = visiblePoints.length; j < pointsLength; j++) {\n          if (frequencies[stackingGroup][visiblePoints[j].xValue] === undefined) {\n            frequencies[stackingGroup][visiblePoints[j].xValue] = 0;\n          }\n          if (series.yData[j] > 0) {\n            frequencies[stackingGroup][visiblePoints[j].xValue] += series.yData[j];\n          } else {\n            frequencies[stackingGroup][visiblePoints[j].xValue] -= series.yData[j];\n          }\n        }\n      }\n    }\n    return frequencies;\n  };\n  /* private dataManagerFailure(e: { result: Object[] }): void {\n       this.currentViewData = [];\n       this.refreshChart();\n   }*/\n  /**\n   * Renders the series on the chart.\n   *\n   * @param {Chart} chart - The chart on which the series is rendered.\n   * @returns {void}\n   * @private\n   */\n  Series.prototype.renderSeries = function (chart) {\n    if (this.chart.stockChart && this.xAxis.valueType === 'DateTimeCategory') {\n      for (var i = 0; i < this.points.length; i++) {\n        var index = this.xAxis.labels.indexOf(Date.parse(this.points[i].x.toString()).toString());\n        this.points[i].xValue = index;\n        if (chart.series.length > 1) {\n          this.xData[i] = index;\n          this.xMin = this.xMin > index ? index : this.xMin;\n          this.xMax = this.xMax < index ? index : this.xMax;\n        }\n      }\n      if (this instanceof Series && this.type.indexOf('Spline') > -1) {\n        var isArea = this.type.indexOf('Area') > -1;\n        var isRange = this.type.indexOf('Range') > -1;\n        this.chart['spline' + (isArea ? isRange ? 'RangeArea' : 'Area' : '') + 'SeriesModule'].findSplinePoint(this);\n      }\n    }\n    var seriesType = firstToLowerCase(this.type);\n    seriesType = seriesType.replace('100', '');\n    if (chart[seriesType + 'SeriesModule']) {\n      if (this.category !== 'Indicator' && this.category !== 'TrendLine') {\n        this.createSeriesElements(chart);\n      }\n      this.visiblePoints = getVisiblePoints(this);\n      if (this.chart.enableCanvas) {\n        this.chart.canvasRender.ctx.save();\n        this.chart.canvasRender.ctx.beginPath();\n        if (chart.requireInvertedAxis) {\n          this.chart.canvasRender.ctx.rect(this.yAxis.rect.x, this.xAxis.rect.y, this.yAxis.rect.width, this.xAxis.rect.height);\n        } else {\n          this.chart.canvasRender.ctx.rect(this.xAxis.rect.x, this.yAxis.rect.y, this.xAxis.rect.width, this.yAxis.rect.height);\n        }\n        this.chart.canvasRender.ctx.clip();\n        chart[seriesType + 'SeriesModule'].render(this, this.xAxis, this.yAxis, chart.requireInvertedAxis);\n        this.chart.canvasRender.ctx.restore();\n      } else {\n        chart[seriesType + 'SeriesModule'].render(this, this.xAxis, this.yAxis, chart.requireInvertedAxis);\n      }\n      if (this.category !== 'Indicator') {\n        if (this.errorBar.visible) {\n          this.chart.errorBarModule.render(this);\n        }\n        if (this.marker.dataLabel.visible) {\n          if (this.chart.enableCanvas) {\n            this.chart.canvasRender.ctx.save();\n            this.chart.canvasRender.ctx.beginPath();\n            if (chart.requireInvertedAxis) {\n              this.chart.canvasRender.ctx.rect(this.yAxis.rect.x, this.xAxis.rect.y, this.yAxis.rect.width, this.xAxis.rect.height);\n            } else {\n              this.chart.canvasRender.ctx.rect(this.xAxis.rect.x, this.yAxis.rect.y, this.xAxis.rect.width, this.yAxis.rect.height);\n            }\n            this.chart.canvasRender.ctx.clip();\n            chart.dataLabelModule.render(this, this.chart, this.marker.dataLabel);\n            this.chart.canvasRender.ctx.restore();\n          } else {\n            chart.dataLabelModule.render(this, this.chart, this.marker.dataLabel);\n          }\n        }\n        this.appendSeriesElement(chart.seriesElements, chart);\n      }\n      if (!this.chart.enableCanvas) {\n        this.performAnimation(chart, seriesType, this.errorBar, this.marker, this.marker.dataLabel);\n      }\n    }\n  };\n  /**\n   * Creates elements for the series on the chart.\n   *\n   * @param {Chart} chart - The chart for which series elements are created.\n   * @returns {void}\n   * @private\n   */\n  Series.prototype.createSeriesElements = function (chart) {\n    if (this.category !== 'Indicator') {\n      var elementId = chart.element.id;\n      // 8 for extend border value 5 for extend size value\n      var explodeValue = this.marker.border.width + 8 + 5;\n      var render = this.type === 'Bubble' || this.type === 'Scatter' || !this.marker.visible && chart.tooltip.shared && chart.enableCanvas ? chart.svgRenderer : chart.renderer;\n      var index = this.index === undefined ? this.category : this.index;\n      var markerHeight = void 0;\n      var markerWidth = void 0;\n      var options = void 0;\n      if (this.type === 'Scatter' || this.drawType === 'Scatter') {\n        markerHeight = (this.marker.height + explodeValue) / 2;\n        markerWidth = (this.marker.width + explodeValue) / 2;\n      } else {\n        markerHeight = 0;\n        markerWidth = 0;\n      }\n      if (chart.chartAreaType === 'PolarRadar') {\n        var markerMaxValue = this.drawType === 'Scatter' ? Math.max(this.marker.width, this.marker.height) : 0;\n        options = new CircleOption(elementId + '_ChartSeriesClipRect_' + index, 'transparent', {\n          width: 1,\n          color: 'Gray'\n        }, 1, this.clipRect.width / 2 + this.clipRect.x, this.clipRect.height / 2 + this.clipRect.y, chart.radius + markerMaxValue);\n        this.clipRectElement = appendClipElement(chart.redraw, options, render, 'drawCircularClipPath');\n      } else {\n        options = new RectOption(elementId + '_ChartSeriesClipRect_' + index, 'transparent', {\n          width: 1,\n          color: 'Gray'\n        }, 1, {\n          x: this.xAxis.columnIndex === 0 ? -markerWidth : 0,\n          y: this.yAxis.rowIndex === chart.rows.length - 1 ? -markerHeight : 0,\n          width: this.clipRect.width + (this.xAxis.columnIndex === chart.columns.length - 1 ? markerWidth * 2 : markerWidth),\n          height: this.clipRect.height + (this.yAxis.rowIndex === 0 ? markerHeight * 2 : markerHeight)\n        });\n        this.clipRectElement = appendClipElement(chart.redraw, options, render);\n      }\n      var transform = chart.chartAreaType === 'Cartesian' ? 'translate(' + this.clipRect.x + ',' + this.clipRect.y + ')' : '';\n      this.symbolElement = null;\n      this.seriesElement = render.createGroup({\n        'id': elementId + 'SeriesGroup' + index,\n        'transform': transform,\n        'clip-path': 'url(#' + elementId + '_ChartSeriesClipRect_' + index + ')'\n      });\n      if (this.seriesElement) {\n        this.seriesElement.setAttribute('role', this.accessibility.accessibilityRole ? this.accessibility.accessibilityRole : 'region');\n        this.seriesElement.setAttribute('tabindex', this.accessibility.focusable ? String(this.accessibility.tabIndex) : '-1');\n        this.seriesElement.style.outline = 'none';\n        this.seriesElement.setAttribute('aria-label', this.accessibility.accessibilityDescription ? this.accessibility.accessibilityDescription : this.name + ',' + this.type + ' series with ' + this.points.length + ' data points');\n        this.seriesElement.setAttribute('aria-hidden', 'false');\n      }\n      if (!this.chart.enableCanvas || this.type === 'Bubble') {\n        this.seriesElement.setAttribute('tabindex', this.accessibility.focusable ? index === 0 ? '0' : !this.checkTabindex(chart.visibleSeries, index) ? String(this.accessibility.tabIndex) : '' : '-1');\n        this.seriesElement.style.outline = 'none';\n        this.seriesElement.appendChild(this.clipRectElement);\n      }\n    }\n  };\n  Series.prototype.checkTabindex = function (visibleSeries, index) {\n    for (var i = 0; i < index; i++) {\n      if (visibleSeries[i].visible) {\n        return true;\n      }\n    }\n    return false;\n  };\n  /**\n   * Appends a series element to the chart.\n   *\n   * @param {Element} element - The series element to append.\n   * @param {Chart} chart - The chart to which the series element will be appended.\n   * @returns {void}\n   * @private\n   */\n  Series.prototype.appendSeriesElement = function (element, chart) {\n    var marker = this.marker;\n    var dataLabel = marker.dataLabel;\n    var redraw = chart.redraw;\n    if (this.category !== 'TrendLine') {\n      appendChildElement(chart.enableCanvas, chart.seriesElements, this.seriesElement, redraw);\n      var errorBar = this.errorBar;\n      if (errorBar.visible) {\n        if (chart.chartAreaType === 'PolarRadar') {\n          appendChildElement(chart.enableCanvas, chart.seriesElements, this.seriesElement, redraw);\n        } else {\n          appendChildElement(chart.enableCanvas, chart.seriesElements, this.errorBarElement, redraw);\n        }\n      }\n    }\n    if (marker.visible && (chart.chartAreaType === 'Cartesian' || this.drawType !== 'Scatter' && chart.chartAreaType === 'PolarRadar') && this.type !== 'Scatter' && this.type !== 'Bubble' && this.type !== 'Candle' && this.type !== 'Hilo' && this.type !== 'HiloOpenClose' && this.symbolElement) {\n      appendChildElement(chart.enableCanvas, chart.seriesElements, this.symbolElement, redraw);\n    }\n    if (dataLabel.visible && this.textElement) {\n      appendChildElement(chart.enableCanvas, chart.dataLabelElements, this.shapeElement, redraw);\n      appendChildElement(chart.enableCanvas, chart.dataLabelElements, this.textElement, redraw);\n    }\n    if (!chart.enableCanvas && chart.dataLabelElements.hasChildNodes()) {\n      chart.seriesElements.appendChild(chart.dataLabelElements);\n    }\n  };\n  /**\n   * Performs animation for the specified chart elements.\n   *\n   * @param {Chart} chart - The chart for which animation is performed.\n   * @param {string} type - The type of animation to be performed.\n   * @param {ErrorBarSettingsModel} errorBar - The error bar settings for the animation.\n   * @param {MarkerSettingsModel} marker - The marker settings for the animation.\n   * @param {DataLabelSettingsModel} dataLabel - The data label settings for the animation.\n   * @returns {void}\n   * @private\n   */\n  Series.prototype.performAnimation = function (chart, type, errorBar, marker, dataLabel) {\n    if ((this.animation.enable && animationMode !== 'Disable' || animationMode === 'Enable') && chart.animateSeries && (!chart.stockChart || !chart.stockChart.isStockChartRendered)) {\n      chart[type + 'SeriesModule'].doAnimation(this);\n      if (errorBar.visible) {\n        chart.errorBarModule.doErrorBarAnimation(this);\n      }\n      if (marker.visible && (this.isRectSeries || this.type === 'Line' || this.type === 'Polar' || this.type === 'Radar')) {\n        chart.markerRender.doMarkerAnimation(this);\n      }\n      //to datalabel animation disabled for edge and IE\n      if (dataLabel.visible && Browser.info.name !== 'edge' && !Browser.isIE) {\n        chart.dataLabelModule.doDataLabelAnimation(this);\n      }\n    }\n  };\n  /**\n   * Sets the color of a data point.\n   *\n   * @param {Points} point - The data point.\n   * @param {string} color - The color to set.\n   * @returns {string} - The updated color.\n   * @private\n   */\n  Series.prototype.setPointColor = function (point, color) {\n    color = point.interior || color;\n    return point.isEmpty ? this.emptyPointSettings.fill || color : color;\n  };\n  /**\n   * Sets the border color of a data point.\n   *\n   * @param {Points} point - The data point.\n   * @param {BorderModel} border - The border color to set.\n   * @returns {BorderModel} - The updated border color.\n   * @private\n   */\n  Series.prototype.setBorderColor = function (point, border) {\n    border.width = point.isEmpty ? this.emptyPointSettings.border.width || border.width : border.width;\n    border.color = point.isEmpty ? this.emptyPointSettings.border.color || border.color : border.color;\n    return border;\n  };\n  /**\n   * Adds a data point to the data source.\n   *\n   * @function addPoint\n   * @param {Object} dataPoint - The data point to be added.\n   * @param {number} duration - The duration for the animation.\n   * @returns {void}\n   */\n  Series.prototype.addPoint = function (dataPoint, duration) {\n    var yMin = this.yMin;\n    var yMax = this.yMax;\n    this.removeTrackballElements();\n    this.dataSource.push(dataPoint);\n    if (this.type === 'Radar' || this.type === 'Polar') {\n      return this.chart.refresh();\n    }\n    if (this.type === 'Histogram') {\n      this.currentViewData = this.chart[firstToLowerCase(this.type) + 'SeriesModule'].processInternalData(extend([], this.dataSource, null, true), this);\n      for (var i = 0; i < this.currentViewData.length; i++) {\n        this.updatePoint(i);\n      }\n    } else {\n      this.currentViewData = this.dataSource;\n      var pointIndex = this.points.length === 0 ? 0 : this.points[this.points.length - 1].index + 1;\n      this.updatePoint(pointIndex);\n    }\n    if (this.category === 'Pareto') {\n      var dataSource = extend([], this.dataSource, null, true);\n      var series = this.chart.visibleSeries[this.index + this.chart.series.length];\n      series.currentViewData = this.chart.paretoSeriesModule.performCumulativeCalculation(dataSource, this);\n      for (var i = 0; i < series.currentViewData.length; i++) {\n        if (!series.points[i]) {\n          series.updatePoint(i);\n        }\n        series.points[i].y = series.points[i].yValue = series.currentViewData[i][series.yName];\n      }\n    }\n    this.updateSplineValue();\n    this.chart.calculateStackValues();\n    this.chart.redraw = this.chart.enableAnimation;\n    var chartDuration = this.chart.duration;\n    this.chart.duration = isNullOrUndefined(duration) ? 500 : duration;\n    this.chart.animateSeries = false;\n    this.chart.pointsAdded = true;\n    if (this.chart.enableAnimation && !(this.isRectSeries || this.type === 'Bubble' || this.type === 'Scatter') && this.type.indexOf('step') === -1) {\n      if (this.marker && this.marker.visible && this.visible) {\n        for (var i = this.points.length - 2; i >= 0; i--) {\n          if (this.points[i] && !isNullOrUndefined(this.points[this.points.length - 2].y) && this.points[i].symbolLocations && this.points[i].symbolLocations[0] !== undefined) {\n            this.chart.markerRender.renderMarker(this, this.points[this.points.length - 2], this.points[i].symbolLocations[0], null, true);\n            break;\n          }\n        }\n      }\n    }\n    if (this.yMin >= yMin && this.yMax <= yMax) {\n      if (!setRange(this.xAxis)) {\n        this.xAxis.baseModule.calculateRangeAndInterval(new Size(this.xAxis.rect.width, this.chart.availableSize.height), this.xAxis);\n        this.xAxis.updateAxis();\n      }\n      this.chart.pointsAdded = false;\n      this.updateSeries(true, false);\n    }\n    if (this.yMin < yMin || this.yMax > yMax) {\n      this.updateChartAxis();\n      this.chart.pointsAdded = false;\n      this.updateSeries(true, true);\n    }\n    this.chart.redraw = false;\n    this.chart.duration = chartDuration;\n  };\n  /**\n   * Removes a data point from the series data source at the specified index.\n   *\n   * @function removePoint\n   * @param {number} index - The index of the data point to be removed.\n   * @param {number} duration - The duration for the animation.\n   * @returns {void}\n   */\n  Series.prototype.removePoint = function (index, duration) {\n    var dataSource = extend([], this.dataSource, null, true);\n    var chartDuration = this.chart.duration;\n    if (dataSource.length > 0 && index >= 0 && index < dataSource.length) {\n      dataSource.splice(index, 1);\n      this.dataSource.splice(index, 1);\n      this.removeTrackballElements(index);\n      if (this.type === 'Radar' || this.type === 'Polar') {\n        return this.chart.refresh();\n      }\n      this.chart.redraw = this.chart.enableAnimation;\n      this.chart.animateSeries = false;\n      this.chart.pointsAdded = true;\n      this.chart.duration = isNullOrUndefined(duration) ? 500 : duration;\n      if (this.type === 'Histogram') {\n        var length_1 = this.points.length;\n        this.points = [];\n        this.visiblePoints = [];\n        this.currentViewData = this.chart[firstToLowerCase(this.type) + 'SeriesModule'].processInternalData(extend([], this.dataSource, null, true), this);\n        for (var i = 0; i < this.currentViewData.length; i++) {\n          this.updatePoint(i);\n        }\n        if (length_1 > this.points.length) {\n          this.removedPointIndex = index;\n        }\n      } else {\n        this.removedPointIndex = index;\n        this.points.splice(index, 1);\n        this.visiblePoints.splice(index, 1);\n      }\n      this.yData = [];\n      this.xData = [];\n      var yMin = this.yMin;\n      var yMax = this.yMax;\n      this.yMin = Infinity;\n      this.xMin = Infinity;\n      this.yMax = -Infinity;\n      this.xMax = -Infinity;\n      if (this.xAxis.valueType.indexOf('Category') > -1 && this.chart.series.length === 1) {\n        this.xAxis.labels = [];\n        this.xAxis.indexLabels = {};\n      }\n      if (index === 0) {\n        this.chart.pointsRemoved = this.chart.enableAnimation;\n      }\n      for (var i = 0; i < this.points.length; i++) {\n        this.updatePointsAfterRemoval(i);\n      }\n      if (this.category === 'Pareto') {\n        var series = this.chart.visibleSeries[this.index + this.chart.series.length];\n        series.yMin = Infinity;\n        series.xMin = Infinity;\n        series.yMax = -Infinity;\n        series.xMax = -Infinity;\n        series.points.splice(index, 1);\n        series.visiblePoints.splice(index, 1);\n        series.currentViewData = this.chart.paretoSeriesModule.performCumulativeCalculation(this.dataSource, this);\n        for (var i = 0; i < series.currentViewData.length; i++) {\n          series.points[i].y = series.points[i].yValue = series.currentViewData[i][series.yName];\n          series.updatePointsAfterRemoval(i);\n        }\n      }\n      this.updateSplineValue();\n      this.chart.calculateStackValues();\n      if (!setRange(this.xAxis) && yMax === this.yMax && yMin === this.yMin) {\n        this.xAxis.baseModule.calculateRangeAndInterval(new Size(this.xAxis.rect.width, this.chart.availableSize.height), this.xAxis);\n        this.xAxis.updateAxis();\n        this.createSeriesElements(this.chart);\n        this.chart.pointsAdded = false;\n        this.updateSeries(true, false);\n      } else if (yMax < this.yMax || yMin > this.yMin || yMax > this.yMax || yMin < this.yMin) {\n        this.updateChartAxis();\n        this.createSeriesElements(this.chart);\n        this.chart.pointsAdded = false;\n        this.updateSeries(true, true);\n      }\n    }\n    appendChildElement(this.chart.enableCanvas, this.chart.seriesElements, this.seriesElement, true);\n    this.chart.redraw = false;\n    this.chart.duration = chartDuration;\n    this.chart.pointsRemoved = false;\n    this.removedPointIndex = null;\n  };\n  Series.prototype.updatePointsAfterRemoval = function (index) {\n    var point = this.points[index];\n    var option = {\n      skeleton: 'full',\n      type: 'dateTime'\n    };\n    var dateParser = this.chart.intl.getDateParser(option);\n    var dateFormatter = this.chart.intl.getDateFormat(option);\n    if (this.xAxis.valueType === 'Category' && this.chart.series.length === 1) {\n      this.pushCategoryData(point, index, point.x);\n    } else if (this.xAxis.valueType === 'DateTimeCategory' && this.chart.series.length === 1) {\n      this.pushCategoryData(point, index, Date.parse(dateParser(dateFormatter(point.x))).toString());\n    }\n    this.pushData(point, index);\n    this.setEmptyPoint(this.points[index], index);\n  };\n  /**\n   * Removes trackball elements from the series.\n   *\n   * @param {number} index - The index of the data point.\n   * @returns {void}\n   */\n  Series.prototype.removeTrackballElements = function (index) {\n    if (this.marker.visible) {\n      if (index !== undefined) {\n        var baseId = this.chart.element.id + '_Series_' + this.index + '_Point_' + index + '_Trackball_';\n        var trackball0 = getElement(baseId + '0');\n        if (trackball0) {\n          trackball0.remove();\n        }\n        var trackball1 = getElement(baseId + '1');\n        if (trackball1) {\n          trackball1.remove();\n        }\n        var symbolElement = getElement(this.chart.element.id + '_Series_' + this.index + '_Point_' + index + '_Symbol');\n        if (symbolElement) {\n          symbolElement.setAttribute('visibility', 'visible');\n        }\n      } else {\n        var baseClassPattern = this.chart.element.id + '_EJ2-Trackball_Series_' + this.index + '_Point_';\n        var elements = document.querySelectorAll(\"[class*=\\\"\" + baseClassPattern + \"\\\"]\");\n        if (elements[0]) {\n          var pointIndexMatch = elements[0].id.match(/_Point_(\\d+)_/);\n          var pointIndex = pointIndexMatch ? parseInt(pointIndexMatch[1], 10) : null;\n          elements[0].remove();\n          var symbolElement = getElement(this.chart.element.id + '_Series_' + this.index + '_Point_' + pointIndex + '_Symbol');\n          if (symbolElement) {\n            symbolElement.setAttribute('visibility', 'visible');\n          }\n        }\n        if (elements[1]) {\n          elements[1].remove();\n        }\n      }\n    }\n    if (this.chart.tooltip.enable) {\n      this.chart.tooltipModule.previousPoints = [];\n      var tooltipElement = getElement(this.chart.element.id + '_tooltip');\n      if (tooltipElement) {\n        tooltipElement.remove();\n      }\n    }\n  };\n  /**\n   * Sets the data source with the provided data.\n   *\n   * @function setData\n   * @param {Object[]} data - An array of objects representing the data points.\n   * @param {number} duration - The duration for the animation.\n   * @returns {void}\n   */\n  Series.prototype.setData = function (data, duration) {\n    var _this = this;\n    if (!data) {\n      return null;\n    }\n    var updatedData = [];\n    if (this.dataSource.length === data.length) {\n      for (var i = 0; i < data.length; i++) {\n        if (data[i][this.xName] instanceof Date) {\n          updatedData.push(data[i][this.xName].getTime());\n        } else {\n          updatedData.push(data[i][this.xName]);\n        }\n        if (this.currentData.length < this.dataSource.length) {\n          var dataSource = extend([], this.dataSource, null, true);\n          if (dataSource[i][this.xName] instanceof Date) {\n            this.currentData.push(dataSource[i][this.xName].getTime());\n          } else {\n            this.currentData.push(dataSource[i][this.xName]);\n          }\n        }\n      }\n    }\n    var isSameData = updatedData.every(function (element) {\n      return _this.currentData.indexOf(element) !== -1;\n    });\n    if (this.currentViewData) {\n      isSameData = true;\n    }\n    var isXAxisChanged = false;\n    var yMin = this.yMin;\n    var yMax = this.yMax;\n    this.yMin = Infinity;\n    this.yMax = -Infinity;\n    var points = [];\n    this.chart.dataLabelCollections = [];\n    this.chart.rotatedDataLabelCollections = [];\n    var samePoints = false;\n    var index = null;\n    if (this.dataSource.length === data.length && !(this.type === 'Radar' || this.type === 'Polar') && isSameData) {\n      samePoints = true;\n      this.yData = [];\n      if (this.type === 'Histogram' && this.dataSource.length === data.length) {\n        var newHistogramData = this.chart[firstToLowerCase(this.type) + 'SeriesModule'].processInternalData(extend([], data, null, true), this);\n        this.currentViewData = newHistogramData;\n        for (var j = 0; j < newHistogramData.length; j++) {\n          this.updatePoint(j);\n        }\n      } else {\n        for (var i = 0; i < data.length; i++) {\n          var newData = data[i][this.xName];\n          var existingData = this.dataSource[i][this.xName];\n          if (data[i][this.xName] instanceof Date) {\n            newData = data[i][this.xName].getTime();\n            existingData = this.dataSource[i][this.xName].getTime();\n          }\n          if (this.currentData[i] !== newData) {\n            isXAxisChanged = true;\n          }\n          var point = this.points[i];\n          var getObjectValueByMappingString = this.enableComplexProperty ? getValue : this.getObjectValue;\n          var existingPoint = this.dataSource[i];\n          var newPoint = data[i];\n          if (this.seriesType === 'XY' || this.seriesType === 'BoxPlot') {\n            point.y = getObjectValueByMappingString(this.yName, newPoint);\n            if (this.type === 'Bubble' && existingPoint[this.size] !== newPoint[this.size]) {\n              point.size = getObjectValueByMappingString(this.size, newPoint);\n            }\n            points.push(i);\n          } else if (existingPoint[this.high] !== newPoint[this.high] || existingPoint[this.low] !== newPoint[this.low] || existingPoint[this.open] !== newPoint[this.open] || existingPoint[this.close] !== newPoint[this.close] || existingPoint[this.volume] !== newPoint[this.volume]) {\n            point.high = getObjectValueByMappingString(this.high, newPoint);\n            point.low = getObjectValueByMappingString(this.low, newPoint);\n            point.open = getObjectValueByMappingString(this.open, newPoint);\n            point.close = getObjectValueByMappingString(this.close, newPoint);\n            point.volume = getObjectValueByMappingString(this.volume, newPoint);\n            points.push(i);\n          }\n          point.yValue = point.y;\n          point.x = getObjectValueByMappingString(this.xName, newPoint);\n          if (!this.currentViewData) {\n            point.index = this.xAxis.valueType === 'DateTime' && typeof point.x !== 'number' ? this.currentData.indexOf(point.x.getTime()) : this.currentData.indexOf(point.x);\n          }\n          if ((this.xAxis.valueType === 'Category' || this.xAxis.valueType === 'DateTimeCategory') && i < this.xAxis.visibleLabels.length) {\n            this.xAxis.visibleLabels[i].value = updatedData.indexOf(this.currentData[i * this.xAxis.visibleRange.interval]);\n            this.xAxis.labels[i] = String(updatedData[i]);\n          }\n          this.setEmptyPoint(point, i);\n          this.dataSource[i] = data[i];\n        }\n      }\n    }\n    if (!samePoints) {\n      this.dataSource = data;\n    } else {\n      this.chart.redraw = this.chart.enableAnimation;\n      this.chart.animateSeries = false;\n      this.chart.pointsAdded = true;\n      var chartDuration = this.chart.duration;\n      this.chart.duration = isNullOrUndefined(duration) ? 500 : duration;\n      if (this.type.indexOf('Stacking') !== -1) {\n        this.chart.calculateStackValues();\n      }\n      this.updateSplineValue();\n      if (yMax === this.yMax && yMin === this.yMin && this.visible) {\n        this.chart.pointsAdded = false;\n        this.chart[firstToLowerCase(this.category === 'Pareto' ? 'Column' : this.type.replace('100', '')) + 'SeriesModule'].updateDirection(this, points, this.chart.requireInvertedAxis);\n        if (this.chart.annotationModule) {\n          this.chart.annotationModule.renderAnnotations(getElement(this.chart.element.id + '_Secondary_Element'));\n        }\n        if (!setRange(this.xAxis) && isXAxisChanged) {\n          this.xAxis.updateAxis();\n        }\n      } else if ((yMax < this.yMax || yMin > this.yMin || yMax > this.yMax || yMin < this.yMin) && this.visible) {\n        var maximumLabelWidth = this.yAxis.maxLabelSize.width;\n        this.yAxis.baseModule.calculateRangeAndInterval(new Size(this.chart.availableSize.width, this.yAxis.rect.height), this.yAxis);\n        if (maximumLabelWidth < this.yAxis.maxLabelSize.width) {\n          this.chart.calculateBounds();\n          this.chart.axisCollections.forEach(function (axis) {\n            if (!setRange(axis)) {\n              axis.updateAxis();\n            }\n          });\n          this.chart.chartAxisLayoutPanel.drawPaneLines(this.chart);\n          this.chart.renderAreaBorder();\n        } else {\n          if (!setRange(this.yAxis)) {\n            this.yAxis.updateAxis();\n          }\n          if (!setRange(this.xAxis) && isXAxisChanged) {\n            this.xAxis.updateAxis();\n          }\n          if (this.type === 'Histogram' && !setRange(this.xAxis)) {\n            this.xAxis.baseModule.calculateRangeAndInterval(new Size(this.xAxis.rect.width, this.chart.availableSize.height), this.xAxis);\n            this.xAxis.updateAxis();\n          }\n        }\n        this.chart.pointsAdded = false;\n        if (isXAxisChanged) {\n          this.chart[firstToLowerCase(this.category === 'Pareto' ? 'Column' : this.type.replace('100', '')) + 'SeriesModule'].updateDirection(this, points, this.chart.requireInvertedAxis);\n          index = this.index;\n        }\n        this.updateSeries(false, true, index);\n        if (this.chart.stripLineModule) {\n          this.chart.stripLineModule.renderStripLine(this.chart, 'Behind', this.chart.axisCollections);\n        }\n      }\n      this.chart.redraw = false;\n      this.chart.pointsRemoved = false;\n      this.chart.duration = chartDuration;\n    }\n  };\n  /**\n   * Updates the chart axes based on current data and axis bounds.\n   *\n   * @returns {void}\n   */\n  Series.prototype.updateChartAxis = function () {\n    var maximumLabelWidth = this.yAxis.maxLabelSize.width;\n    this.yAxis.baseModule.calculateRangeAndInterval(new Size(this.chart.availableSize.width, this.yAxis.rect.height), this.yAxis);\n    if (maximumLabelWidth < this.yAxis.maxLabelSize.width) {\n      this.chart.calculateBounds();\n      this.chart.axisCollections.forEach(function (axis) {\n        if (!setRange(axis)) {\n          axis.updateAxis();\n        }\n      });\n      this.chart.chartAxisLayoutPanel.drawPaneLines(this.chart);\n      this.chart.renderAreaBorder();\n    } else {\n      if (!setRange(this.xAxis)) {\n        this.xAxis.baseModule.calculateRangeAndInterval(new Size(this.xAxis.rect.width, this.chart.availableSize.height), this.xAxis);\n        this.xAxis.updateAxis();\n      }\n      if (!setRange(this.yAxis)) {\n        this.yAxis.updateAxis();\n      }\n    }\n    if (this.chart.stripLineModule) {\n      this.chart.stripLineModule.renderStripLine(this.chart, 'Behind', this.chart.axisCollections);\n    }\n  };\n  Series.prototype.updateSeries = function (xAxis, yAxis, index) {\n    var seriesCollection = [];\n    if (xAxis && yAxis) {\n      var set = new Set(this.xAxis.series.concat(this.yAxis.series));\n      set.forEach(function (series) {\n        seriesCollection.push(series);\n      });\n    } else {\n      seriesCollection = xAxis ? this.xAxis.series.slice() : this.yAxis.series.slice();\n    }\n    for (var _i = 0, seriesCollection_4 = seriesCollection; _i < seriesCollection_4.length; _i++) {\n      var series = seriesCollection_4[_i];\n      if (series.visible && series.index !== index) {\n        findClipRect(series, this.chart.enableCanvas);\n        var transform = 'translate(' + this.clipRect.x + ',' + this.clipRect.y + ')';\n        series.seriesElement.setAttribute('transform', transform);\n        series.chart[firstToLowerCase(series.type.replace('100', '')) + 'SeriesModule'].render(series, series.xAxis, series.yAxis, series.chart.requireInvertedAxis, series.chart.enableAnimation);\n        if (series.marker.visible && series.chart.chartAreaType === 'Cartesian' && series.type !== 'Scatter' && series.type !== 'Bubble' && series.type !== 'Candle' && series.type !== 'Hilo' && series.type !== 'HiloOpenClose' && series.symbolElement) {\n          series.symbolElement.setAttribute('transform', transform);\n          appendChildElement(series.chart.enableCanvas, series.chart.seriesElements, series.symbolElement, true);\n        }\n        if (series.marker.dataLabel.visible && series.chart.dataLabelModule) {\n          series.chart.dataLabelCollections = [];\n          series.chart.dataLabelModule.render(series, series.chart, series.marker.dataLabel);\n          if (series.textElement) {\n            if (series.shapeElement) {\n              series.shapeElement.setAttribute('transform', transform);\n            }\n            appendChildElement(series.chart.enableCanvas, series.chart.dataLabelElements, series.shapeElement, true);\n            series.textElement.setAttribute('transform', transform);\n            appendChildElement(series.chart.enableCanvas, series.chart.dataLabelElements, series.textElement, true);\n          }\n        }\n        if (series.chart.annotationModule) {\n          series.chart.annotationModule.renderAnnotations(getElement(series.chart.element.id + '_Secondary_Element'));\n        }\n      }\n    }\n  };\n  Series.prototype.updatePoint = function (index) {\n    var point = new Points();\n    var textMappingName = this instanceof Series && this.marker.dataLabel.name ? this.marker.dataLabel.name : '';\n    var xName = this instanceof Series && this.type === 'Histogram' ? 'x' : this.xName;\n    if (this.xAxis.valueType === 'Category') {\n      this.pushCategoryPoint(point, index, textMappingName, xName);\n    } else if (this.xAxis.valueType.indexOf('DateTime') > -1) {\n      var point_1 = this.points[index];\n      var option = {\n        skeleton: 'full',\n        type: 'dateTime'\n      };\n      var dateParser = this.chart.intl.getDateParser(option);\n      var dateFormatter = this.chart.intl.getDateFormat(option);\n      this.pushDateTimePoint(point_1, index, textMappingName, xName, dateParser, dateFormatter);\n    } else {\n      this.pushDoublePoint(point, index, textMappingName, xName);\n    }\n  };\n  /**\n   * Formats the accessibility description for a chart series.\n   *\n   * @param {Points} point - Data point containing the values to be formatted.\n   * @param {Series} series - Series containing the values to be formatted.\n   * @param {string} format - String format with placeholders to be replaced with actual values.\n   * @returns {string} The formatted accessibility description string.\n   */\n  Series.prototype.formatAccessibilityDescription = function (point, series) {\n    var format = series.accessibility.accessibilityDescriptionFormat;\n    return format.replace('${series.name}', series && series.name ? series.name : '').replace('${point.x}', point && point.x ? point.x.toString() : '').replace('${point.y}', point && point.y ? point.y.toString() : '').replace('${point.high}', point && point.high ? point.high.toString() : '').replace('${point.low}', point && point.low ? point.low.toString() : '').replace('${point.close}', point && point.close ? point.close.toString() : '').replace('${point.open}', point && point.open ? point.open.toString() : '').replace('${point.maximum}', point && point.maximum ? point.maximum.toString() : '').replace('${point.minimum}', point && point.minimum ? point.minimum.toString() : '').replace('${point.median}', point && point.median ? point.median.toString() : '').replace('${point.lowerQuartile}', point && point.lowerQuartile ? point.lowerQuartile.toString() : '').replace('${point.upperQuartile}', point && point.upperQuartile ? point.upperQuartile.toString() : '');\n  };\n  __decorate([Property('')], Series.prototype, \"name\", void 0);\n  __decorate([Property('')], Series.prototype, \"yName\", void 0);\n  __decorate([Property('Line')], Series.prototype, \"drawType\", void 0);\n  __decorate([Property(true)], Series.prototype, \"isClosed\", void 0);\n  __decorate([Property(null)], Series.prototype, \"bearFillColor\", void 0);\n  __decorate([Property(null)], Series.prototype, \"bullFillColor\", void 0);\n  __decorate([Property(false)], Series.prototype, \"enableSolidCandles\", void 0);\n  __decorate([Property('')], Series.prototype, \"size\", void 0);\n  __decorate([Property(null)], Series.prototype, \"binInterval\", void 0);\n  __decorate([Property(false)], Series.prototype, \"showNormalDistribution\", void 0);\n  __decorate([Property('')], Series.prototype, \"stackingGroup\", void 0);\n  __decorate([Complex({\n    color: null,\n    width: 0\n  }, Border)], Series.prototype, \"border\", void 0);\n  __decorate([Property(1)], Series.prototype, \"opacity\", void 0);\n  __decorate([Property(0)], Series.prototype, \"zOrder\", void 0);\n  __decorate([Property('')], Series.prototype, \"groupName\", void 0);\n  __decorate([Property('Line')], Series.prototype, \"type\", void 0);\n  __decorate([Complex(null, ErrorBarSettings)], Series.prototype, \"errorBar\", void 0);\n  __decorate([Complex(null, MarkerSettings)], Series.prototype, \"marker\", void 0);\n  __decorate([Complex(null, ParetoOptions)], Series.prototype, \"paretoOptions\", void 0);\n  __decorate([Complex({}, DragSettings)], Series.prototype, \"dragSettings\", void 0);\n  __decorate([Collection([], Trendline)], Series.prototype, \"trendlines\", void 0);\n  __decorate([Property(true)], Series.prototype, \"enableTooltip\", void 0);\n  __decorate([Property(true)], Series.prototype, \"showNearestTooltip\", void 0);\n  __decorate([Property('')], Series.prototype, \"tooltipFormat\", void 0);\n  __decorate([Property('')], Series.prototype, \"tooltipMappingName\", void 0);\n  __decorate([Property('SeriesType')], Series.prototype, \"legendShape\", void 0);\n  __decorate([Property('')], Series.prototype, \"legendImageUrl\", void 0);\n  __decorate([Property(null)], Series.prototype, \"selectionStyle\", void 0);\n  __decorate([Property(null)], Series.prototype, \"unSelectedStyle\", void 0);\n  __decorate([Property(null)], Series.prototype, \"nonHighlightStyle\", void 0);\n  __decorate([Property(1)], Series.prototype, \"minRadius\", void 0);\n  __decorate([Property(3)], Series.prototype, \"maxRadius\", void 0);\n  __decorate([Property('Natural')], Series.prototype, \"splineType\", void 0);\n  __decorate([Property(0.5)], Series.prototype, \"cardinalSplineTension\", void 0);\n  __decorate([Complex(null, EmptyPointSettings)], Series.prototype, \"emptyPointSettings\", void 0);\n  __decorate([Property(true)], Series.prototype, \"showMean\", void 0);\n  __decorate([Property('Normal')], Series.prototype, \"boxPlotMode\", void 0);\n  __decorate([Property(true)], Series.prototype, \"showOutliers\", void 0);\n  __decorate([Property(null)], Series.prototype, \"columnWidth\", void 0);\n  __decorate([Property(null)], Series.prototype, \"columnWidthInPixel\", void 0);\n  __decorate([Property('Rectangle')], Series.prototype, \"columnFacet\", void 0);\n  __decorate([Property(0)], Series.prototype, \"columnSpacing\", void 0);\n  __decorate([Property('#C64E4A')], Series.prototype, \"negativeFillColor\", void 0);\n  __decorate([Property('#4E81BC')], Series.prototype, \"summaryFillColor\", void 0);\n  __decorate([Property()], Series.prototype, \"intermediateSumIndexes\", void 0);\n  __decorate([Property()], Series.prototype, \"sumIndexes\", void 0);\n  __decorate([Property('Left')], Series.prototype, \"step\", void 0);\n  __decorate([Property(false)], Series.prototype, \"noRisers\", void 0);\n  __decorate([Complex({}, SeriesAccessibility)], Series.prototype, \"accessibility\", void 0);\n  __decorate([Complex({\n    color: 'black',\n    width: 2\n  }, Connector)], Series.prototype, \"connector\", void 0);\n  __decorate([Complex(null, CornerRadius)], Series.prototype, \"cornerRadius\", void 0);\n  return Series;\n}(SeriesBase);\nexport { Series };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","Property","ChildProperty","Complex","Collection","getValue","animationMode","isNullOrUndefined","extend","StackValues","RectOption","appendChildElement","appendClipElement","getElement","firstToLowerCase","CircleOption","getColorByValue","Rect","Size","Border","Font","Margin","Animation","DragSettings","EmptyPointSettings","Connector","CornerRadius","Accessibility","SeriesAccessibility","DataManager","DataUtil","Offset","seriesRender","getVisiblePoints","setRange","findClipRect","Browser","DataLabelSettings","_super","apply","width","color","left","right","top","bottom","size","fontStyle","fontWeight","fontFamily","MarkerSettings","x","y","ParetoOptions","Points","symbolLocations","regions","percentage","regionData","isSelect","marker","visible","isPointInRange","verticalError","verticalNegativeError","horizontalError","horizontalNegativeError","verticalPositiveError","horizontalPositiveError","Trendline","_this","clipRect","setDataSource","series","chart","points","trendLineModule","initDataSource","visibleSeriesCount","ErrorBarCapSettings","ChartSegment","ErrorBarSettings","SeriesBase","rangeColorPoints","isAdvancedColor","undefined","currentViewData","seriesType","isRectTypeSeries","removedPointIndex","isLegendClicked","processJsonData","point","xName","Series","type","textMappingName","dataLabel","name","processInternalData","category","paretoSeriesModule","performCumulativeCalculation","indexOf","len","xMin","Infinity","xMax","yMin","yMax","sizeMax","getSeriesType","xAxis","valueType","pushCategoryPoint","option","skeleton","dateParser","intl","getDateParser","dateFormatter","getDateFormat","pushDateTimePoint","pushDoublePoint","updateSplineValue","updateYAxisForErrorBars","yAxis","minimum","Math","min","waterfallSeriesModule","cumulativeSums","errorBarModule","maxVerticalError","minVerticalError","errorBar","verticalErrors","minVerticalErrorValue","i_1","push","yValue","max","isNaN","maximum","index","dataPoint","pushCategoryData","pushData","setEmptyPoint","rangeColorsInterior","xValue","Date","parse","parseJson","val","toString","isBlazor","stockChart","drawType","chartAreaType","isArea","isRange","findSplinePoint","calculateBinValues","histogramValues","binWidth","rangeColorSettings","visibleSeries","interior","xData","getObjectValueByMappingString","enableComplexProperty","getObjectValue","high","low","open","close","volume","pointColorMapping","errorBarColor","errorBarColorMapping","yName","text","tooltip","tooltipMappingName","isAdvancedColorSupported","rangeColorName","colorName","colorValue","getPointFillColor","pointFill","value","_i","_a","rangeMap","start","end","colors","mappingName","data","findVisibility","isEmpty","mode","emptyPointSettings","yData","getAverage","yValues","yAxisMin","yAxisMax","setXYMinMax","setHiloMinMax","filter","sort","a","isLogAxis","isNegativeValue","rangePadding","seriesMinY","pointX","shared","isIndexed","indexLabels","labels","member","previous","next","refreshDataManager","dataSource","isAngular","keys","query","dataManagerSuccess","result","count","dataManager","dataModule","getData","generateQuery","requiresCount","then","e","isRemoteData","allowServerDataBinding","localData","argsData","fill","trigger","findCurrentData","recordsCount","refreshChart","refreshTechnicalIndicator","trendlines","trendline","refreshBound","initialRender","stockChartDataManagerSuccess","parent","propName","defaultValue","isArray","call","isRectSeries","drawPoints","lowDrawPoints","delayedAnimation","currentData","refreshAxisLabel","item","_b","_c","findSeriesCollection","column","row","isStack","seriesCollection","axes","rowAxis","rowSeries","_d","_e","axis","_f","_g","rectSeriesInChart","toLowerCase","calculateStackedValue","isStacking100","columns","columnItem","rows","calculateStackingValues","startValues","endValues","lastPositive","lastNegative","stackingGroup","lastValue","frequencies","findFrequencies","groupingValues","visiblePoints","k","stackingSeies","stackedValues","seriesCollection_2","seriesCollection_1","j","pointsLength","toFixed","abs","isColumnBarType","startFromZero","parseFloat","findPercentageOfStacking","values","stackingSeies_1","seriesCollection_3","isStack100","renderSeries","replace","createSeriesElements","enableCanvas","canvasRender","ctx","save","beginPath","requireInvertedAxis","rect","height","clip","render","restore","dataLabelModule","appendSeriesElement","seriesElements","performAnimation","elementId","element","id","explodeValue","border","svgRenderer","renderer","markerHeight","markerWidth","options","markerMaxValue","radius","clipRectElement","redraw","columnIndex","rowIndex","transform","symbolElement","seriesElement","createGroup","setAttribute","accessibility","accessibilityRole","focusable","String","tabIndex","style","outline","accessibilityDescription","checkTabindex","appendChild","errorBarElement","textElement","dataLabelElements","shapeElement","hasChildNodes","animation","enable","animateSeries","isStockChartRendered","doAnimation","doErrorBarAnimation","markerRender","doMarkerAnimation","info","isIE","doDataLabelAnimation","setPointColor","setBorderColor","addPoint","duration","removeTrackballElements","refresh","updatePoint","pointIndex","calculateStackValues","enableAnimation","chartDuration","pointsAdded","renderMarker","baseModule","calculateRangeAndInterval","availableSize","updateAxis","updateSeries","updateChartAxis","removePoint","splice","length_1","pointsRemoved","updatePointsAfterRemoval","baseId","trackball0","remove","trackball1","baseClassPattern","elements","document","querySelectorAll","pointIndexMatch","match","parseInt","tooltipModule","previousPoints","tooltipElement","setData","updatedData","getTime","isSameData","every","isXAxisChanged","dataLabelCollections","rotatedDataLabelCollections","samePoints","newHistogramData","newData","existingData","existingPoint","newPoint","visibleLabels","visibleRange","interval","updateDirection","annotationModule","renderAnnotations","maximumLabelWidth","maxLabelSize","calculateBounds","axisCollections","forEach","chartAxisLayoutPanel","drawPaneLines","renderAreaBorder","stripLineModule","renderStripLine","set","Set","concat","slice","seriesCollection_4","point_1","formatAccessibilityDescription","format","accessibilityDescriptionFormat","median","lowerQuartile","upperQuartile"],"sources":["C:/Users/mkfun/Desktop/ct assignment/admin/node_modules/@syncfusion/ej2-charts/src/chart/series/chart-series.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Property, ChildProperty, Complex, Collection, getValue, animationMode } from '@syncfusion/ej2-base';\nimport { isNullOrUndefined, extend } from '@syncfusion/ej2-base';\nimport { StackValues, RectOption, appendChildElement, appendClipElement, getElement } from '../../common/utils/helper';\nimport { firstToLowerCase, CircleOption, getColorByValue } from '../../common/utils/helper';\nimport { Rect, Size } from '@syncfusion/ej2-svg-base';\nimport { Border, Font, Margin, Animation, DragSettings, EmptyPointSettings, Connector, CornerRadius, Accessibility, SeriesAccessibility } from '../../common/model/base';\nimport { DataManager, DataUtil } from '@syncfusion/ej2-data';\nimport { Offset } from '../../common/model/base';\nimport { seriesRender } from '../../common/model/constants';\nimport { getVisiblePoints, setRange, findClipRect } from '../../common/utils/helper';\nimport { Browser } from '@syncfusion/ej2-base';\n/**\n * This class provides options to customize the appearance and behavior of data labels within a series.\n */\nvar DataLabelSettings = /** @class */ (function (_super) {\n    __extends(DataLabelSettings, _super);\n    function DataLabelSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property(false)\n    ], DataLabelSettings.prototype, \"visible\", void 0);\n    __decorate([\n        Property(true)\n    ], DataLabelSettings.prototype, \"showZero\", void 0);\n    __decorate([\n        Property(null)\n    ], DataLabelSettings.prototype, \"name\", void 0);\n    __decorate([\n        Property('transparent')\n    ], DataLabelSettings.prototype, \"fill\", void 0);\n    __decorate([\n        Property(null)\n    ], DataLabelSettings.prototype, \"format\", void 0);\n    __decorate([\n        Property(1)\n    ], DataLabelSettings.prototype, \"opacity\", void 0);\n    __decorate([\n        Property(0)\n    ], DataLabelSettings.prototype, \"angle\", void 0);\n    __decorate([\n        Property(false)\n    ], DataLabelSettings.prototype, \"enableRotation\", void 0);\n    __decorate([\n        Property('Auto')\n    ], DataLabelSettings.prototype, \"position\", void 0);\n    __decorate([\n        Property(5)\n    ], DataLabelSettings.prototype, \"rx\", void 0);\n    __decorate([\n        Property(5)\n    ], DataLabelSettings.prototype, \"ry\", void 0);\n    __decorate([\n        Property('Center')\n    ], DataLabelSettings.prototype, \"alignment\", void 0);\n    __decorate([\n        Complex({ width: null, color: null }, Border)\n    ], DataLabelSettings.prototype, \"border\", void 0);\n    __decorate([\n        Complex({ left: 5, right: 5, top: 5, bottom: 5 }, Margin)\n    ], DataLabelSettings.prototype, \"margin\", void 0);\n    __decorate([\n        Complex({ size: null, color: null, fontStyle: null, fontWeight: null, fontFamily: null }, Font)\n    ], DataLabelSettings.prototype, \"font\", void 0);\n    __decorate([\n        Property(null)\n    ], DataLabelSettings.prototype, \"template\", void 0);\n    __decorate([\n        Property('Hide')\n    ], DataLabelSettings.prototype, \"labelIntersectAction\", void 0);\n    return DataLabelSettings;\n}(ChildProperty));\nexport { DataLabelSettings };\n/**\n * This class is used to define the appearance and behavior of the series markers.\n */\nvar MarkerSettings = /** @class */ (function (_super) {\n    __extends(MarkerSettings, _super);\n    function MarkerSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property(false)\n    ], MarkerSettings.prototype, \"visible\", void 0);\n    __decorate([\n        Property(null)\n    ], MarkerSettings.prototype, \"shape\", void 0);\n    __decorate([\n        Property('')\n    ], MarkerSettings.prototype, \"imageUrl\", void 0);\n    __decorate([\n        Property(5)\n    ], MarkerSettings.prototype, \"height\", void 0);\n    __decorate([\n        Property(false)\n    ], MarkerSettings.prototype, \"isFilled\", void 0);\n    __decorate([\n        Property(5)\n    ], MarkerSettings.prototype, \"width\", void 0);\n    __decorate([\n        Complex({ width: 2, color: null }, Border)\n    ], MarkerSettings.prototype, \"border\", void 0);\n    __decorate([\n        Complex({ x: 0, y: 0 }, Offset)\n    ], MarkerSettings.prototype, \"offset\", void 0);\n    __decorate([\n        Property(null)\n    ], MarkerSettings.prototype, \"fill\", void 0);\n    __decorate([\n        Property(true)\n    ], MarkerSettings.prototype, \"allowHighlight\", void 0);\n    __decorate([\n        Property(1)\n    ], MarkerSettings.prototype, \"opacity\", void 0);\n    __decorate([\n        Complex({}, DataLabelSettings)\n    ], MarkerSettings.prototype, \"dataLabel\", void 0);\n    return MarkerSettings;\n}(ChildProperty));\nexport { MarkerSettings };\n/**\n * The `ParetoOptions` class provides a set of properties for configuring the Pareto series.\n */\nvar ParetoOptions = /** @class */ (function (_super) {\n    __extends(ParetoOptions, _super);\n    function ParetoOptions() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property(null)\n    ], ParetoOptions.prototype, \"fill\", void 0);\n    __decorate([\n        Property(1)\n    ], ParetoOptions.prototype, \"width\", void 0);\n    __decorate([\n        Property('0')\n    ], ParetoOptions.prototype, \"dashArray\", void 0);\n    __decorate([\n        Complex(null, MarkerSettings)\n    ], ParetoOptions.prototype, \"marker\", void 0);\n    __decorate([\n        Property(true)\n    ], ParetoOptions.prototype, \"showAxis\", void 0);\n    return ParetoOptions;\n}(ChildProperty));\nexport { ParetoOptions };\n/**\n * The model that represents how the points in a series are configured and displayed.\n *\n * @public\n */\nvar Points = /** @class */ (function () {\n    function Points() {\n        /** Specifies the locations of symbols associated with the point. */\n        this.symbolLocations = null;\n        /** Specifies the regions associated with the point. */\n        this.regions = null;\n        /** Specifies the percentage value of the point. */\n        this.percentage = null;\n        /** Specifies the region data of the point. */\n        this.regionData = null;\n        /** Indicates whether the point is selected. */\n        this.isSelect = false;\n        /** Specifies the marker settings for the point. */\n        this.marker = {\n            visible: false\n        };\n        /**\n         * Indicates whether the point is within the specified range.\n         *\n         * @private\n         */\n        this.isPointInRange = true;\n        /** Specifies the vertical error value for the point. */\n        this.verticalError = null;\n        /** Specifies the vertical negative error value for the point. */\n        this.verticalNegativeError = null;\n        /** Specifies the horizontal error value for the point. */\n        this.horizontalError = null;\n        /** Specifies the horizontal negative error value for the point. */\n        this.horizontalNegativeError = null;\n        /** Specifies the vertical positive error value for the point. */\n        this.verticalPositiveError = null;\n        /** Specifies the horizontal positive error value for the point. */\n        this.horizontalPositiveError = null;\n    }\n    return Points;\n}());\nexport { Points };\n/**\n * Configures the behavior and appearance of trendlines in a chart series.\n * Trendlines indicate trends and the rate of price changes over a period.\n */\nvar Trendline = /** @class */ (function (_super) {\n    __extends(Trendline, _super);\n    function Trendline() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /** @private */\n        _this.clipRect = new Rect(0, 0, 0, 0);\n        return _this;\n    }\n    /**\n     * Sets the data source for the specified series in the provided chart.\n     *\n     * @private\n     * @param {Series} series - The series for which the data source is set.\n     * @param {Chart} chart - The chart in which the data source is set.\n     * @returns {void}\n     */\n    Trendline.prototype.setDataSource = function (series, chart) {\n        if (series) {\n            this.points = series.points;\n        }\n        chart.trendLineModule.initDataSource(this);\n        chart.visibleSeriesCount++;\n    };\n    __decorate([\n        Property('')\n    ], Trendline.prototype, \"name\", void 0);\n    __decorate([\n        Property('')\n    ], Trendline.prototype, \"dashArray\", void 0);\n    __decorate([\n        Property(true)\n    ], Trendline.prototype, \"visible\", void 0);\n    __decorate([\n        Property('Linear')\n    ], Trendline.prototype, \"type\", void 0);\n    __decorate([\n        Property(2)\n    ], Trendline.prototype, \"period\", void 0);\n    __decorate([\n        Property(2)\n    ], Trendline.prototype, \"polynomialOrder\", void 0);\n    __decorate([\n        Property(0)\n    ], Trendline.prototype, \"backwardForecast\", void 0);\n    __decorate([\n        Property(0)\n    ], Trendline.prototype, \"forwardForecast\", void 0);\n    __decorate([\n        Complex({}, Animation)\n    ], Trendline.prototype, \"animation\", void 0);\n    __decorate([\n        Complex({}, MarkerSettings)\n    ], Trendline.prototype, \"marker\", void 0);\n    __decorate([\n        Property(true)\n    ], Trendline.prototype, \"enableTooltip\", void 0);\n    __decorate([\n        Property(null)\n    ], Trendline.prototype, \"intercept\", void 0);\n    __decorate([\n        Property('')\n    ], Trendline.prototype, \"fill\", void 0);\n    __decorate([\n        Property(1)\n    ], Trendline.prototype, \"width\", void 0);\n    __decorate([\n        Property('SeriesType')\n    ], Trendline.prototype, \"legendShape\", void 0);\n    __decorate([\n        Complex({}, Accessibility)\n    ], Trendline.prototype, \"accessibility\", void 0);\n    return Trendline;\n}(ChildProperty));\nexport { Trendline };\n/**\n * The `ErrorBarCapSettings` class provides options to customize the appearance and behavior of error bars in a series.\n */\nvar ErrorBarCapSettings = /** @class */ (function (_super) {\n    __extends(ErrorBarCapSettings, _super);\n    function ErrorBarCapSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property(1)\n    ], ErrorBarCapSettings.prototype, \"width\", void 0);\n    __decorate([\n        Property(10)\n    ], ErrorBarCapSettings.prototype, \"length\", void 0);\n    __decorate([\n        Property(null)\n    ], ErrorBarCapSettings.prototype, \"color\", void 0);\n    __decorate([\n        Property(1)\n    ], ErrorBarCapSettings.prototype, \"opacity\", void 0);\n    return ErrorBarCapSettings;\n}(ChildProperty));\nexport { ErrorBarCapSettings };\nvar ChartSegment = /** @class */ (function (_super) {\n    __extends(ChartSegment, _super);\n    function ChartSegment() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property(null)\n    ], ChartSegment.prototype, \"value\", void 0);\n    __decorate([\n        Property(null)\n    ], ChartSegment.prototype, \"color\", void 0);\n    __decorate([\n        Property('0')\n    ], ChartSegment.prototype, \"dashArray\", void 0);\n    return ChartSegment;\n}(ChildProperty));\nexport { ChartSegment };\n/**\n * The `ErrorBarSettings` class provides options to customize the appearance and behavior of error bars in a series.\n *\n * @public\n */\nvar ErrorBarSettings = /** @class */ (function (_super) {\n    __extends(ErrorBarSettings, _super);\n    function ErrorBarSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property(false)\n    ], ErrorBarSettings.prototype, \"visible\", void 0);\n    __decorate([\n        Property('Fixed')\n    ], ErrorBarSettings.prototype, \"type\", void 0);\n    __decorate([\n        Property('Both')\n    ], ErrorBarSettings.prototype, \"direction\", void 0);\n    __decorate([\n        Property('Vertical')\n    ], ErrorBarSettings.prototype, \"mode\", void 0);\n    __decorate([\n        Property(null)\n    ], ErrorBarSettings.prototype, \"color\", void 0);\n    __decorate([\n        Property(1)\n    ], ErrorBarSettings.prototype, \"verticalError\", void 0);\n    __decorate([\n        Property(1)\n    ], ErrorBarSettings.prototype, \"width\", void 0);\n    __decorate([\n        Property(1)\n    ], ErrorBarSettings.prototype, \"horizontalError\", void 0);\n    __decorate([\n        Property(3)\n    ], ErrorBarSettings.prototype, \"verticalPositiveError\", void 0);\n    __decorate([\n        Property(3)\n    ], ErrorBarSettings.prototype, \"verticalNegativeError\", void 0);\n    __decorate([\n        Property(1)\n    ], ErrorBarSettings.prototype, \"horizontalPositiveError\", void 0);\n    __decorate([\n        Property(1)\n    ], ErrorBarSettings.prototype, \"horizontalNegativeError\", void 0);\n    __decorate([\n        Complex(null, ErrorBarCapSettings)\n    ], ErrorBarSettings.prototype, \"errorBarCap\", void 0);\n    __decorate([\n        Property('')\n    ], ErrorBarSettings.prototype, \"errorBarColorMapping\", void 0);\n    return ErrorBarSettings;\n}(ChildProperty));\nexport { ErrorBarSettings };\n/**\n * Defines the common behavior for series and technical indicators.\n */\nvar SeriesBase = /** @class */ (function (_super) {\n    __extends(SeriesBase, _super);\n    function SeriesBase() {\n        /**\n         * The data source field that contains the x value.\n         * It is applicable to both series and technical indicators.\n         *\n         * @default ''\n         */\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.rangeColorPoints = [];\n        _this.isAdvancedColor = undefined;\n        /** @private */\n        _this.currentViewData = [];\n        /** @private */\n        _this.clipRect = new Rect(0, 0, 0, 0);\n        /** @private */\n        _this.seriesType = 'XY';\n        _this.isRectTypeSeries = false;\n        _this.removedPointIndex = null;\n        /** @private */\n        _this.isLegendClicked = false;\n        return _this;\n    }\n    /**\n     * Process data for the series.\n     *\n     * @hidden\n     * @returns {void}\n     */\n    SeriesBase.prototype.processJsonData = function () {\n        var i = 0;\n        var point = new Points();\n        var xName = (this instanceof Series && this.type === 'Histogram') ? 'x' : this.xName;\n        var textMappingName = this instanceof Series && this.marker.dataLabel.name ?\n            this.marker.dataLabel.name : '';\n        if (this instanceof Series) {\n            if ((this.type === 'Waterfall' || this.type === 'Histogram')) {\n                this.currentViewData = this.chart[firstToLowerCase(this.type) + 'SeriesModule'].\n                    processInternalData(extend([], this.currentViewData, null, true), this);\n            }\n            if (this.category === 'Pareto') {\n                this.currentViewData = extend([], this.currentViewData, null, true);\n                if (this.type === 'Line') {\n                    this.currentViewData = this.chart.paretoSeriesModule.performCumulativeCalculation(this.currentViewData, this);\n                }\n            }\n            this.isRectTypeSeries = this.type.indexOf('Column') > -1 || this.type.indexOf('Bar') > -1\n                || this.type.indexOf('Histogram') > -1;\n        }\n        var len = (this.currentViewData || []).length;\n        this.points = [];\n        this.xMin = Infinity;\n        this.xMax = -Infinity;\n        this.yMin = Infinity;\n        this.yMax = -Infinity;\n        this.sizeMax = -Infinity;\n        this.getSeriesType();\n        if (this.xAxis.valueType === 'Category') {\n            while (i < len) {\n                this.pushCategoryPoint(point, i, textMappingName, xName);\n                i++;\n            }\n        }\n        else if (this.xAxis.valueType.indexOf('DateTime') > -1) {\n            var option = {\n                skeleton: 'full',\n                type: 'dateTime'\n            };\n            var dateParser = this.chart.intl.getDateParser(option);\n            var dateFormatter = this.chart.intl.getDateFormat(option);\n            while (i < len) {\n                this.pushDateTimePoint(point, i, textMappingName, xName, dateParser, dateFormatter);\n                i++;\n            }\n        }\n        else {\n            while (i < len) {\n                this.pushDoublePoint(point, i, textMappingName, xName);\n                i++;\n            }\n        }\n        this.updateSplineValue();\n        this.updateYAxisForErrorBars();\n        if (this instanceof Series && this.type === 'Waterfall' && isNullOrUndefined(this.yAxis.minimum)) {\n            this.yMin = Math.min.apply(Math, this.chart.waterfallSeriesModule.cumulativeSums);\n        }\n    };\n    /**\n     * Calculates the errorbar and adds a range to axis if errorbar exeeds to the actual range.\n     *\n     * @returns {void}\n     * @private\n     */\n    SeriesBase.prototype.updateYAxisForErrorBars = function () {\n        if (this instanceof Series) {\n            if (this.chart.errorBarModule) {\n                var maxVerticalError = void 0;\n                var minVerticalError = void 0;\n                if (this.errorBar.verticalError) {\n                    for (var i = 0; i < this.points.length; i++) {\n                        var verticalErrors = [];\n                        var minVerticalErrorValue = [];\n                        for (var i_1 = 0; i_1 < this.points.length; i_1++) {\n                            var point = this.points[i_1];\n                            if (point.verticalError) {\n                                verticalErrors.push(point.verticalError);\n                                minVerticalErrorValue.push(point.yValue - point.verticalError);\n                            }\n                        }\n                        maxVerticalError = verticalErrors && verticalErrors.length > 0 ? Math.max.apply(Math, verticalErrors) : 0;\n                        minVerticalError = verticalErrors && verticalErrors.length > 0 ? Math.min.apply(Math, minVerticalErrorValue) : 0;\n                    }\n                }\n                this.yMax += !isNaN(maxVerticalError) && isNullOrUndefined(this.yAxis.maximum) ? maxVerticalError : 0;\n                this.yMin = !isNaN(minVerticalError) && minVerticalError < this.yMin && minVerticalError < 0 &&\n                    isNullOrUndefined(this.yAxis.minimum) ? minVerticalError : this.yMin;\n            }\n        }\n    };\n    /**\n     * Pushes a category point to the data collection.\n     *\n     * @param {Points} point -The point to be pushed.\n     * @param {number} index -The index of the point.\n     * @param {string} textMappingName -The name of the text mapping.\n     * @param {string} xName -The name of the x-coordinate.\n     * @returns {void}\n     * @private\n     */\n    SeriesBase.prototype.pushCategoryPoint = function (point, index, textMappingName, xName) {\n        point = this.dataPoint(index, textMappingName, xName);\n        this.pushCategoryData(point, index, point.x);\n        this.pushData(point, index);\n        this.setEmptyPoint(point, index);\n        this.rangeColorsInterior(point);\n    };\n    /**\n     * Pushes a double point to the data collection.\n     *\n     * @param {Points} point -The point to be pushed.\n     * @param {number} index -The index of the point.\n     * @param {string} textMappingName -The name of the text mapping.\n     * @param {string} xName -The name of the x-coordinate.\n     * @returns {void}\n     * @private\n     */\n    SeriesBase.prototype.pushDoublePoint = function (point, index, textMappingName, xName) {\n        point = this.dataPoint(index, textMappingName, xName);\n        point.xValue = point.x;\n        this.pushData(point, index);\n        this.setEmptyPoint(point, index);\n    };\n    /**\n     * Pushes a DateTime point to the data collection.\n     *\n     * @param {Points} point -The point to be pushed.\n     * @param {number} index -The index of the point.\n     * @param {string} textMappingName -The name of the text mapping.\n     * @param {string} xName -The name of the x-coordinate.\n     * @param {Function} dateParser -The date parser function.\n     * @param {Function} dateFormatter -The date formatter function.\n     * @returns {void}\n     * @private\n     */\n    SeriesBase.prototype.pushDateTimePoint = function (point, index, textMappingName, xName, dateParser, dateFormatter) {\n        point = this.dataPoint(index, textMappingName, xName);\n        if (!isNullOrUndefined(point.x) && point.x !== '') {\n            point.x = new Date(DataUtil.parse.parseJson({ val: point.x }).val);\n            if (this.xAxis.valueType === 'DateTime') {\n                point.xValue = Date.parse(point.x.toString());\n            }\n            else {\n                if (this.chart.isBlazor) {\n                    this.pushCategoryData(point, index, Date.parse(point.x.toString()).toString());\n                }\n                else {\n                    this.pushCategoryData(point, index, Date.parse(dateParser(dateFormatter(point.x))).toString());\n                }\n            }\n            this.pushData(point, index);\n            this.setEmptyPoint(point, index);\n        }\n        else {\n            point.visible = false;\n        }\n    };\n    SeriesBase.prototype.updateSplineValue = function () {\n        if (this instanceof Series && !(this.chart.stockChart && this.xAxis.valueType === 'DateTimeCategory')) {\n            if (this.type.indexOf('Spline') > -1 || (this.drawType.indexOf('Spline') > -1 && this.chart.chartAreaType === 'PolarRadar')) {\n                var isArea = (this.type.indexOf('Area') > -1 || this.drawType.indexOf('Area') > -1);\n                var isRange = this.type.indexOf('Range') > -1;\n                this.chart['spline' + (isArea ? isRange ? 'RangeArea' : 'Area' : '') + 'SeriesModule'].findSplinePoint(this);\n            }\n            else if (this.type.indexOf('Histogram') > -1 && (this.xAxis.maximum || this.xAxis.minimum)) {\n                this.chart['histogramSeriesModule'].calculateBinValues(this);\n            }\n            if (this.type.indexOf('Histogram') > -1 && this.points.length === 1) {\n                this.xMin = this.xMin - this.histogramValues.binWidth;\n                this.xMax = this.xMax + this.histogramValues.binWidth;\n            }\n        }\n    };\n    SeriesBase.prototype.rangeColorsInterior = function (point) {\n        if (this.chart.rangeColorSettings && this.chart.rangeColorSettings.length > 0 && this.chart.visibleSeries.length === 1 &&\n            (this.chart.series[0].type === 'Column' || this.chart.series[0].type === 'Bar' ||\n                this.chart.series[0].type === 'Scatter' || this.chart.series[0].type === 'Bubble')) {\n            if (!this.rangeColorPoints[point.interior]) {\n                this.rangeColorPoints[point.interior] = [];\n            }\n            else if (this.rangeColorPoints[point.interior] !== undefined) {\n                this.rangeColorPoints[point.interior].push(point);\n            }\n        }\n    };\n    /**\n     * Sets the empty point values.\n     *\n     * @param {Points} point - The point to be set.\n     * @param {number} i - The index of the point.\n     * @private\n     * @returns {void}\n     */\n    SeriesBase.prototype.pushData = function (point, i) {\n        point.index = i;\n        point.yValue = point.y;\n        point.series = this;\n        // To find the min, max for the axis range.\n        this.xMin = Math.min(this.xMin, point.xValue);\n        this.xMax = Math.max(this.xMax, point.xValue);\n        this.xData.push(point.xValue);\n    };\n    /**\n     * Retrieves the data point at the specified index with the given text mapping name and x-name.\n     *\n     * @param {number} i - The index of the data point to retrieve.\n     * @param {string} textMappingName - The name used to map text data.\n     * @param {string} xName - The name used for the x-axis.\n     * @returns {Points} - The data point at the specified index.\n     * @private\n     */\n    SeriesBase.prototype.dataPoint = function (i, textMappingName, xName) {\n        this.points[i] = new Points();\n        var point = this.points[i];\n        var currentViewData = this.currentViewData[i];\n        var getObjectValueByMappingString = this.enableComplexProperty ? getValue : this.getObjectValue;\n        point.x = getObjectValueByMappingString(xName, currentViewData);\n        point.high = getObjectValueByMappingString(this.high, currentViewData);\n        point.low = getObjectValueByMappingString(this.low, currentViewData);\n        point.open = getObjectValueByMappingString(this.open, currentViewData);\n        point.close = getObjectValueByMappingString(this.close, currentViewData);\n        point.volume = getObjectValueByMappingString(this.volume, currentViewData);\n        point.interior = getObjectValueByMappingString(this.pointColorMapping, currentViewData);\n        if (this instanceof Series) {\n            if (this.errorBar.visible) {\n                point.errorBarColor = getObjectValueByMappingString(this.errorBar.errorBarColorMapping, currentViewData);\n                point.verticalError = typeof this.errorBar.verticalError == 'string' ? getObjectValueByMappingString(this.errorBar.verticalError, currentViewData) : this.errorBar.verticalError;\n                point.horizontalError = typeof this.errorBar.horizontalError == 'string' ? getObjectValueByMappingString(this.errorBar.horizontalError, currentViewData) : this.errorBar.horizontalError;\n                point.verticalNegativeError = typeof this.errorBar.verticalNegativeError == 'string' ? getObjectValueByMappingString(this.errorBar.verticalNegativeError, currentViewData) : this.errorBar.verticalNegativeError;\n                point.verticalPositiveError = typeof this.errorBar.verticalPositiveError == 'string' ? getObjectValueByMappingString(this.errorBar.verticalPositiveError, currentViewData) : this.errorBar.verticalPositiveError;\n                point.horizontalNegativeError = typeof this.errorBar.horizontalNegativeError == 'string' ? getObjectValueByMappingString(this.errorBar.horizontalNegativeError, currentViewData) : this.errorBar.horizontalNegativeError;\n                point.horizontalPositiveError = typeof this.errorBar.horizontalPositiveError == 'string' ? getObjectValueByMappingString(this.errorBar.horizontalPositiveError, currentViewData) : this.errorBar.horizontalPositiveError;\n            }\n            point.y = getObjectValueByMappingString(this.yName, currentViewData);\n            point.size = getObjectValueByMappingString(this.size, currentViewData);\n            point.text = getObjectValueByMappingString(textMappingName, currentViewData);\n            point.tooltip = getObjectValueByMappingString(this.tooltipMappingName, currentViewData);\n            if (this.isAdvancedColorSupported()) {\n                this.rangeColorName = this.colorName.length > 0 ? this.colorName : this.yName;\n                point.colorValue = getObjectValueByMappingString(this.rangeColorName, currentViewData);\n                point.interior = this.getPointFillColor(point.interior, point.colorValue);\n            }\n        }\n        return point;\n    };\n    SeriesBase.prototype.isAdvancedColorSupported = function () {\n        if (isNullOrUndefined(this.isAdvancedColor)) {\n            if (this.chart.rangeColorSettings && this.chart.rangeColorSettings.length > 0 &&\n                (this.chart.series[0].type === 'Column' || this.chart.series[0].type === 'Bar' ||\n                    this.chart.series[0].type === 'Scatter' || this.chart.series[0].type === 'Bubble')) {\n                this.isAdvancedColor = true;\n            }\n            else {\n                this.isAdvancedColor = false;\n            }\n        }\n        return this.isAdvancedColor;\n    };\n    SeriesBase.prototype.getPointFillColor = function (pointFill, value) {\n        var color = pointFill;\n        if (value && this.chart.rangeColorSettings && this.chart.rangeColorSettings.length > 0) {\n            for (var _i = 0, _a = this.chart.rangeColorSettings; _i < _a.length; _i++) {\n                var rangeMap = _a[_i];\n                if (value >= rangeMap.start && value <= rangeMap.end) {\n                    if (rangeMap.colors.length > 1) {\n                        color = getColorByValue(rangeMap, value);\n                    }\n                    else {\n                        color = rangeMap.colors[0];\n                    }\n                }\n            }\n        }\n        return color;\n    };\n    /**\n     * Pushes a category point to the data collection.\n     *\n     * @param {string} mappingName - The name of the mapping.\n     * @param {Object} data - The data to be pushed.\n     * @returns {Object} - The data point at the specified index.\n     * @private\n     */\n    SeriesBase.prototype.getObjectValue = function (mappingName, data) {\n        return data[mappingName];\n    };\n    /**\n     * Sets the specified data point as an empty point at the given index.\n     *\n     * @private\n     * @param {Points} point - The data point to set as empty.\n     * @param {number} i - The index of the data point.\n     * @returns {void}\n     */\n    SeriesBase.prototype.setEmptyPoint = function (point, i) {\n        if (!this.findVisibility(point)) {\n            point.visible = true;\n            return null;\n        }\n        point.isEmpty = true;\n        var mode = this instanceof Series && point.isPointInRange ? this.emptyPointSettings.mode : 'Drop';\n        switch (mode) {\n            case 'Zero':\n                point.visible = true;\n                if (this instanceof Series && this.seriesType.indexOf('HighLow') > -1) {\n                    point.high = point.low = 0;\n                    if (this.seriesType.indexOf('HighLowOpenClose') > -1) {\n                        point.open = point.close = 0;\n                    }\n                }\n                else {\n                    point.y = point.yValue = this.yData[i] = 0;\n                }\n                break;\n            case 'Average':\n                if (this instanceof Series) {\n                    if (this.seriesType.indexOf('HighLow') > -1) {\n                        point.high = (isNullOrUndefined(point.high) || isNaN(+point.high)) ? this.getAverage(this.high, i) : point.high;\n                        point.low = (isNullOrUndefined(point.low) || isNaN(+point.low)) ? this.getAverage(this.low, i) : point.low;\n                        if (this.seriesType.indexOf('HighLowOpenClose') > -1) {\n                            point.open = (isNullOrUndefined(point.open) || isNaN(+point.open)) ? this.getAverage(this.open, i) : point.open;\n                            point.close = (isNullOrUndefined(point.close) || isNaN(+point.close)) ? this.getAverage(this.close, i) :\n                                point.close;\n                        }\n                    }\n                    else {\n                        point.y = point.yValue = this.yData[i] = this.getAverage(this.yName, i);\n                    }\n                }\n                point.visible = true;\n                break;\n            case 'Drop':\n            case 'Gap':\n                this.yData[i] = null;\n                point.visible = false;\n                break;\n        }\n    };\n    SeriesBase.prototype.findVisibility = function (point) {\n        var type = this instanceof Series ? this.seriesType : 'HighLowOpenClose';\n        var yValues;\n        var yAxisMin = this.yAxis.minimum;\n        var yAxisMax = this.yAxis.maximum;\n        switch (type) {\n            case 'XY':\n                if (this.chart.chartAreaType === 'PolarRadar' && ((!isNullOrUndefined(yAxisMin) && point.yValue < yAxisMin) ||\n                    (!isNullOrUndefined(yAxisMax) && point.yValue > yAxisMax))) {\n                    point.isPointInRange = false;\n                    return true;\n                }\n                this.setXYMinMax(point.yValue);\n                this.yData.push(point.yValue);\n                if (this instanceof Series && this.type === 'Bubble') {\n                    this.sizeMax = Math.max(this.sizeMax, (isNullOrUndefined(point.size) || isNaN(+point.size)) ? this.sizeMax\n                        : point.size);\n                }\n                return isNullOrUndefined(point.x) || (isNullOrUndefined(point.y) || isNaN(+point.y));\n            case 'HighLow':\n                this.setHiloMinMax(point.high, point.low);\n                return isNullOrUndefined(point.x) || (isNullOrUndefined(point.low) || isNaN(+point.low)) ||\n                    (isNullOrUndefined(point.high) || isNaN(+point.high));\n            case 'HighLowOpenClose':\n                this.setHiloMinMax(point.high, point.low);\n                return isNullOrUndefined(point.x) || (isNullOrUndefined(point.low) || isNaN(+point.low)) ||\n                    (isNullOrUndefined(point.open) || isNaN(+point.open)) || (isNullOrUndefined(point.close) || isNaN(+point.close))\n                    || (isNullOrUndefined(point.high) || isNaN(+point.high));\n            case 'BoxPlot':\n                yValues = (point.y || [null]).filter(function (value) {\n                    return !isNullOrUndefined(value) && !isNaN(value);\n                }).sort(function (a, b) {\n                    return a - b;\n                });\n                point.y = yValues;\n                this.yMin = Math.min(this.yMin, Math.min.apply(Math, yValues));\n                this.yMax = Math.max(this.yMax, Math.max.apply(Math, yValues));\n                return !yValues.length;\n        }\n    };\n    /**\n     * To get Y min max for the provided point seriesType XY.\n     *\n     * @param {number} yValue - The y value used to determine the minimum and maximum values for the x and y coordinates.\n     * @returns {void}\n     */\n    SeriesBase.prototype.setXYMinMax = function (yValue) {\n        var isLogAxis = (this.yAxis.valueType === 'Logarithmic' || this.xAxis.valueType === 'Logarithmic');\n        var isNegativeValue = yValue < 0 || this.yAxis.rangePadding === 'None';\n        var seriesMinY;\n        if (this.isRectTypeSeries && !setRange(this.yAxis)) {\n            seriesMinY = ((isLogAxis ? (yValue) : isNegativeValue ? yValue : 0));\n        }\n        else {\n            seriesMinY = yValue;\n        }\n        this.yMin = isLogAxis ?\n            Math.min(this.yMin, (isNullOrUndefined(seriesMinY) || isNaN(seriesMinY) || (seriesMinY === 0) ||\n                (seriesMinY.toString() === '0') || (seriesMinY.toString() === '')) ? this.yMin : seriesMinY) :\n            Math.min(this.yMin, (isNullOrUndefined(seriesMinY) || isNaN(seriesMinY)) ? this.yMin : seriesMinY);\n        this.yMax = Math.max(this.yMax, (isNullOrUndefined(yValue) || isNaN(yValue)) ? this.yMax : yValue);\n    };\n    /**\n     * Sets the minimum and maximum values for the high and low values.\n     *\n     * @private\n     * @param {number} high - The high value used to determine the maximum value.\n     * @param {number} low - The low value used to determine the minimum value.\n     * @returns {void}\n     */\n    SeriesBase.prototype.setHiloMinMax = function (high, low) {\n        this.yMin = Math.min(this.yMin, Math.min((isNullOrUndefined(low) || isNaN(low)) ? this.yMin : low, (isNullOrUndefined(high) || isNaN(high)) ? this.yMin : high));\n        this.yMax = Math.max(this.yMax, Math.max((isNullOrUndefined(low) || isNaN(low)) ? this.yMax : low, (isNullOrUndefined(high) || isNaN(high)) ? this.yMax : high));\n    };\n    /**\n     * Finds the type of the series.\n     *\n     * @private\n     * @returns {void}\n     */\n    SeriesBase.prototype.getSeriesType = function () {\n        var type;\n        if (this instanceof Series) {\n            var seriesType = this.chart.chartAreaType === 'PolarRadar' ? this.drawType : this.type;\n            if (seriesType) {\n                switch (seriesType) {\n                    case 'RangeColumn':\n                    case 'RangeArea':\n                    case 'RangeStepArea':\n                    case 'SplineRangeArea':\n                    case 'Hilo':\n                        type = 'HighLow';\n                        break;\n                    case 'HiloOpenClose':\n                    case 'Candle':\n                        type = 'HighLowOpenClose';\n                        break;\n                    case 'BoxAndWhisker':\n                        type = 'BoxPlot';\n                        break;\n                    default:\n                        type = 'XY';\n                }\n            }\n        }\n        this.seriesType = type;\n    };\n    /**\n     * Pushes category data into the series points.\n     *\n     * @param {Points} point - The point to which category data will be pushed.\n     * @param {number} index - The index of the data point.\n     * @param {string} pointX - The x-value of the point.\n     * @returns {void}\n     * @private\n     */\n    SeriesBase.prototype.pushCategoryData = function (point, index, pointX) {\n        if (!this.chart.tooltip.shared) {\n            if (!this.visible) {\n                return null;\n            }\n        }\n        if (!this.xAxis.isIndexed) {\n            if (this.xAxis.indexLabels[pointX] === undefined) {\n                this.xAxis.indexLabels[pointX] = this.xAxis.labels.length;\n                this.xAxis.labels.push(pointX);\n            }\n            point.xValue = this.xAxis.indexLabels[pointX];\n        }\n        else {\n            if (this.xAxis.labels[index]) {\n                this.xAxis.labels[index] += ', ' + pointX;\n            }\n            else {\n                this.xAxis.labels.push(pointX);\n            }\n            // this.xAxis.labels[index as number] ? this.xAxis.labels[index as number] += ', ' + pointX :\n            //     this.xAxis.labels.push(pointX);\n            point.xValue = index;\n        }\n    };\n    /**\n     * Gets the average value of a member in the specified data array or current view data.\n     *\n     * @param {string} member - The member whose average is to be calculated.\n     * @param {number} i - The index of the data point.\n     * @param {Object} data - The data array from which to calculate the average. Defaults to the current view data.\n     * @returns {number} - The average value of the specified member.\n     */\n    SeriesBase.prototype.getAverage = function (member, i, data) {\n        if (data === void 0) { data = this.currentViewData; }\n        var previous = data[i - 1] ? (data[i - 1][member] || 0) : 0;\n        var next = data[i + 1] ? (data[i + 1][member] || 0) : 0;\n        return (previous + next) / 2;\n    };\n    /**\n     * Refreshes the data manager for the provided chart.\n     *\n     * @param {Chart} chart - The chart whose data manager is to be refreshed.\n     * @returns {void}\n     * @private\n     */\n    SeriesBase.prototype.refreshDataManager = function (chart) {\n        var _this = this;\n        this.chart = chart;\n        var dataSource;\n        var isAngular = 'isAngular';\n        if (chart[isAngular]) {\n            dataSource = Object.keys(this.dataSource).length ? this.dataSource : chart.dataSource;\n        }\n        else {\n            dataSource = this.dataSource || chart.dataSource;\n        }\n        if (!(dataSource instanceof DataManager) && isNullOrUndefined(this.query)) {\n            this.dataManagerSuccess({ result: dataSource, count: dataSource.length }, false);\n            return;\n        }\n        var dataManager = this.dataModule.getData(this.dataModule.generateQuery().requiresCount());\n        dataManager.then(function (e) { return _this.dataManagerSuccess(e); });\n    };\n    SeriesBase.prototype.dataManagerSuccess = function (e, isRemoteData) {\n        if (isRemoteData === void 0) { isRemoteData = true; }\n        this.currentViewData = e.count ? e.result : [];\n        this.chart.allowServerDataBinding = false;\n        if (this instanceof Series) {\n            if (this.chart.stockChart) {\n                this.chart.stockChart.series[this.index].localData = this.currentViewData;\n            }\n            var argsData = {\n                name: seriesRender, series: this, data: this.currentViewData, fill: this.interior\n            };\n            this.chart.trigger(seriesRender, argsData);\n            this.interior = argsData.fill;\n            this.currentViewData = argsData.data;\n        }\n        if (this.chart.stockChart && !(this instanceof Series)) {\n            this.currentViewData = this.chart.stockChart.findCurrentData(this.chart.stockChart.series[0].localData, this.chart.stockChart.series[0].xName);\n        }\n        this.processJsonData();\n        this.recordsCount = e.count;\n        this.refreshChart(isRemoteData);\n        this.currentViewData = null;\n    };\n    SeriesBase.prototype.refreshChart = function (isRemoteData) {\n        var chart = this.chart;\n        if (this instanceof Series) {\n            chart.visibleSeriesCount += isRemoteData ? 1 : 0;\n        }\n        chart.refreshTechnicalIndicator(this);\n        if (this instanceof Series && this.category !== 'TrendLine') {\n            for (var _i = 0, _a = this.trendlines; _i < _a.length; _i++) {\n                var trendline = _a[_i];\n                trendline.setDataSource(this, chart);\n            }\n        }\n        //if (chart.visibleSeries.length === (chart.visibleSeriesCount - chart.indicators.length)) {\n        if (chart.visibleSeries.length === (chart.visibleSeriesCount)) {\n            chart.refreshBound();\n            chart.trigger('loaded', { chart: chart.isBlazor ? {} : chart });\n            if (this.chart.stockChart && this.chart.stockChart.initialRender) {\n                this.chart.stockChart.initialRender = false;\n                this.chart.stockChart.stockChartDataManagerSuccess();\n            }\n        }\n        if (this instanceof Series) {\n            chart.visibleSeriesCount += isRemoteData ? 0 : 1;\n        }\n    };\n    __decorate([\n        Property('')\n    ], SeriesBase.prototype, \"xName\", void 0);\n    __decorate([\n        Property('')\n    ], SeriesBase.prototype, \"colorName\", void 0);\n    __decorate([\n        Property('')\n    ], SeriesBase.prototype, \"high\", void 0);\n    __decorate([\n        Property('')\n    ], SeriesBase.prototype, \"low\", void 0);\n    __decorate([\n        Property('')\n    ], SeriesBase.prototype, \"open\", void 0);\n    __decorate([\n        Property('')\n    ], SeriesBase.prototype, \"close\", void 0);\n    __decorate([\n        Property('')\n    ], SeriesBase.prototype, \"volume\", void 0);\n    __decorate([\n        Property('')\n    ], SeriesBase.prototype, \"pointColorMapping\", void 0);\n    __decorate([\n        Property(true)\n    ], SeriesBase.prototype, \"visible\", void 0);\n    __decorate([\n        Property(null)\n    ], SeriesBase.prototype, \"xAxisName\", void 0);\n    __decorate([\n        Property(null)\n    ], SeriesBase.prototype, \"yAxisName\", void 0);\n    __decorate([\n        Complex(null, Animation)\n    ], SeriesBase.prototype, \"animation\", void 0);\n    __decorate([\n        Property(null)\n    ], SeriesBase.prototype, \"fill\", void 0);\n    __decorate([\n        Property(1)\n    ], SeriesBase.prototype, \"width\", void 0);\n    __decorate([\n        Property('')\n    ], SeriesBase.prototype, \"dashArray\", void 0);\n    __decorate([\n        Property('')\n    ], SeriesBase.prototype, \"dataSource\", void 0);\n    __decorate([\n        Property()\n    ], SeriesBase.prototype, \"query\", void 0);\n    __decorate([\n        Collection([], ChartSegment)\n    ], SeriesBase.prototype, \"segments\", void 0);\n    __decorate([\n        Property('X')\n    ], SeriesBase.prototype, \"segmentAxis\", void 0);\n    __decorate([\n        Property(false)\n    ], SeriesBase.prototype, \"enableComplexProperty\", void 0);\n    return SeriesBase;\n}(ChildProperty));\nexport { SeriesBase };\n/**\n * The `Series` class is used to configure individual series in a chart.\n *\n * @public\n */\nvar Series = /** @class */ (function (_super) {\n    __extends(Series, _super);\n    function Series(parent, propName, defaultValue, isArray) {\n        var _this = _super.call(this, parent, propName, defaultValue, isArray) || this;\n        _this.visibleSeriesCount = 0;\n        /** @private */\n        _this.category = 'Series';\n        /** @private */\n        _this.isRectSeries = false;\n        /** @private */\n        _this.drawPoints = [];\n        /** @private */\n        _this.lowDrawPoints = [];\n        /** @private */\n        _this.delayedAnimation = false;\n        /** @private */\n        _this.rangeColorName = _this.colorName.length > 0 ? _this.colorName : _this.yName;\n        /** @private */\n        _this.currentData = [];\n        return _this;\n    }\n    /**\n     * Refresh the axis label.\n     *\n     * @returns {void}\n     * @private\n     */\n    Series.prototype.refreshAxisLabel = function () {\n        if (this.xAxis.valueType.indexOf('Category') === -1) {\n            return null;\n        }\n        this.xAxis.labels = [];\n        this.xAxis.indexLabels = {};\n        var option = {\n            skeleton: 'full',\n            type: 'dateTime'\n        };\n        var dateParser = this.chart.intl.getDateParser(option);\n        var dateFormatter = this.chart.intl.getDateFormat(option);\n        for (var _i = 0, _a = this.xAxis.series; _i < _a.length; _i++) {\n            var item = _a[_i];\n            if (item.visible && item.category !== 'TrendLine') {\n                item.xMin = Infinity;\n                item.xMax = -Infinity;\n                for (var _b = 0, _c = item.points; _b < _c.length; _b++) {\n                    var point = _c[_b];\n                    item.pushCategoryData(point, point.index, this.xAxis.valueType === 'DateTimeCategory' ? Date.parse(dateParser(dateFormatter(point.x))).toString() : point.x);\n                    item.xMin = Math.min(item.xMin, point.xValue);\n                    item.xMax = Math.max(item.xMax, point.xValue);\n                }\n            }\n        }\n    };\n    /**\n     * To get the series collection.\n     *\n     * @returns {void}\n     * @private\n     */\n    Series.prototype.findSeriesCollection = function (column, row, isStack) {\n        var seriesCollection = [];\n        for (var _i = 0, _a = row.axes; _i < _a.length; _i++) {\n            var rowAxis = _a[_i];\n            for (var _b = 0, _c = rowAxis.series; _b < _c.length; _b++) {\n                var rowSeries = _c[_b];\n                for (var _d = 0, _e = column.axes; _d < _e.length; _d++) {\n                    var axis = _e[_d];\n                    for (var _f = 0, _g = axis.series; _f < _g.length; _f++) {\n                        var series = _g[_f];\n                        if (series === rowSeries && series.visible && this.rectSeriesInChart(series, isStack)) {\n                            seriesCollection.push(series);\n                        }\n                    }\n                }\n            }\n        }\n        return seriesCollection;\n    };\n    /**\n     * Checks if the series in the chart are rectangular.\n     *\n     * @param {Series} series - The series to be checked.\n     * @param {boolean} isStack - Specifies whether the series are stacked.\n     * @returns {boolean} - Returns true if the series in the chart are rectangular, otherwise false.\n     */\n    Series.prototype.rectSeriesInChart = function (series, isStack) {\n        var type = (series.type).toLowerCase();\n        return (type.indexOf('column') !== -1 || type.indexOf('bar') !== -1 || type.indexOf('histogram') !== -1 ||\n            type.indexOf('hiloopenclose') !== -1 || type.indexOf('candle') !== -1 || type.indexOf('pareto') !== -1 ||\n            type.indexOf('hilo') !== -1 || series.drawType.indexOf('Column') !== -1 ||\n            type.indexOf('waterfall') !== -1 || type.indexOf('boxandwhisker') !== -1 || isStack);\n    };\n    /**\n     * Calculates the stacked value for the chart.\n     *\n     * @param {boolean} isStacking100 - Specifies whether the stacking is 100%.\n     * @param {Chart} chart - The chart for which the stacked value is calculated.\n     * @returns {void}\n     * @private\n     */\n    Series.prototype.calculateStackedValue = function (isStacking100, chart) {\n        for (var _i = 0, _a = chart.columns; _i < _a.length; _i++) {\n            var columnItem = _a[_i];\n            for (var _b = 0, _c = chart.rows; _b < _c.length; _b++) {\n                var item = _c[_b];\n                this.calculateStackingValues(this.findSeriesCollection(columnItem, item, true), isStacking100);\n            }\n        }\n    };\n    Series.prototype.calculateStackingValues = function (seriesCollection, isStacking100) {\n        var startValues;\n        var endValues;\n        var yValues = [];\n        var lastPositive = [];\n        var lastNegative = [];\n        var stackingGroup;\n        var lastValue;\n        var value;\n        var frequencies = [];\n        if (isStacking100) {\n            frequencies = this.findFrequencies(seriesCollection);\n        }\n        var groupingValues = [];\n        var visiblePoints = [];\n        for (var i = 0; i < seriesCollection.length; i++) {\n            var series = seriesCollection[i];\n            if (!groupingValues[series.stackingGroup]) {\n                groupingValues[series.stackingGroup] = [];\n                groupingValues[series.stackingGroup].push(series);\n            }\n            else if (groupingValues[series.stackingGroup] !== undefined) {\n                groupingValues[series.stackingGroup].push(series);\n            }\n        }\n        var keys = Object.keys(groupingValues);\n        for (var k = 0; k < keys.length; k++) {\n            var stackingSeies = [];\n            var stackedValues = [];\n            var seriesCollection_2 = groupingValues[keys[k]];\n            for (var _i = 0, seriesCollection_1 = seriesCollection_2; _i < seriesCollection_1.length; _i++) {\n                var series = seriesCollection_1[_i];\n                if (series.type.indexOf('Stacking') !== -1 || (series.drawType.indexOf('Stacking') !== -1 &&\n                    (series.chart.chartAreaType === 'PolarRadar'))) {\n                    stackingGroup = (series.type.indexOf('StackingArea') !== -1) ? 'StackingArea100' :\n                        (series.type.indexOf('StackingLine') !== -1) ? 'StackingLine100' : series.stackingGroup;\n                    if (!lastPositive[stackingGroup]) {\n                        lastPositive[stackingGroup] = [];\n                        lastNegative[stackingGroup] = [];\n                    }\n                    yValues = series.yData;\n                    startValues = [];\n                    endValues = [];\n                    stackingSeies.push(series);\n                    visiblePoints = getVisiblePoints(series);\n                    for (var j = 0, pointsLength = visiblePoints.length; j < pointsLength; j++) {\n                        lastValue = 0;\n                        value = +yValues[j]; // Fix for chart not rendering while y value is given as string issue\n                        if (lastPositive[stackingGroup][visiblePoints[j].xValue] === undefined) {\n                            lastPositive[stackingGroup][visiblePoints[j].xValue] = 0;\n                        }\n                        if (lastNegative[stackingGroup][visiblePoints[j].xValue] === undefined) {\n                            lastNegative[stackingGroup][visiblePoints[j].xValue] = 0;\n                        }\n                        if (isStacking100) {\n                            value = value / frequencies[stackingGroup][visiblePoints[j].xValue] * 100;\n                            value = !isNaN(value) ? value : 0;\n                            visiblePoints[j].percentage = +(value.toFixed(2));\n                        }\n                        else {\n                            stackedValues[j] = stackedValues[j] ?\n                                stackedValues[j] + Math.abs(value) : Math.abs(value);\n                        }\n                        if (value >= 0) {\n                            lastValue = lastPositive[stackingGroup][visiblePoints[j].xValue];\n                            lastPositive[stackingGroup][visiblePoints[j].xValue] += value;\n                        }\n                        else {\n                            lastValue = lastNegative[stackingGroup][visiblePoints[j].xValue];\n                            lastNegative[stackingGroup][visiblePoints[j].xValue] += value;\n                        }\n                        startValues.push(lastValue);\n                        endValues.push(value + lastValue);\n                        if (isStacking100 && (endValues[j] > 100)) {\n                            endValues[j] = 100;\n                        }\n                    }\n                    series.stackedValues = new StackValues(startValues, endValues);\n                    var isLogAxis = series.yAxis.valueType === 'Logarithmic';\n                    var isColumnBarType = (series.type.indexOf('Column') !== -1 || series.type.indexOf('Bar') !== -1);\n                    series.yMin = isLogAxis && isColumnBarType && series.yMin < 1 ? series.yMin : (series.yAxis.startFromZero && series.yAxis.rangePadding === 'Auto' && series.yMin >= 0) ? 0 : parseFloat((Math.min.apply(0, isStacking100 ? startValues : endValues)).toFixed(10));\n                    series.yMax = Math.max.apply(0, endValues);\n                    if (series.yMin > Math.min.apply(0, endValues)) {\n                        series.yMin = (isStacking100) ? -100 :\n                            isLogAxis && isColumnBarType && series.yMin < 1 ? series.yMin : Math.min.apply(0, endValues);\n                    }\n                    if (series.yMax < Math.max.apply(0, startValues)) {\n                        series.yMax = 0;\n                    }\n                }\n            }\n            this.findPercentageOfStacking(stackingSeies, stackedValues, isStacking100);\n        }\n    };\n    Series.prototype.findPercentageOfStacking = function (stackingSeies, values, isStacking100) {\n        for (var _i = 0, stackingSeies_1 = stackingSeies; _i < stackingSeies_1.length; _i++) {\n            var item = stackingSeies_1[_i];\n            if (isStacking100) {\n                return null;\n            }\n            for (var _a = 0, _b = getVisiblePoints(item); _a < _b.length; _a++) {\n                var point = _b[_a];\n                point.percentage = Math.abs(+(point.y / values[point.index] * 100).toFixed(2));\n            }\n        }\n    };\n    Series.prototype.findFrequencies = function (seriesCollection) {\n        var frequencies = [];\n        var stackingGroup;\n        var visiblePoints = [];\n        for (var _i = 0, seriesCollection_3 = seriesCollection; _i < seriesCollection_3.length; _i++) {\n            var series = seriesCollection_3[_i];\n            series.yAxis.isStack100 = series.type.indexOf('100') !== -1 ? true : false;\n            visiblePoints = getVisiblePoints(series);\n            if (series.type.indexOf('Stacking') !== -1) {\n                stackingGroup = (series.type.indexOf('StackingArea') !== -1) ? 'StackingArea100' :\n                    (series.type.indexOf('StackingLine') !== -1) ? 'StackingLine100' : series.stackingGroup;\n                if (!frequencies[stackingGroup]) {\n                    frequencies[stackingGroup] = [];\n                }\n                for (var j = 0, pointsLength = visiblePoints.length; j < pointsLength; j++) {\n                    if (frequencies[stackingGroup][visiblePoints[j].xValue] === undefined) {\n                        frequencies[stackingGroup][visiblePoints[j].xValue] = 0;\n                    }\n                    if (series.yData[j] > 0) {\n                        frequencies[stackingGroup][visiblePoints[j].xValue] += series.yData[j];\n                    }\n                    else {\n                        frequencies[stackingGroup][visiblePoints[j].xValue] -= series.yData[j];\n                    }\n                }\n            }\n        }\n        return frequencies;\n    };\n    /* private dataManagerFailure(e: { result: Object[] }): void {\n         this.currentViewData = [];\n         this.refreshChart();\n     }*/\n    /**\n     * Renders the series on the chart.\n     *\n     * @param {Chart} chart - The chart on which the series is rendered.\n     * @returns {void}\n     * @private\n     */\n    Series.prototype.renderSeries = function (chart) {\n        if (this.chart.stockChart && this.xAxis.valueType === 'DateTimeCategory') {\n            for (var i = 0; i < this.points.length; i++) {\n                var index = this.xAxis.labels.indexOf(Date.parse(this.points[i].x.toString()).toString());\n                this.points[i].xValue = index;\n                if (chart.series.length > 1) {\n                    this.xData[i] = index;\n                    this.xMin = (this.xMin > index) ? index : this.xMin;\n                    this.xMax = (this.xMax < index) ? index : this.xMax;\n                }\n            }\n            if (this instanceof Series && this.type.indexOf('Spline') > -1) {\n                var isArea = this.type.indexOf('Area') > -1;\n                var isRange = this.type.indexOf('Range') > -1;\n                this.chart['spline' + (isArea ? isRange ? 'RangeArea' : 'Area' : '') + 'SeriesModule'].findSplinePoint(this);\n            }\n        }\n        var seriesType = firstToLowerCase(this.type);\n        seriesType = seriesType.replace('100', '');\n        if (chart[seriesType + 'SeriesModule']) {\n            if (this.category !== 'Indicator' && this.category !== 'TrendLine') {\n                this.createSeriesElements(chart);\n            }\n            this.visiblePoints = getVisiblePoints(this);\n            if (this.chart.enableCanvas) {\n                this.chart.canvasRender.ctx.save();\n                this.chart.canvasRender.ctx.beginPath();\n                if (chart.requireInvertedAxis) {\n                    this.chart.canvasRender.ctx.rect(this.yAxis.rect.x, this.xAxis.rect.y, this.yAxis.rect.width, this.xAxis.rect.height);\n                }\n                else {\n                    this.chart.canvasRender.ctx.rect(this.xAxis.rect.x, this.yAxis.rect.y, this.xAxis.rect.width, this.yAxis.rect.height);\n                }\n                this.chart.canvasRender.ctx.clip();\n                chart[seriesType + 'SeriesModule'].render(this, this.xAxis, this.yAxis, chart.requireInvertedAxis);\n                this.chart.canvasRender.ctx.restore();\n            }\n            else {\n                chart[seriesType + 'SeriesModule'].render(this, this.xAxis, this.yAxis, chart.requireInvertedAxis);\n            }\n            if (this.category !== 'Indicator') {\n                if (this.errorBar.visible) {\n                    this.chart.errorBarModule.render(this);\n                }\n                if (this.marker.dataLabel.visible) {\n                    if (this.chart.enableCanvas) {\n                        this.chart.canvasRender.ctx.save();\n                        this.chart.canvasRender.ctx.beginPath();\n                        if (chart.requireInvertedAxis) {\n                            this.chart.canvasRender.ctx.rect(this.yAxis.rect.x, this.xAxis.rect.y, this.yAxis.rect.width, this.xAxis.rect.height);\n                        }\n                        else {\n                            this.chart.canvasRender.ctx.rect(this.xAxis.rect.x, this.yAxis.rect.y, this.xAxis.rect.width, this.yAxis.rect.height);\n                        }\n                        this.chart.canvasRender.ctx.clip();\n                        chart.dataLabelModule.render(this, this.chart, this.marker.dataLabel);\n                        this.chart.canvasRender.ctx.restore();\n                    }\n                    else {\n                        chart.dataLabelModule.render(this, this.chart, this.marker.dataLabel);\n                    }\n                }\n                this.appendSeriesElement(chart.seriesElements, chart);\n            }\n            if (!this.chart.enableCanvas) {\n                this.performAnimation(chart, seriesType, this.errorBar, this.marker, this.marker.dataLabel);\n            }\n        }\n    };\n    /**\n     * Creates elements for the series on the chart.\n     *\n     * @param {Chart} chart - The chart for which series elements are created.\n     * @returns {void}\n     * @private\n     */\n    Series.prototype.createSeriesElements = function (chart) {\n        if (this.category !== 'Indicator') {\n            var elementId = chart.element.id;\n            // 8 for extend border value 5 for extend size value\n            var explodeValue = this.marker.border.width + 8 + 5;\n            var render = (this.type === 'Bubble' || this.type === 'Scatter') || (!this.marker.visible && chart.tooltip.shared && chart.enableCanvas) ?\n                chart.svgRenderer : chart.renderer;\n            var index = this.index === undefined ? this.category : this.index;\n            var markerHeight = void 0;\n            var markerWidth = void 0;\n            var options = void 0;\n            if (this.type === 'Scatter' || this.drawType === 'Scatter') {\n                markerHeight = (this.marker.height + explodeValue) / 2;\n                markerWidth = (this.marker.width + explodeValue) / 2;\n            }\n            else {\n                markerHeight = 0;\n                markerWidth = 0;\n            }\n            if (chart.chartAreaType === 'PolarRadar') {\n                var markerMaxValue = (this.drawType === 'Scatter') ? Math.max(this.marker.width, this.marker.height) : 0;\n                options = new CircleOption(elementId + '_ChartSeriesClipRect_' + index, 'transparent', { width: 1, color: 'Gray' }, 1, this.clipRect.width / 2 + this.clipRect.x, this.clipRect.height / 2 + this.clipRect.y, chart.radius + markerMaxValue);\n                this.clipRectElement = appendClipElement(chart.redraw, options, render, 'drawCircularClipPath');\n            }\n            else {\n                options = new RectOption(elementId + '_ChartSeriesClipRect_' + index, 'transparent', { width: 1, color: 'Gray' }, 1, {\n                    x: (this.xAxis.columnIndex === 0) ? -markerWidth : 0, y: (this.yAxis.rowIndex === chart.rows.length - 1) ? -markerHeight : 0,\n                    width: this.clipRect.width + (this.xAxis.columnIndex === chart.columns.length - 1 ? markerWidth * 2 : markerWidth),\n                    height: this.clipRect.height + (this.yAxis.rowIndex === 0 ? markerHeight * 2 : markerHeight)\n                });\n                this.clipRectElement = appendClipElement(chart.redraw, options, render);\n            }\n            var transform = chart.chartAreaType === 'Cartesian' ? 'translate(' + this.clipRect.x + ',' + (this.clipRect.y) + ')' : '';\n            this.symbolElement = null;\n            this.seriesElement = render.createGroup({\n                'id': elementId + 'SeriesGroup' + index,\n                'transform': transform,\n                'clip-path': 'url(#' + elementId + '_ChartSeriesClipRect_' + index + ')'\n            });\n            if (this.seriesElement) {\n                this.seriesElement.setAttribute('role', this.accessibility.accessibilityRole ? this.accessibility.accessibilityRole : 'region');\n                this.seriesElement.setAttribute('tabindex', this.accessibility.focusable ? String(this.accessibility.tabIndex) : '-1');\n                this.seriesElement.style.outline = 'none';\n                this.seriesElement.setAttribute('aria-label', this.accessibility.accessibilityDescription ? this.accessibility.accessibilityDescription : (this.name + ',' + this.type + ' series with ' + this.points.length + ' data points'));\n                this.seriesElement.setAttribute('aria-hidden', 'false');\n            }\n            if (!this.chart.enableCanvas || this.type === 'Bubble') {\n                this.seriesElement.setAttribute('tabindex', this.accessibility.focusable ? (index === 0 ? '0' : !this.checkTabindex(chart.visibleSeries, index) ? String(this.accessibility.tabIndex) : '') : '-1');\n                this.seriesElement.style.outline = 'none';\n                this.seriesElement.appendChild(this.clipRectElement);\n            }\n        }\n    };\n    Series.prototype.checkTabindex = function (visibleSeries, index) {\n        for (var i = 0; i < index; i++) {\n            if (visibleSeries[i].visible) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * Appends a series element to the chart.\n     *\n     * @param {Element} element - The series element to append.\n     * @param {Chart} chart - The chart to which the series element will be appended.\n     * @returns {void}\n     * @private\n     */\n    Series.prototype.appendSeriesElement = function (element, chart) {\n        var marker = this.marker;\n        var dataLabel = marker.dataLabel;\n        var redraw = chart.redraw;\n        if (this.category !== 'TrendLine') {\n            appendChildElement(chart.enableCanvas, chart.seriesElements, this.seriesElement, redraw);\n            var errorBar = this.errorBar;\n            if (errorBar.visible) {\n                if (chart.chartAreaType === 'PolarRadar') {\n                    appendChildElement(chart.enableCanvas, chart.seriesElements, this.seriesElement, redraw);\n                }\n                else {\n                    appendChildElement(chart.enableCanvas, chart.seriesElements, this.errorBarElement, redraw);\n                }\n            }\n        }\n        if (marker.visible && (chart.chartAreaType === 'Cartesian' ||\n            ((this.drawType !== 'Scatter') && chart.chartAreaType === 'PolarRadar')) && this.type !== 'Scatter' &&\n            this.type !== 'Bubble' && this.type !== 'Candle' && this.type !== 'Hilo' && this.type !== 'HiloOpenClose' && this.symbolElement) {\n            appendChildElement(chart.enableCanvas, chart.seriesElements, this.symbolElement, redraw);\n        }\n        if (dataLabel.visible && this.textElement) {\n            appendChildElement(chart.enableCanvas, chart.dataLabelElements, this.shapeElement, redraw);\n            appendChildElement(chart.enableCanvas, chart.dataLabelElements, this.textElement, redraw);\n        }\n        if (!chart.enableCanvas && chart.dataLabelElements.hasChildNodes()) {\n            chart.seriesElements.appendChild(chart.dataLabelElements);\n        }\n    };\n    /**\n     * Performs animation for the specified chart elements.\n     *\n     * @param {Chart} chart - The chart for which animation is performed.\n     * @param {string} type - The type of animation to be performed.\n     * @param {ErrorBarSettingsModel} errorBar - The error bar settings for the animation.\n     * @param {MarkerSettingsModel} marker - The marker settings for the animation.\n     * @param {DataLabelSettingsModel} dataLabel - The data label settings for the animation.\n     * @returns {void}\n     * @private\n     */\n    Series.prototype.performAnimation = function (chart, type, errorBar, marker, dataLabel) {\n        if (((this.animation.enable && animationMode !== 'Disable') || animationMode === 'Enable') && chart.animateSeries && (!chart.stockChart || !chart.stockChart.isStockChartRendered)) {\n            chart[type + 'SeriesModule'].doAnimation(this);\n            if (errorBar.visible) {\n                chart.errorBarModule.doErrorBarAnimation(this);\n            }\n            if (marker.visible && (this.isRectSeries || this.type === 'Line' || this.type === 'Polar' || this.type === 'Radar')) {\n                chart.markerRender.doMarkerAnimation(this);\n            }\n            //to datalabel animation disabled for edge and IE\n            if (dataLabel.visible && Browser.info.name !== 'edge' && !Browser.isIE) {\n                chart.dataLabelModule.doDataLabelAnimation(this);\n            }\n        }\n    };\n    /**\n     * Sets the color of a data point.\n     *\n     * @param {Points} point - The data point.\n     * @param {string} color - The color to set.\n     * @returns {string} - The updated color.\n     * @private\n     */\n    Series.prototype.setPointColor = function (point, color) {\n        color = point.interior || color;\n        return point.isEmpty ? (this.emptyPointSettings.fill || color) : color;\n    };\n    /**\n     * Sets the border color of a data point.\n     *\n     * @param {Points} point - The data point.\n     * @param {BorderModel} border - The border color to set.\n     * @returns {BorderModel} - The updated border color.\n     * @private\n     */\n    Series.prototype.setBorderColor = function (point, border) {\n        border.width = point.isEmpty ? (this.emptyPointSettings.border.width || border.width) : border.width;\n        border.color = point.isEmpty ? (this.emptyPointSettings.border.color || border.color) : border.color;\n        return border;\n    };\n    /**\n     * Adds a data point to the data source.\n     *\n     * @function addPoint\n     * @param {Object} dataPoint - The data point to be added.\n     * @param {number} duration - The duration for the animation.\n     * @returns {void}\n     */\n    Series.prototype.addPoint = function (dataPoint, duration) {\n        var yMin = this.yMin;\n        var yMax = this.yMax;\n        this.removeTrackballElements();\n        this.dataSource.push(dataPoint);\n        if (this.type === 'Radar' || this.type === 'Polar') {\n            return this.chart.refresh();\n        }\n        if (this.type === 'Histogram') {\n            this.currentViewData = this.chart[firstToLowerCase(this.type) + 'SeriesModule'].\n                processInternalData(extend([], this.dataSource, null, true), this);\n            for (var i = 0; i < this.currentViewData.length; i++) {\n                this.updatePoint(i);\n            }\n        }\n        else {\n            this.currentViewData = this.dataSource;\n            var pointIndex = this.points.length === 0 ? 0 : this.points[this.points.length - 1].index + 1;\n            this.updatePoint(pointIndex);\n        }\n        if (this.category === 'Pareto') {\n            var dataSource = extend([], this.dataSource, null, true);\n            var series = this.chart.visibleSeries[this.index + this.chart.series.length];\n            series.currentViewData = this.chart.paretoSeriesModule.performCumulativeCalculation(dataSource, this);\n            for (var i = 0; i < series.currentViewData.length; i++) {\n                if (!series.points[i]) {\n                    series.updatePoint(i);\n                }\n                series.points[i].y = series.points[i].yValue = series.currentViewData[i][series.yName];\n            }\n        }\n        this.updateSplineValue();\n        this.chart.calculateStackValues();\n        this.chart.redraw = this.chart.enableAnimation;\n        var chartDuration = this.chart.duration;\n        this.chart.duration = isNullOrUndefined(duration) ? 500 : duration;\n        this.chart.animateSeries = false;\n        this.chart.pointsAdded = true;\n        if (this.chart.enableAnimation && (!(this.isRectSeries || this.type === 'Bubble' || this.type === 'Scatter')) && (this.type.indexOf('step') === -1)) {\n            if (this.marker && this.marker.visible && this.visible) {\n                for (var i = this.points.length - 2; i >= 0; i--) {\n                    if (this.points[i] && !isNullOrUndefined(this.points[this.points.length - 2].y) &&\n                        this.points[i].symbolLocations && this.points[i].symbolLocations[0] !== undefined) {\n                        this.chart.markerRender.renderMarker(this, this.points[this.points.length - 2], this.points[i].symbolLocations[0], null, true);\n                        break;\n                    }\n                }\n            }\n        }\n        if (this.yMin >= yMin && this.yMax <= yMax) {\n            if (!setRange(this.xAxis)) {\n                this.xAxis.baseModule.calculateRangeAndInterval(new Size(this.xAxis.rect.width, this.chart.availableSize.height), this.xAxis);\n                this.xAxis.updateAxis();\n            }\n            this.chart.pointsAdded = false;\n            this.updateSeries(true, false);\n        }\n        if (this.yMin < yMin || this.yMax > yMax) {\n            this.updateChartAxis();\n            this.chart.pointsAdded = false;\n            this.updateSeries(true, true);\n        }\n        this.chart.redraw = false;\n        this.chart.duration = chartDuration;\n    };\n    /**\n     * Removes a data point from the series data source at the specified index.\n     *\n     * @function removePoint\n     * @param {number} index - The index of the data point to be removed.\n     * @param {number} duration - The duration for the animation.\n     * @returns {void}\n     */\n    Series.prototype.removePoint = function (index, duration) {\n        var dataSource = extend([], this.dataSource, null, true);\n        var chartDuration = this.chart.duration;\n        if (dataSource.length > 0 && index >= 0 && index < dataSource.length) {\n            dataSource.splice(index, 1);\n            this.dataSource.splice(index, 1);\n            this.removeTrackballElements(index);\n            if (this.type === 'Radar' || this.type === 'Polar') {\n                return this.chart.refresh();\n            }\n            this.chart.redraw = this.chart.enableAnimation;\n            this.chart.animateSeries = false;\n            this.chart.pointsAdded = true;\n            this.chart.duration = isNullOrUndefined(duration) ? 500 : duration;\n            if (this.type === 'Histogram') {\n                var length_1 = this.points.length;\n                this.points = [];\n                this.visiblePoints = [];\n                this.currentViewData = this.chart[firstToLowerCase(this.type) + 'SeriesModule'].\n                    processInternalData(extend([], this.dataSource, null, true), this);\n                for (var i = 0; i < this.currentViewData.length; i++) {\n                    this.updatePoint(i);\n                }\n                if (length_1 > this.points.length) {\n                    this.removedPointIndex = index;\n                }\n            }\n            else {\n                this.removedPointIndex = index;\n                this.points.splice(index, 1);\n                this.visiblePoints.splice(index, 1);\n            }\n            this.yData = [];\n            this.xData = [];\n            var yMin = this.yMin;\n            var yMax = this.yMax;\n            this.yMin = Infinity;\n            this.xMin = Infinity;\n            this.yMax = -Infinity;\n            this.xMax = -Infinity;\n            if (this.xAxis.valueType.indexOf('Category') > -1 && this.chart.series.length === 1) {\n                this.xAxis.labels = [];\n                this.xAxis.indexLabels = {};\n            }\n            if (index === 0) {\n                this.chart.pointsRemoved = this.chart.enableAnimation;\n            }\n            for (var i = 0; i < this.points.length; i++) {\n                this.updatePointsAfterRemoval(i);\n            }\n            if (this.category === 'Pareto') {\n                var series = this.chart.visibleSeries[this.index + this.chart.series.length];\n                series.yMin = Infinity;\n                series.xMin = Infinity;\n                series.yMax = -Infinity;\n                series.xMax = -Infinity;\n                series.points.splice(index, 1);\n                series.visiblePoints.splice(index, 1);\n                series.currentViewData = this.chart.paretoSeriesModule.performCumulativeCalculation(this.dataSource, this);\n                for (var i = 0; i < series.currentViewData.length; i++) {\n                    series.points[i].y = series.points[i].yValue = series.currentViewData[i][series.yName];\n                    series.updatePointsAfterRemoval(i);\n                }\n            }\n            this.updateSplineValue();\n            this.chart.calculateStackValues();\n            if (!setRange(this.xAxis) && yMax === this.yMax && yMin === this.yMin) {\n                this.xAxis.baseModule.calculateRangeAndInterval(new Size(this.xAxis.rect.width, this.chart.availableSize.height), this.xAxis);\n                this.xAxis.updateAxis();\n                this.createSeriesElements(this.chart);\n                this.chart.pointsAdded = false;\n                this.updateSeries(true, false);\n            }\n            else if (yMax < this.yMax || yMin > this.yMin || yMax > this.yMax || yMin < this.yMin) {\n                this.updateChartAxis();\n                this.createSeriesElements(this.chart);\n                this.chart.pointsAdded = false;\n                this.updateSeries(true, true);\n            }\n        }\n        appendChildElement(this.chart.enableCanvas, this.chart.seriesElements, this.seriesElement, true);\n        this.chart.redraw = false;\n        this.chart.duration = chartDuration;\n        this.chart.pointsRemoved = false;\n        this.removedPointIndex = null;\n    };\n    Series.prototype.updatePointsAfterRemoval = function (index) {\n        var point = this.points[index];\n        var option = {\n            skeleton: 'full',\n            type: 'dateTime'\n        };\n        var dateParser = this.chart.intl.getDateParser(option);\n        var dateFormatter = this.chart.intl.getDateFormat(option);\n        if (this.xAxis.valueType === 'Category' && this.chart.series.length === 1) {\n            this.pushCategoryData(point, index, point.x);\n        }\n        else if (this.xAxis.valueType === 'DateTimeCategory' && this.chart.series.length === 1) {\n            this.pushCategoryData(point, index, Date.parse(dateParser(dateFormatter(point.x))).toString());\n        }\n        this.pushData(point, index);\n        this.setEmptyPoint(this.points[index], index);\n    };\n    /**\n     * Removes trackball elements from the series.\n     *\n     * @param {number} index - The index of the data point.\n     * @returns {void}\n     */\n    Series.prototype.removeTrackballElements = function (index) {\n        if (this.marker.visible) {\n            if (index !== undefined) {\n                var baseId = this.chart.element.id + '_Series_' + this.index + '_Point_' + index + '_Trackball_';\n                var trackball0 = getElement(baseId + '0');\n                if (trackball0) {\n                    trackball0.remove();\n                }\n                var trackball1 = getElement(baseId + '1');\n                if (trackball1) {\n                    trackball1.remove();\n                }\n                var symbolElement = getElement(this.chart.element.id + '_Series_' + this.index + '_Point_' + index + '_Symbol');\n                if (symbolElement) {\n                    symbolElement.setAttribute('visibility', 'visible');\n                }\n            }\n            else {\n                var baseClassPattern = this.chart.element.id + '_EJ2-Trackball_Series_' + this.index + '_Point_';\n                var elements = document.querySelectorAll(\"[class*=\\\"\" + baseClassPattern + \"\\\"]\");\n                if (elements[0]) {\n                    var pointIndexMatch = elements[0].id.match(/_Point_(\\d+)_/);\n                    var pointIndex = pointIndexMatch ? parseInt(pointIndexMatch[1], 10) : null;\n                    elements[0].remove();\n                    var symbolElement = getElement(this.chart.element.id + '_Series_' + this.index + '_Point_' + pointIndex + '_Symbol');\n                    if (symbolElement) {\n                        symbolElement.setAttribute('visibility', 'visible');\n                    }\n                }\n                if (elements[1]) {\n                    elements[1].remove();\n                }\n            }\n        }\n        if (this.chart.tooltip.enable) {\n            this.chart.tooltipModule.previousPoints = [];\n            var tooltipElement = getElement(this.chart.element.id + '_tooltip');\n            if (tooltipElement) {\n                tooltipElement.remove();\n            }\n        }\n    };\n    /**\n     * Sets the data source with the provided data.\n     *\n     * @function setData\n     * @param {Object[]} data - An array of objects representing the data points.\n     * @param {number} duration - The duration for the animation.\n     * @returns {void}\n     */\n    Series.prototype.setData = function (data, duration) {\n        var _this = this;\n        if (!data) {\n            return null;\n        }\n        var updatedData = [];\n        if (this.dataSource.length === data.length) {\n            for (var i = 0; i < data.length; i++) {\n                if (data[i][this.xName] instanceof Date) {\n                    updatedData.push(data[i][this.xName].getTime());\n                }\n                else {\n                    updatedData.push(data[i][this.xName]);\n                }\n                if (this.currentData.length < this.dataSource.length) {\n                    var dataSource = extend([], this.dataSource, null, true);\n                    if (dataSource[i][this.xName] instanceof Date) {\n                        this.currentData.push(dataSource[i][this.xName].getTime());\n                    }\n                    else {\n                        this.currentData.push(dataSource[i][this.xName]);\n                    }\n                }\n            }\n        }\n        var isSameData = updatedData.every(function (element) { return _this.currentData.indexOf(element) !== -1; });\n        if (this.currentViewData) {\n            isSameData = true;\n        }\n        var isXAxisChanged = false;\n        var yMin = this.yMin;\n        var yMax = this.yMax;\n        this.yMin = Infinity;\n        this.yMax = -Infinity;\n        var points = [];\n        this.chart.dataLabelCollections = [];\n        this.chart.rotatedDataLabelCollections = [];\n        var samePoints = false;\n        var index = null;\n        if (this.dataSource.length === data.length && !(this.type === 'Radar' || this.type === 'Polar') && isSameData) {\n            samePoints = true;\n            this.yData = [];\n            if (this.type === 'Histogram' && this.dataSource.length === data.length) {\n                var newHistogramData = this.chart[firstToLowerCase(this.type) + 'SeriesModule'].\n                    processInternalData(extend([], data, null, true), this);\n                this.currentViewData = newHistogramData;\n                for (var j = 0; j < newHistogramData.length; j++) {\n                    this.updatePoint(j);\n                }\n            }\n            else {\n                for (var i = 0; i < data.length; i++) {\n                    var newData = data[i][this.xName];\n                    var existingData = this.dataSource[i][this.xName];\n                    if (data[i][this.xName] instanceof Date) {\n                        newData = data[i][this.xName].getTime();\n                        existingData = this.dataSource[i][this.xName].getTime();\n                    }\n                    if (this.currentData[i] !== newData) {\n                        isXAxisChanged = true;\n                    }\n                    var point = this.points[i];\n                    var getObjectValueByMappingString = this.enableComplexProperty ? getValue : this.getObjectValue;\n                    var existingPoint = this.dataSource[i];\n                    var newPoint = data[i];\n                    if ((this.seriesType === 'XY' || this.seriesType === 'BoxPlot')) {\n                        point.y = getObjectValueByMappingString(this.yName, newPoint);\n                        if (this.type === 'Bubble' && existingPoint[this.size] !== newPoint[this.size]) {\n                            point.size = getObjectValueByMappingString(this.size, newPoint);\n                        }\n                        points.push(i);\n                    }\n                    else if (existingPoint[this.high] !== newPoint[this.high] || existingPoint[this.low] !== newPoint[this.low] ||\n                        existingPoint[this.open] !== newPoint[this.open] || existingPoint[this.close] !== newPoint[this.close] ||\n                        existingPoint[this.volume] !== newPoint[this.volume]) {\n                        point.high = getObjectValueByMappingString(this.high, newPoint);\n                        point.low = getObjectValueByMappingString(this.low, newPoint);\n                        point.open = getObjectValueByMappingString(this.open, newPoint);\n                        point.close = getObjectValueByMappingString(this.close, newPoint);\n                        point.volume = getObjectValueByMappingString(this.volume, newPoint);\n                        points.push(i);\n                    }\n                    point.yValue = point.y;\n                    point.x = getObjectValueByMappingString(this.xName, newPoint);\n                    if (!this.currentViewData) {\n                        point.index = (this.xAxis.valueType === 'DateTime' && typeof (point.x) !== 'number') ? this.currentData.indexOf(point.x.getTime()) : this.currentData.indexOf(point.x);\n                    }\n                    if ((this.xAxis.valueType === 'Category' || this.xAxis.valueType === 'DateTimeCategory') && i < this.xAxis.visibleLabels.length) {\n                        this.xAxis.visibleLabels[i].value = updatedData.indexOf(this.currentData[i *\n                            this.xAxis.visibleRange.interval]);\n                        this.xAxis.labels[i] = String(updatedData[i]);\n                    }\n                    this.setEmptyPoint(point, i);\n                    this.dataSource[i] = data[i];\n                }\n            }\n        }\n        if (!samePoints) {\n            this.dataSource = data;\n        }\n        else {\n            this.chart.redraw = this.chart.enableAnimation;\n            this.chart.animateSeries = false;\n            this.chart.pointsAdded = true;\n            var chartDuration = this.chart.duration;\n            this.chart.duration = isNullOrUndefined(duration) ? 500 : duration;\n            if (this.type.indexOf('Stacking') !== -1) {\n                this.chart.calculateStackValues();\n            }\n            this.updateSplineValue();\n            if (yMax === this.yMax && yMin === this.yMin && this.visible) {\n                this.chart.pointsAdded = false;\n                this.chart[firstToLowerCase((this.category === 'Pareto' ? 'Column' : this.type.replace('100', ''))) + 'SeriesModule'].updateDirection(this, points, this.chart.requireInvertedAxis);\n                if (this.chart.annotationModule) {\n                    this.chart.annotationModule.renderAnnotations(getElement((this.chart.element.id) + '_Secondary_Element'));\n                }\n                if (!setRange(this.xAxis) && (isXAxisChanged)) {\n                    this.xAxis.updateAxis();\n                }\n            }\n            else if ((yMax < this.yMax || yMin > this.yMin || yMax > this.yMax || yMin < this.yMin) && this.visible) {\n                var maximumLabelWidth = this.yAxis.maxLabelSize.width;\n                this.yAxis.baseModule.calculateRangeAndInterval(new Size(this.chart.availableSize.width, this.yAxis.rect.height), this.yAxis);\n                if (maximumLabelWidth < this.yAxis.maxLabelSize.width) {\n                    this.chart.calculateBounds();\n                    this.chart.axisCollections.forEach(function (axis) {\n                        if (!setRange(axis)) {\n                            axis.updateAxis();\n                        }\n                    });\n                    this.chart.chartAxisLayoutPanel.drawPaneLines(this.chart);\n                    this.chart.renderAreaBorder();\n                }\n                else {\n                    if (!setRange(this.yAxis)) {\n                        this.yAxis.updateAxis();\n                    }\n                    if (!setRange(this.xAxis) && (isXAxisChanged)) {\n                        this.xAxis.updateAxis();\n                    }\n                    if (this.type === 'Histogram' && !setRange(this.xAxis)) {\n                        this.xAxis.baseModule.calculateRangeAndInterval(new Size(this.xAxis.rect.width, this.chart.availableSize.height), this.xAxis);\n                        this.xAxis.updateAxis();\n                    }\n                }\n                this.chart.pointsAdded = false;\n                if (isXAxisChanged) {\n                    this.chart[firstToLowerCase((this.category === 'Pareto' ? 'Column' : this.type.replace('100', ''))) + 'SeriesModule'].updateDirection(this, points, this.chart.requireInvertedAxis);\n                    index = this.index;\n                }\n                this.updateSeries(false, true, index);\n                if (this.chart.stripLineModule) {\n                    this.chart.stripLineModule.renderStripLine(this.chart, 'Behind', this.chart.axisCollections);\n                }\n            }\n            this.chart.redraw = false;\n            this.chart.pointsRemoved = false;\n            this.chart.duration = chartDuration;\n        }\n    };\n    /**\n     * Updates the chart axes based on current data and axis bounds.\n     *\n     * @returns {void}\n     */\n    Series.prototype.updateChartAxis = function () {\n        var maximumLabelWidth = this.yAxis.maxLabelSize.width;\n        this.yAxis.baseModule.calculateRangeAndInterval(new Size(this.chart.availableSize.width, this.yAxis.rect.height), this.yAxis);\n        if (maximumLabelWidth < this.yAxis.maxLabelSize.width) {\n            this.chart.calculateBounds();\n            this.chart.axisCollections.forEach(function (axis) {\n                if (!setRange(axis)) {\n                    axis.updateAxis();\n                }\n            });\n            this.chart.chartAxisLayoutPanel.drawPaneLines(this.chart);\n            this.chart.renderAreaBorder();\n        }\n        else {\n            if (!setRange(this.xAxis)) {\n                this.xAxis.baseModule.calculateRangeAndInterval(new Size(this.xAxis.rect.width, this.chart.availableSize.height), this.xAxis);\n                this.xAxis.updateAxis();\n            }\n            if (!setRange(this.yAxis)) {\n                this.yAxis.updateAxis();\n            }\n        }\n        if (this.chart.stripLineModule) {\n            this.chart.stripLineModule.renderStripLine(this.chart, 'Behind', this.chart.axisCollections);\n        }\n    };\n    Series.prototype.updateSeries = function (xAxis, yAxis, index) {\n        var seriesCollection = [];\n        if (xAxis && yAxis) {\n            var set = new Set(this.xAxis.series.concat(this.yAxis.series));\n            set.forEach(function (series) {\n                seriesCollection.push(series);\n            });\n        }\n        else {\n            seriesCollection = xAxis ? this.xAxis.series.slice() : this.yAxis.series.slice();\n        }\n        for (var _i = 0, seriesCollection_4 = seriesCollection; _i < seriesCollection_4.length; _i++) {\n            var series = seriesCollection_4[_i];\n            if (series.visible && series.index !== index) {\n                findClipRect(series, this.chart.enableCanvas);\n                var transform = 'translate(' + this.clipRect.x + ',' + (this.clipRect.y) + ')';\n                series.seriesElement.setAttribute('transform', transform);\n                series.chart[firstToLowerCase(series.type.replace('100', '')) + 'SeriesModule'].render(series, series.xAxis, series.yAxis, series.chart.requireInvertedAxis, series.chart.enableAnimation);\n                if (series.marker.visible && (series.chart.chartAreaType === 'Cartesian') && series.type !== 'Scatter' && series.type !== 'Bubble'\n                    && series.type !== 'Candle' && series.type !== 'Hilo' && series.type !== 'HiloOpenClose' && series.symbolElement) {\n                    series.symbolElement.setAttribute('transform', transform);\n                    appendChildElement(series.chart.enableCanvas, series.chart.seriesElements, series.symbolElement, true);\n                }\n                if (series.marker.dataLabel.visible && series.chart.dataLabelModule) {\n                    series.chart.dataLabelCollections = [];\n                    series.chart.dataLabelModule.render(series, series.chart, series.marker.dataLabel);\n                    if (series.textElement) {\n                        if (series.shapeElement) {\n                            series.shapeElement.setAttribute('transform', transform);\n                        }\n                        appendChildElement(series.chart.enableCanvas, series.chart.dataLabelElements, series.shapeElement, true);\n                        series.textElement.setAttribute('transform', transform);\n                        appendChildElement(series.chart.enableCanvas, series.chart.dataLabelElements, series.textElement, true);\n                    }\n                }\n                if (series.chart.annotationModule) {\n                    series.chart.annotationModule.renderAnnotations(getElement((series.chart.element.id) + '_Secondary_Element'));\n                }\n            }\n        }\n    };\n    Series.prototype.updatePoint = function (index) {\n        var point = new Points();\n        var textMappingName = this instanceof Series && this.marker.dataLabel.name ?\n            this.marker.dataLabel.name : '';\n        var xName = (this instanceof Series && this.type === 'Histogram') ? 'x' : this.xName;\n        if (this.xAxis.valueType === 'Category') {\n            this.pushCategoryPoint(point, index, textMappingName, xName);\n        }\n        else if (this.xAxis.valueType.indexOf('DateTime') > -1) {\n            var point_1 = this.points[index];\n            var option = {\n                skeleton: 'full',\n                type: 'dateTime'\n            };\n            var dateParser = this.chart.intl.getDateParser(option);\n            var dateFormatter = this.chart.intl.getDateFormat(option);\n            this.pushDateTimePoint(point_1, index, textMappingName, xName, dateParser, dateFormatter);\n        }\n        else {\n            this.pushDoublePoint(point, index, textMappingName, xName);\n        }\n    };\n    /**\n     * Formats the accessibility description for a chart series.\n     *\n     * @param {Points} point - Data point containing the values to be formatted.\n     * @param {Series} series - Series containing the values to be formatted.\n     * @param {string} format - String format with placeholders to be replaced with actual values.\n     * @returns {string} The formatted accessibility description string.\n     */\n    Series.prototype.formatAccessibilityDescription = function (point, series) {\n        var format = series.accessibility.accessibilityDescriptionFormat;\n        return format\n            .replace('${series.name}', series && series.name ? series.name : '')\n            .replace('${point.x}', point && point.x ? point.x.toString() : '')\n            .replace('${point.y}', point && point.y ? point.y.toString() : '')\n            .replace('${point.high}', point && point.high ? point.high.toString() : '')\n            .replace('${point.low}', point && point.low ? point.low.toString() : '')\n            .replace('${point.close}', point && point.close ? point.close.toString() : '')\n            .replace('${point.open}', point && point.open ? point.open.toString() : '')\n            .replace('${point.maximum}', point && point.maximum ? point.maximum.toString() : '')\n            .replace('${point.minimum}', point && point.minimum ? point.minimum.toString() : '')\n            .replace('${point.median}', point && point.median ? point.median.toString() : '')\n            .replace('${point.lowerQuartile}', point && point.lowerQuartile ? point.lowerQuartile.toString() : '')\n            .replace('${point.upperQuartile}', point && point.upperQuartile ? point.upperQuartile.toString() : '');\n    };\n    __decorate([\n        Property('')\n    ], Series.prototype, \"name\", void 0);\n    __decorate([\n        Property('')\n    ], Series.prototype, \"yName\", void 0);\n    __decorate([\n        Property('Line')\n    ], Series.prototype, \"drawType\", void 0);\n    __decorate([\n        Property(true)\n    ], Series.prototype, \"isClosed\", void 0);\n    __decorate([\n        Property(null)\n    ], Series.prototype, \"bearFillColor\", void 0);\n    __decorate([\n        Property(null)\n    ], Series.prototype, \"bullFillColor\", void 0);\n    __decorate([\n        Property(false)\n    ], Series.prototype, \"enableSolidCandles\", void 0);\n    __decorate([\n        Property('')\n    ], Series.prototype, \"size\", void 0);\n    __decorate([\n        Property(null)\n    ], Series.prototype, \"binInterval\", void 0);\n    __decorate([\n        Property(false)\n    ], Series.prototype, \"showNormalDistribution\", void 0);\n    __decorate([\n        Property('')\n    ], Series.prototype, \"stackingGroup\", void 0);\n    __decorate([\n        Complex({ color: null, width: 0 }, Border)\n    ], Series.prototype, \"border\", void 0);\n    __decorate([\n        Property(1)\n    ], Series.prototype, \"opacity\", void 0);\n    __decorate([\n        Property(0)\n    ], Series.prototype, \"zOrder\", void 0);\n    __decorate([\n        Property('')\n    ], Series.prototype, \"groupName\", void 0);\n    __decorate([\n        Property('Line')\n    ], Series.prototype, \"type\", void 0);\n    __decorate([\n        Complex(null, ErrorBarSettings)\n    ], Series.prototype, \"errorBar\", void 0);\n    __decorate([\n        Complex(null, MarkerSettings)\n    ], Series.prototype, \"marker\", void 0);\n    __decorate([\n        Complex(null, ParetoOptions)\n    ], Series.prototype, \"paretoOptions\", void 0);\n    __decorate([\n        Complex({}, DragSettings)\n    ], Series.prototype, \"dragSettings\", void 0);\n    __decorate([\n        Collection([], Trendline)\n    ], Series.prototype, \"trendlines\", void 0);\n    __decorate([\n        Property(true)\n    ], Series.prototype, \"enableTooltip\", void 0);\n    __decorate([\n        Property(true)\n    ], Series.prototype, \"showNearestTooltip\", void 0);\n    __decorate([\n        Property('')\n    ], Series.prototype, \"tooltipFormat\", void 0);\n    __decorate([\n        Property('')\n    ], Series.prototype, \"tooltipMappingName\", void 0);\n    __decorate([\n        Property('SeriesType')\n    ], Series.prototype, \"legendShape\", void 0);\n    __decorate([\n        Property('')\n    ], Series.prototype, \"legendImageUrl\", void 0);\n    __decorate([\n        Property(null)\n    ], Series.prototype, \"selectionStyle\", void 0);\n    __decorate([\n        Property(null)\n    ], Series.prototype, \"unSelectedStyle\", void 0);\n    __decorate([\n        Property(null)\n    ], Series.prototype, \"nonHighlightStyle\", void 0);\n    __decorate([\n        Property(1)\n    ], Series.prototype, \"minRadius\", void 0);\n    __decorate([\n        Property(3)\n    ], Series.prototype, \"maxRadius\", void 0);\n    __decorate([\n        Property('Natural')\n    ], Series.prototype, \"splineType\", void 0);\n    __decorate([\n        Property(0.5)\n    ], Series.prototype, \"cardinalSplineTension\", void 0);\n    __decorate([\n        Complex(null, EmptyPointSettings)\n    ], Series.prototype, \"emptyPointSettings\", void 0);\n    __decorate([\n        Property(true)\n    ], Series.prototype, \"showMean\", void 0);\n    __decorate([\n        Property('Normal')\n    ], Series.prototype, \"boxPlotMode\", void 0);\n    __decorate([\n        Property(true)\n    ], Series.prototype, \"showOutliers\", void 0);\n    __decorate([\n        Property(null)\n    ], Series.prototype, \"columnWidth\", void 0);\n    __decorate([\n        Property(null)\n    ], Series.prototype, \"columnWidthInPixel\", void 0);\n    __decorate([\n        Property('Rectangle')\n    ], Series.prototype, \"columnFacet\", void 0);\n    __decorate([\n        Property(0)\n    ], Series.prototype, \"columnSpacing\", void 0);\n    __decorate([\n        Property('#C64E4A')\n    ], Series.prototype, \"negativeFillColor\", void 0);\n    __decorate([\n        Property('#4E81BC')\n    ], Series.prototype, \"summaryFillColor\", void 0);\n    __decorate([\n        Property()\n    ], Series.prototype, \"intermediateSumIndexes\", void 0);\n    __decorate([\n        Property()\n    ], Series.prototype, \"sumIndexes\", void 0);\n    __decorate([\n        Property('Left')\n    ], Series.prototype, \"step\", void 0);\n    __decorate([\n        Property(false)\n    ], Series.prototype, \"noRisers\", void 0);\n    __decorate([\n        Complex({}, SeriesAccessibility)\n    ], Series.prototype, \"accessibility\", void 0);\n    __decorate([\n        Complex({ color: 'black', width: 2 }, Connector)\n    ], Series.prototype, \"connector\", void 0);\n    __decorate([\n        Complex(null, CornerRadius)\n    ], Series.prototype, \"cornerRadius\", void 0);\n    return Series;\n}(SeriesBase));\nexport { Series };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}