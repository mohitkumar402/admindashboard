{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { Series } from '../series/chart-series';\nimport { ColumnBase } from './column-base';\nimport { Axis } from '../axis/axis';\nimport { markerShapes } from './marker';\nimport { getSeriesColor } from '../../common/model/theme';\n/**\n * The `ParetoSeries` module is used to render the pareto series.\n */\nvar ParetoSeries = /** @class */function (_super) {\n  __extends(ParetoSeries, _super);\n  function ParetoSeries() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.paretoAxes = [];\n    return _this;\n  }\n  /**\n   * Defines the Line initialization.\n   *\n   * @private\n   */\n  ParetoSeries.prototype.initSeries = function (targetSeries, chart) {\n    var series = new Series(chart, 'series', targetSeries.properties, true);\n    var colors = chart.palettes.length ? chart.palettes : getSeriesColor(chart.theme);\n    var count = colors.length;\n    series.name = 'Pareto';\n    series.yAxisName = targetSeries.yAxisName + '_CumulativeAxis';\n    series.category = 'Pareto';\n    targetSeries.category = 'Pareto';\n    series.index = targetSeries.index + chart.series.length;\n    series.type = 'Line';\n    series.interior = series.fill = series.paretoOptions.fill ? series.paretoOptions.fill : colors[series.index % count];\n    series.width = series.paretoOptions.width;\n    series.dashArray = series.paretoOptions.dashArray;\n    series.marker = series.paretoOptions.marker;\n    if (series.marker && series.marker.visible) {\n      series.marker.shape = series.marker.shape ? series.marker.shape : markerShapes[chart.markerIndex % 10];\n      chart.markerIndex++;\n    }\n    chart.visibleSeries.push(series);\n    this.initAxis(targetSeries, series, chart);\n  };\n  /**\n   * Defines the Axis initialization for Line.\n   *\n   * @private\n   */\n  ParetoSeries.prototype.initAxis = function (paretoSeries, targetSeries, chart) {\n    var isExist = this.paretoAxes.some(function (currentAxis) {\n      return currentAxis.name === targetSeries.yAxisName;\n    });\n    if (!isExist) {\n      var secondaryAxis = paretoSeries.yAxisName && chart.axes.length ? chart.axes.filter(function (axis) {\n        return axis.name === paretoSeries.yAxisName;\n      })[0] : chart.primaryYAxis;\n      var newAxis = new Axis(chart, 'axes', {\n        name: targetSeries.yAxisName,\n        majorGridLines: {\n          width: 0\n        },\n        majorTickLines: secondaryAxis.majorTickLines,\n        lineStyle: secondaryAxis.lineStyle,\n        minimum: 0,\n        maximum: 100,\n        interval: 20,\n        rowIndex: secondaryAxis.rowIndex,\n        opposedPosition: true,\n        labelFormat: '{value}%'\n      });\n      this.paretoAxes.push(newAxis);\n    }\n  };\n  /**\n   * Render Pareto series.\n   *\n   * @returns {void}\n   * @private\n   */\n  ParetoSeries.prototype.render = function (series) {\n    series.chart.columnSeriesModule.render(series);\n  };\n  /**\n   * Perform cumulative calculation on the provided JSON data based on the series type.\n   *\n   * @param {Object} json - The JSON data to perform cumulative calculation on.\n   * @param {Series} series - The series for which cumulative calculation is performed.\n   * @returns {Object[]} - An array containing the result of the cumulative calculation.\n   * @private\n   */\n  ParetoSeries.prototype.performCumulativeCalculation = function (json, series) {\n    var data = json;\n    var sum = 0;\n    var count = 0;\n    var length = data.length;\n    for (var i = 0; i < length; i++) {\n      sum += data[i][series.yName];\n    }\n    for (var i = 0; i < length; i++) {\n      count = count + data[i][series.yName];\n      data[i][series.yName] = Number((count / sum * 100).toFixed(2));\n    }\n    return data;\n  };\n  /**\n   * Animates the series.\n   *\n   * @param  {Series} series - Defines the series to animate.\n   * @returns {void}\n   * @private\n   */\n  ParetoSeries.prototype.doAnimation = function (series) {\n    this.animate(series);\n  };\n  /**\n   * Get module name.\n   *\n   * @returns {string} - Returns the module name.\n   */\n  ParetoSeries.prototype.getModuleName = function () {\n    return 'ParetoSeries';\n    /**\n     * return the module name.\n     */\n  };\n  /**\n   * To destroy the pareto series.\n   *\n   * @returns {void}\n   * @private\n   */\n  ParetoSeries.prototype.destroy = function () {\n    /**\n     * Destroy method performed here.\n     */\n  };\n  return ParetoSeries;\n}(ColumnBase);\nexport { ParetoSeries };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","Series","ColumnBase","Axis","markerShapes","getSeriesColor","ParetoSeries","_super","_this","apply","arguments","paretoAxes","initSeries","targetSeries","chart","series","properties","colors","palettes","length","theme","count","name","yAxisName","category","index","type","interior","fill","paretoOptions","width","dashArray","marker","visible","shape","markerIndex","visibleSeries","push","initAxis","paretoSeries","isExist","some","currentAxis","secondaryAxis","axes","filter","axis","primaryYAxis","newAxis","majorGridLines","majorTickLines","lineStyle","minimum","maximum","interval","rowIndex","opposedPosition","labelFormat","render","columnSeriesModule","performCumulativeCalculation","json","data","sum","i","yName","Number","toFixed","doAnimation","animate","getModuleName","destroy"],"sources":["C:/Users/mkfun/Desktop/ct assignment/admin/node_modules/@syncfusion/ej2-charts/src/chart/series/pareto-series.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { Series } from '../series/chart-series';\nimport { ColumnBase } from './column-base';\nimport { Axis } from '../axis/axis';\nimport { markerShapes } from './marker';\nimport { getSeriesColor } from '../../common/model/theme';\n/**\n * The `ParetoSeries` module is used to render the pareto series.\n */\nvar ParetoSeries = /** @class */ (function (_super) {\n    __extends(ParetoSeries, _super);\n    function ParetoSeries() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.paretoAxes = [];\n        return _this;\n    }\n    /**\n     * Defines the Line initialization.\n     *\n     * @private\n     */\n    ParetoSeries.prototype.initSeries = function (targetSeries, chart) {\n        var series = new Series(chart, 'series', targetSeries.properties, true);\n        var colors = chart.palettes.length ? chart.palettes : getSeriesColor(chart.theme);\n        var count = colors.length;\n        series.name = 'Pareto';\n        series.yAxisName = targetSeries.yAxisName + '_CumulativeAxis';\n        series.category = 'Pareto';\n        targetSeries.category = 'Pareto';\n        series.index = targetSeries.index + chart.series.length;\n        series.type = 'Line';\n        series.interior = series.fill = series.paretoOptions.fill ? series.paretoOptions.fill : colors[series.index % count];\n        series.width = series.paretoOptions.width;\n        series.dashArray = series.paretoOptions.dashArray;\n        series.marker = series.paretoOptions.marker;\n        if (series.marker && series.marker.visible) {\n            series.marker.shape = series.marker.shape ? series.marker.shape : markerShapes[chart.markerIndex % 10];\n            chart.markerIndex++;\n        }\n        chart.visibleSeries.push(series);\n        this.initAxis(targetSeries, series, chart);\n    };\n    /**\n     * Defines the Axis initialization for Line.\n     *\n     * @private\n     */\n    ParetoSeries.prototype.initAxis = function (paretoSeries, targetSeries, chart) {\n        var isExist = this.paretoAxes.some(function (currentAxis) {\n            return currentAxis.name === targetSeries.yAxisName;\n        });\n        if (!isExist) {\n            var secondaryAxis = (paretoSeries.yAxisName && chart.axes.length ? chart.axes.filter(function (axis) {\n                return axis.name === paretoSeries.yAxisName;\n            })[0] : chart.primaryYAxis);\n            var newAxis = new Axis(chart, 'axes', {\n                name: targetSeries.yAxisName,\n                majorGridLines: {\n                    width: 0\n                },\n                majorTickLines: secondaryAxis.majorTickLines,\n                lineStyle: secondaryAxis.lineStyle,\n                minimum: 0,\n                maximum: 100,\n                interval: 20,\n                rowIndex: secondaryAxis.rowIndex,\n                opposedPosition: true,\n                labelFormat: '{value}%'\n            });\n            this.paretoAxes.push(newAxis);\n        }\n    };\n    /**\n     * Render Pareto series.\n     *\n     * @returns {void}\n     * @private\n     */\n    ParetoSeries.prototype.render = function (series) {\n        series.chart.columnSeriesModule.render(series);\n    };\n    /**\n     * Perform cumulative calculation on the provided JSON data based on the series type.\n     *\n     * @param {Object} json - The JSON data to perform cumulative calculation on.\n     * @param {Series} series - The series for which cumulative calculation is performed.\n     * @returns {Object[]} - An array containing the result of the cumulative calculation.\n     * @private\n     */\n    ParetoSeries.prototype.performCumulativeCalculation = function (json, series) {\n        var data = json;\n        var sum = 0;\n        var count = 0;\n        var length = data.length;\n        for (var i = 0; i < length; i++) {\n            sum += data[i][series.yName];\n        }\n        for (var i = 0; i < length; i++) {\n            count = count + data[i][series.yName];\n            data[i][series.yName] = Number(((count / sum) * 100).toFixed(2));\n        }\n        return data;\n    };\n    /**\n     * Animates the series.\n     *\n     * @param  {Series} series - Defines the series to animate.\n     * @returns {void}\n     * @private\n     */\n    ParetoSeries.prototype.doAnimation = function (series) {\n        this.animate(series);\n    };\n    /**\n     * Get module name.\n     *\n     * @returns {string} - Returns the module name.\n     */\n    ParetoSeries.prototype.getModuleName = function () {\n        return 'ParetoSeries';\n        /**\n         * return the module name.\n         */\n    };\n    /**\n     * To destroy the pareto series.\n     *\n     * @returns {void}\n     * @private\n     */\n    ParetoSeries.prototype.destroy = function () {\n        /**\n         * Destroy method performed here.\n         */\n    };\n    return ParetoSeries;\n}(ColumnBase));\nexport { ParetoSeries };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}