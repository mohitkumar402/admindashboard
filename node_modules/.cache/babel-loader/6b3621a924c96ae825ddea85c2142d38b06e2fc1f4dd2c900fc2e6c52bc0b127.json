{"ast":null,"code":"import { print as printWindow, createElement } from '@syncfusion/ej2-base';\nimport { getElement } from '../utils/helper';\nimport { beforePrint } from '../model/constants';\nvar PrintUtils = /** @class */function () {\n  /**\n   * Constructor for chart and accumulation annotation\n   *\n   * @param control\n   */\n  function PrintUtils(control) {\n    this.control = control;\n  }\n  /**\n   * To print the accumulation and chart elements.\n   *\n   * @param elements\n   */\n  PrintUtils.prototype.print = function (elements) {\n    this.printWindow = window.open('', 'print', 'height=' + window.outerHeight + ',width=' + window.outerWidth + ',tabbar=no');\n    this.printWindow.moveTo(0, 0);\n    this.printWindow.resizeTo(screen.availWidth, screen.availHeight);\n    var argsData = {\n      cancel: false,\n      htmlContent: this.getHTMLContent(elements),\n      name: beforePrint\n    };\n    this.control.trigger(beforePrint, argsData);\n    if (!argsData.cancel) {\n      printWindow(argsData.htmlContent, this.printWindow);\n    }\n  };\n  /**\n   * To get the html string of the chart and accumulation\n   *\n   * @param elements\n   * @private\n   */\n  PrintUtils.prototype.getHTMLContent = function (elements) {\n    var div = createElement('div');\n    if (elements) {\n      if (elements instanceof Array) {\n        for (var j = 0; j < elements.length; j++) {\n          var value = elements[j];\n          div.appendChild(getElement(value).cloneNode(true));\n        }\n      } else if (elements instanceof Element) {\n        div.appendChild(elements.cloneNode(true));\n      } else {\n        div.appendChild(getElement(elements).cloneNode(true));\n      }\n    } else {\n      div.appendChild(this.control.element.cloneNode(true));\n    }\n    for (var index = 0; index < div.children.length; index++) {\n      var backgroundColor = this.control.theme.indexOf('Dark') > -1 || this.control.theme.indexOf('HighContrast') > -1 ? 'rgba(0, 0, 0, 1)' : 'rgba(255, 255, 255, 1)';\n      var svg = div.children[index];\n      for (var childIndex = 0; childIndex < svg.children.length; childIndex++) {\n        var actualBackgroundColor = void 0;\n        var isSVG = false;\n        if (svg.id.indexOf('_stockChart_svg') > -1) {\n          actualBackgroundColor = svg.children[0].getAttribute('fill');\n          isSVG = true;\n        } else if (svg.children[childIndex].id.indexOf('_svg') > -1) {\n          actualBackgroundColor = svg.children[childIndex].children[0].getAttribute('fill');\n          isSVG = true;\n        }\n        if (isSVG) {\n          actualBackgroundColor = actualBackgroundColor === 'transparent' ? backgroundColor : actualBackgroundColor;\n          svg.children[childIndex].children[0].setAttribute('fill', actualBackgroundColor);\n        }\n      }\n      div[index] = svg;\n    }\n    return div;\n  };\n  return PrintUtils;\n}();\nexport { PrintUtils };","map":{"version":3,"names":["print","printWindow","createElement","getElement","beforePrint","PrintUtils","control","prototype","elements","window","open","outerHeight","outerWidth","moveTo","resizeTo","screen","availWidth","availHeight","argsData","cancel","htmlContent","getHTMLContent","name","trigger","div","Array","j","length","value","appendChild","cloneNode","Element","element","index","children","backgroundColor","theme","indexOf","svg","childIndex","actualBackgroundColor","isSVG","id","getAttribute","setAttribute"],"sources":["C:/Users/mkfun/Desktop/ct assignment/admin/node_modules/@syncfusion/ej2-charts/src/common/utils/print.js"],"sourcesContent":["import { print as printWindow, createElement } from '@syncfusion/ej2-base';\nimport { getElement } from '../utils/helper';\nimport { beforePrint } from '../model/constants';\nvar PrintUtils = /** @class */ (function () {\n    /**\n     * Constructor for chart and accumulation annotation\n     *\n     * @param control\n     */\n    function PrintUtils(control) {\n        this.control = control;\n    }\n    /**\n     * To print the accumulation and chart elements.\n     *\n     * @param elements\n     */\n    PrintUtils.prototype.print = function (elements) {\n        this.printWindow = window.open('', 'print', 'height=' + window.outerHeight + ',width=' + window.outerWidth + ',tabbar=no');\n        this.printWindow.moveTo(0, 0);\n        this.printWindow.resizeTo(screen.availWidth, screen.availHeight);\n        var argsData = {\n            cancel: false, htmlContent: this.getHTMLContent(elements), name: beforePrint\n        };\n        this.control.trigger(beforePrint, argsData);\n        if (!argsData.cancel) {\n            printWindow(argsData.htmlContent, this.printWindow);\n        }\n    };\n    /**\n     * To get the html string of the chart and accumulation\n     *\n     * @param elements\n     * @private\n     */\n    PrintUtils.prototype.getHTMLContent = function (elements) {\n        var div = createElement('div');\n        if (elements) {\n            if (elements instanceof Array) {\n                for (var j = 0; j < elements.length; j++) {\n                    var value = elements[j];\n                    div.appendChild(getElement(value).cloneNode(true));\n                }\n            }\n            else if (elements instanceof Element) {\n                div.appendChild(elements.cloneNode(true));\n            }\n            else {\n                div.appendChild(getElement(elements).cloneNode(true));\n            }\n        }\n        else {\n            div.appendChild(this.control.element.cloneNode(true));\n        }\n        for (var index = 0; index < div.children.length; index++) {\n            var backgroundColor = (this.control.theme.indexOf('Dark') > -1 || this.control.theme.indexOf('HighContrast') > -1) ? 'rgba(0, 0, 0, 1)' : 'rgba(255, 255, 255, 1)';\n            var svg = div.children[index];\n            for (var childIndex = 0; childIndex < svg.children.length; childIndex++) {\n                var actualBackgroundColor = void 0;\n                var isSVG = false;\n                if (svg.id.indexOf('_stockChart_svg') > -1) {\n                    actualBackgroundColor = svg.children[0].getAttribute('fill');\n                    isSVG = true;\n                }\n                else if (svg.children[childIndex].id.indexOf('_svg') > -1) {\n                    actualBackgroundColor = svg.children[childIndex].children[0].getAttribute('fill');\n                    isSVG = true;\n                }\n                if (isSVG) {\n                    actualBackgroundColor = actualBackgroundColor === 'transparent' ? backgroundColor : actualBackgroundColor;\n                    svg.children[childIndex].children[0].setAttribute('fill', actualBackgroundColor);\n                }\n            }\n            div[index] = svg;\n        }\n        return div;\n    };\n    return PrintUtils;\n}());\nexport { PrintUtils };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}