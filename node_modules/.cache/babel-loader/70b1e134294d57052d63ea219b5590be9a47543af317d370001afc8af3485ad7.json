{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * Selection src file\n */\nimport { Animation, Browser } from '@syncfusion/ej2-base';\nimport { remove } from '@syncfusion/ej2-base';\nimport { extend, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { ChartLocation, RectOption, CircleOption, withInBounds, getDraggedRectLocation, removeElement, getElement } from '../../common/utils/helper';\nimport { Rect, PathOption } from '@syncfusion/ej2-svg-base';\nimport { Index } from '../../common/model/base';\nimport { dragComplete, selectionComplete } from '../../common/model/constants';\nimport { BaseSelection } from '../../common/user-interaction/selection';\n/**\n * The `Selection` module handles the selection of chart elements.\n *\n * @private\n */\nvar Selection = /** @class */function (_super) {\n  __extends(Selection, _super);\n  /**\n   * Constructor for selection module.\n   *\n   * @private\n   */\n  function Selection(chart) {\n    var _this = _super.call(this, chart) || this;\n    _this.isdrawRect = true;\n    _this.multiDataIndexes = [];\n    _this.pathIndex = 0;\n    _this.seriesIndex = 0;\n    _this.count = -1;\n    _this.dragRectArray = [];\n    _this.filterArray = [];\n    _this.totalSelectedPoints = [];\n    _this.chart = chart;\n    _this.renderer = chart.renderer;\n    var mode = chart.selectionMode;\n    _this.isMultiDrag = chart.isMultiSelect && mode.indexOf('Drag') > -1;\n    _this.addEventListener();\n    return _this;\n  }\n  /**\n   * Adds event listeners for the chart.\n   *\n   * @returns {void}\n   */\n  Selection.prototype.addEventListener = function () {\n    if (this.chart.isDestroyed || this.chart.stockChart && this.chart.stockChart.onPanning) {\n      return;\n    }\n    var cancelEvent = Browser.isPointer ? 'pointerleave' : 'mouseleave';\n    this.chart.on(Browser.touchMoveEvent, this.mouseMove, this);\n    this.chart.on(cancelEvent, this.mouseLeave, this);\n    this.chart.on('click', this.mouseClick, this);\n    this.chart.on(Browser.touchStartEvent, this.mousedown, this);\n    this.chart.on(Browser.touchEndEvent, this.mouseLeave, this);\n  };\n  /**\n   * Handles the mousedown event.\n   *\n   * @private\n   * @param {Event} e - The event object.\n   * @returns {void}\n   */\n  Selection.prototype.mousedown = function (e) {\n    var chart = this.chart;\n    if (chart.isPointMouseDown || chart.selectionMode === 'None' || chart.isChartDrag) {\n      return;\n    }\n    if (chart.isDoubleTap || !chart.isTouch || this.rectPoints) {\n      this.dragStart(chart, chart.chartAxisLayoutPanel.seriesClipRect, chart.mouseDownX, chart.mouseDownY, e);\n    }\n  };\n  /**\n   * UnBinding events for selection module.\n   *\n   * @returns {void}\n   */\n  Selection.prototype.removeEventListener = function () {\n    if (this.chart.isDestroyed) {\n      return;\n    }\n    this.chart.off(Browser.touchMoveEvent, this.mouseMove);\n    this.chart.off('pointerleave' || 'mouseleave', this.mouseLeave);\n    this.chart.off('click', this.mouseClick);\n    this.chart.off(Browser.touchStartEvent, this.mousedown);\n    this.chart.off(Browser.touchEndEvent, this.mouseLeave);\n  };\n  /**\n   * Initializes private variables for the chart.\n   *\n   * @private\n   * @param {Chart} chart - The chart instance.\n   * @returns {void}\n   */\n  Selection.prototype.initPrivateVariables = function (chart) {\n    this.styleId = chart.element.id + '_ej2_chart_selection';\n    this.unselected = chart.element.id + '_ej2_deselected';\n    this.closeIconId = chart.element.id + '_ej2_drag_close';\n    this.draggedRectGroup = chart.element.id + '_ej2_drag_group';\n    this.multiRectGroup = chart.element.id + '_ej2_drag_multi_group';\n    this.draggedRect = chart.element.id + '_ej2_drag_rect';\n    this.lassoPath = chart.element.id + '_ej2_drag_path';\n    this.selectedDataIndexes = [];\n    this.rectPoints = null;\n    this.isSeriesMode = chart.selectionMode === 'Series';\n  };\n  /**\n   * Method to select the point and series.\n   *\n   * @param {Chart} chart - The chart instance.\n   * @returns {void}\n   */\n  Selection.prototype.invokeSelection = function (chart) {\n    this.initPrivateVariables(chart);\n    this.series = extend({}, chart.visibleSeries, null, true);\n    this.seriesStyles();\n    this.currentMode = chart.selectionMode;\n    if (!(chart.selectionMode.indexOf('Drag') > -1)) {\n      this.selectDataIndex(chart, this.concatIndexes(chart.selectedDataIndexes, this.selectedDataIndexes));\n    }\n  };\n  Selection.prototype.generateStyle = function (series) {\n    if (series) {\n      if (this.styleId.indexOf('selection') > 1 && this.chart.selectionMode !== 'None') {\n        this.unselected = series.unSelectedStyle || this.unselected;\n      }\n      if (this.styleId.indexOf('highlight') > 0 && (this.chart.highlightMode !== 'None' || this.chart.legendSettings.enableHighlight)) {\n        this.unselected = series.nonHighlightStyle || this.unselected;\n      }\n      return series.selectionStyle || this.styleId + '_series_' + series.index;\n    }\n    return 'undefined';\n  };\n  /**\n   * Selects data points in the chart based on the provided indexes.\n   *\n   * @param {Chart} chart - The chart instance.\n   * @param {Index[]} indexes - An array of Index objects specifying the series and point indexes to be selected.\n   * @returns {void}\n   */\n  Selection.prototype.selectDataIndex = function (chart, indexes) {\n    for (var _i = 0, indexes_1 = indexes; _i < indexes_1.length; _i++) {\n      var index = indexes_1[_i];\n      this.performSelection(index, chart, this.getElementByIndex(chart, index, '', this.series[index.series].marker.visible)[0]);\n    }\n  };\n  /**\n   * Retrieves the DOM elements corresponding to the specified data point index.\n   *\n   * @param {Chart} chart - The chart instance.\n   * @param {Index} index - The index object specifying the series and point indexes.\n   * @param {string} [suffix=''] - Optional suffix to be appended to the element IDs.\n   * @param {boolean} [marker] - Optional parameter to specify whether to retrieve marker elements. Default is false.\n   * @param {boolean} [dataLabel] - Optional parameter to specify whether to retrieve datalabel elements. Default is false.\n   * @returns {Element[]} - An array of DOM elements corresponding to the specified data point index.\n   */\n  Selection.prototype.getElementByIndex = function (chart, index, suffix, marker, dataLabel) {\n    if (suffix === void 0) {\n      suffix = '';\n    }\n    var elementId = chart.element.id + '_Series_' + index.series + '_Point' + '_' + index.point;\n    var series = chart.series[index.series];\n    elementId = series.type !== 'Scatter' && series.type !== 'Bubble' && marker ? elementId + '_Symbol' + suffix : elementId;\n    if (!marker && dataLabel) {\n      return [getElement(elementId + '_Text_0' + suffix), getElement(elementId + '_TextShape_0' + suffix)];\n    }\n    return [getElement(elementId), (series.type === 'RangeArea' || series.type === 'SplineRangeArea' || series.type === 'RangeStepArea') && series.marker.visible ? getElement(elementId + '1') : null];\n  };\n  /**\n   * Retrieves the DOM elements corresponding to the cluster of data points at the specified index.\n   *\n   * @param {Chart} chart - The chart instance.\n   * @param {Index} index - The index object specifying the series and point indexes.\n   * @returns {Element[]} - An array of DOM elements corresponding to the cluster of data points at the specified index.\n   */\n  Selection.prototype.getClusterElements = function (chart, index) {\n    var clusters = [];\n    var seriesStyle;\n    var selectedElements;\n    for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n      var series = _a[_i];\n      if (series.visible) {\n        index = new Index(series.index, index.point);\n        if (series.isRectSeries) {\n          clusters.push(this.getElementByIndex(chart, index)[0]);\n        }\n        clusters.push(this.getElementByIndex(chart, index, '', series.marker.visible)[0]);\n        var dataLabelTextElement = document.getElementById(chart.element.id + '_Series_' + series.index + '_Point_' + index.point + '_Text_0');\n        var dataLabelShapeElement = document.getElementById(chart.element.id + '_Series_' + series.index + '_Point_' + index.point + '_TextShape_0');\n        if (dataLabelTextElement) {\n          clusters.push(dataLabelTextElement);\n        }\n        if (dataLabelShapeElement) {\n          clusters.push(dataLabelShapeElement);\n        }\n        seriesStyle = this.generateStyle(chart.visibleSeries[index.series]);\n        selectedElements = document.querySelectorAll('.' + seriesStyle);\n        this.findTrackballElements(selectedElements, seriesStyle);\n        var clusterIndex = series.marker.visible && series.isRectSeries ? 2 : 1;\n        clusterIndex += dataLabelTextElement && dataLabelShapeElement ? 2 : dataLabelTextElement || dataLabelShapeElement ? 1 : 0;\n        if (!chart.isMultiSelect && selectedElements.length > 0 && selectedElements[0].id !== (clusters[clusters.length - clusterIndex] ? clusters[clusters.length - clusterIndex].id : '')) {\n          this.removeSelection(chart, index.series, selectedElements, seriesStyle, true);\n        }\n      }\n    }\n    return clusters;\n  };\n  /**\n   * Finds the elements within the selected elements that match the specified class name.\n   *\n   * @param {Element[] | NodeListOf<HTMLElement>} selectedElements - The elements to search within.\n   * @param {string} className - The class name to search for.\n   * @returns {void}\n   */\n  Selection.prototype.findTrackballElements = function (selectedElements, className) {\n    var trackballElements;\n    var elements;\n    for (var i = 0; i < selectedElements.length; i++) {\n      if (!isNullOrUndefined(selectedElements[i])) {\n        trackballElements = !isNullOrUndefined(selectedElements[i].parentNode) ? [].slice.call(selectedElements[0].parentNode.querySelectorAll('.' + className)) : [];\n        if (trackballElements.length > 0) {\n          elements = [];\n          for (var i_1 = 0; i_1 < trackballElements.length; i_1++) {\n            if (trackballElements[i_1].id.indexOf('Trackball') > -1) {\n              elements.push(trackballElements[i_1]);\n            }\n          }\n          this.removeStyles(elements);\n        }\n      }\n    }\n  };\n  /**\n   * Finds the elements in the chart corresponding to the specified series and data point index.\n   *\n   * @param {Chart} chart - The chart instance.\n   * @param {SeriesModel} series - The series for which to find the elements.\n   * @param {Index} index - The index of the data point.\n   * @param {string} [suffix=''] - A suffix to append to the element IDs.\n   * @param {boolean} [marker] - Specifies whether to include marker elements.\n   * @param {boolean} [dataLabel] - Specifies whether to include datalabel elements.\n   * @returns {Element[]} - An array of elements corresponding to the specified series and data point index.\n   */\n  Selection.prototype.findElements = function (chart, series, index, suffix, marker, dataLabel) {\n    if (suffix === void 0) {\n      suffix = '';\n    }\n    if (this.isSeriesMode) {\n      return this.getSeriesElements(series);\n    } else if (this.currentMode === 'Cluster') {\n      return this.getClusterElements(chart, index);\n    } else {\n      return this.getElementByIndex(chart, index, suffix, marker, dataLabel);\n    }\n  };\n  /**\n   * Checks if the target element is already selected for the specified event type.\n   *\n   * @param {Element} targetElem - The target element to check.\n   * @param {string} eventType - The type of event (e.g., 'mouse move', 'touch move').\n   * @returns {boolean} - A boolean value indicating whether the target element is already selected for the specified event type.\n   */\n  Selection.prototype.isAlreadySelected = function (targetElem, eventType) {\n    if (eventType === 'click') {\n      this.currentMode = this.chart.selectionMode;\n      this.styleId = this.chart.element.id + (this.chart.selectionModule && this.chart.selectionMode !== 'None' ? '_ej2_chart_selection' : '_ej2_chart_highlight');\n    } else if (eventType === 'mousemove' || eventType === 'pointermove') {\n      this.currentMode = this.chart.highlightMode;\n      this.highlightDataIndexes = [];\n      this.styleId = this.chart.element.id + '_ej2_chart_highlight';\n    }\n    if (this.chart.highlightMode !== 'None' && this.chart.selectionMode === 'None') {\n      if (eventType === 'click') {\n        return false;\n      }\n    }\n    if ((this.chart.highlightMode !== 'None' || this.chart.legendSettings.enableHighlight) && this.previousSelectedEle && this.previousSelectedEle[0]) {\n      var parentNodeId = targetElem.parentNode ? targetElem.parentNode.id : '';\n      var isElement = void 0;\n      if (targetElem.parentNode) {\n        isElement = parentNodeId.indexOf('SeriesGroup') > 0 || parentNodeId.indexOf('SymbolGroup') > 0 ? true : false;\n      }\n      for (var i = 0; i < this.previousSelectedEle.length; i++) {\n        if (this.previousSelectedEle[i] && this.previousSelectedEle[i].hasAttribute('class')) {\n          if (this.previousSelectedEle[i].getAttribute('class').indexOf('highlight') > -1 && (isElement || eventType === 'click')) {\n            this.previousSelectedEle[i].removeAttribute('class');\n            if (this.previousSelectedEle[i].id.indexOf('Group') > 0) {\n              for (var j = 0; j < this.previousSelectedEle[i].children.length; j++) {\n                if (this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor) && this.chart.highlightPattern === 'None') {\n                  this.previousSelectedEle[i].children[j].setAttribute('fill', this.previousSelectedEle[i].children[j].id.indexOf('Text') > -1 || this.previousSelectedEle[i].children[j].id.indexOf('TextShape') > -1 ? this.previousSelectedEle[i].children[j].getAttribute('fill') : this.control.visibleSeries[this.indexFinder(this.previousSelectedEle[i].id).series].interior);\n                }\n                this.previousSelectedEle[i].children[j].removeAttribute('style');\n              }\n            } else {\n              if (this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor) && this.chart.highlightPattern === 'None') {\n                this.previousSelectedEle[i].setAttribute('fill', this.previousSelectedEle[i].id.indexOf('Text') > -1 || this.previousSelectedEle[i].id.indexOf('TextShape') > -1 ? this.previousSelectedEle[i].getAttribute('fill') : this.control.visibleSeries[this.indexFinder(this.previousSelectedEle[i].id).series].interior);\n              }\n              this.previousSelectedEle[i].removeAttribute('style');\n            }\n            this.addOrRemoveIndex(this.highlightDataIndexes, this.indexFinder(this.previousSelectedEle[i].id));\n          } else if (!isElement && this.previousSelectedEle[i].getAttribute('class').indexOf('highlight') > -1) {\n            this.performSelection(this.indexFinder(this.previousSelectedEle[i].id), this.chart, this.previousSelectedEle[i]);\n          }\n        }\n      }\n    }\n    return true;\n  };\n  Selection.prototype.mouseClick = function (event) {\n    this.calculateSelectedElements(event.target, event.type, true);\n    if (this.chart.highlightModule && this.chart.highlightModule.highlightDataIndexes && this.chart.highlightModule.highlightDataIndexes.length > 0 && event.target.id.indexOf('_chart_legend_') === -1 && event.target.id.indexOf('_Series_') === -1 && this.chart.isTouch && Browser.isDevice) {\n      this.removeLegendHighlightStyles();\n    }\n  };\n  /**\n   * Calculates the selected elements based on the target element and event type.\n   *\n   * @param {HTMLElement} targetElement - The target element for which to calculate selected elements.\n   * @param {string} eventType - The type of event (e.g., 'mouse move', 'touch move').\n   * @param {boolean} pointClick - Selection of series points.\n   * @returns {void}\n   */\n  Selection.prototype.calculateSelectedElements = function (targetElement, eventType, pointClick) {\n    if (isNullOrUndefined(targetElement)) {\n      return;\n    }\n    if (this.chart.selectionMode === 'None' && this.chart.highlightMode === 'None' || targetElement.id && targetElement.id.indexOf(this.chart.element.id + '_') === -1) {\n      return;\n    }\n    if (eventType === 'mousemove' || eventType === 'pointermove') {\n      if (targetElement.hasAttribute('class') && (targetElement.getAttribute('class').indexOf('highlight') > -1 || targetElement.getAttribute('class').indexOf('selection') > -1)) {\n        return;\n      }\n      if (!isNullOrUndefined(targetElement.parentNode) && targetElement.parentNode.hasAttribute('class') && (targetElement.parentNode.getAttribute('class').indexOf('highlight') > 0 || targetElement.parentNode.getAttribute('class').indexOf('selection') > 0)) {\n        return;\n      }\n    }\n    this.isAlreadySelected(targetElement, eventType);\n    if (targetElement.id && targetElement.id.indexOf('_Series_') > -1 && targetElement.id.indexOf('_Text_') === -1) {\n      var element = void 0;\n      if (targetElement.id.indexOf('_Trackball_1') > -1) {\n        element = getElement(targetElement.id.split('_Trackball_')[0] + '_Symbol');\n        element = isNullOrUndefined(element) ? getElement(targetElement.id.split('_Trackball_')[0]) : element;\n      } else if (targetElement.id.indexOf('_Trackball_0') > -1) {\n        return null;\n      }\n      this.performSelection(this.indexFinder(targetElement.id), this.chart, element || targetElement, pointClick);\n    }\n  };\n  /**\n   * Performs selection based on the provided index and chart.\n   *\n   * @param {Index} index - The index for which to perform the selection.\n   * @param {Chart} chart - The chart instance.\n   * @param {Element} [element] - Optional. The element associated with the selection.\n   * @param {boolean} pointClick - Selection of series points.\n   * @returns {void}\n   */\n  Selection.prototype.performSelection = function (index, chart, element, pointClick) {\n    this.isSeriesMode = this.currentMode === 'Series';\n    if (chart.visibleSeries[index.series].type === 'BoxAndWhisker' && element && element.id === chart.element.id + '_Series_' + index.series + '_Point_' + index.point + '_BoxPath') {\n      element = element.parentNode;\n    }\n    if (chart.visibleSeries[index.series].type === 'Area' && (this.currentMode === 'Point' || this.currentMode === 'Cluster') && element && element.id === this.chart.element.id + '_Series_' + index.series) {\n      var className = this.generateStyle(chart.series[index.series]);\n      var selectionEle = document.querySelectorAll('.' + className);\n      this.findTrackballElements(selectionEle, className);\n      this.blurEffect(chart.element.id, chart.visibleSeries, false, index.point);\n    }\n    switch (this.currentMode) {\n      case 'Series':\n        this.selection(chart, index, this.getSeriesElements(chart.series[index.series]));\n        this.selectionComplete(chart, index, this.currentMode);\n        this.blurEffect(chart.element.id, chart.visibleSeries, false, index.point);\n        break;\n      case 'Point':\n        if (!isNaN(index.point) && element || !pointClick && isNaN(index.point)) {\n          var pointElements = [];\n          pointElements.push(element);\n          var series = this.chart.visibleSeries[index.series];\n          var baseId = chart.element.id + \"_Series_\" + index.series + \"_Point_\" + index.point;\n          var textElement = document.getElementById(baseId + \"_Text_0\");\n          if (series.marker.dataLabel.visible && textElement !== null) {\n            pointElements.push(textElement);\n            pointElements.push(document.getElementById(baseId + \"_TextShape_0\"));\n          }\n          if (pointElements[0] !== null && chart.series[index.series].marker.visible && (chart.series[index.series].type.indexOf('Column') !== -1 || chart.series[index.series].type.indexOf('Bar') !== -1)) {\n            if (!(element.id.indexOf('_Symbol') !== -1) && getElement(element.id + '_Symbol')) {\n              pointElements.push(getElement(element.id + '_Symbol'));\n            } else if (element.id.indexOf('_Symbol') !== -1 && getElement(element.id.replace('_Symbol', ''))) {\n              pointElements.push(getElement(element.id.replace('_Symbol', '')));\n            }\n          }\n          this.selection(chart, index, !pointClick && isNaN(index.point) ? this.getSeriesElements(chart.series[index.series]) : pointElements);\n          this.selectionComplete(chart, index, this.currentMode);\n          this.blurEffect(chart.element.id, chart.visibleSeries, false, index.point);\n        }\n        break;\n      case 'Cluster':\n        if (!isNaN(index.point) || !pointClick && isNaN(index.point)) {\n          if (!pointClick && isNaN(index.point)) {\n            this.selection(chart, index, this.getSeriesElements(chart.series[index.series]));\n          } else {\n            this.clusterSelection(chart, index);\n          }\n          this.selectionComplete(chart, index, this.currentMode);\n          this.blurEffect(chart.element.id, chart.visibleSeries, false, index.point);\n        }\n        break;\n    }\n  };\n  /**\n   * Completes the selection process based on the provided index and selection mode.\n   *\n   * @param {Chart} chart - The chart instance.\n   * @param {Index} index - The index for which the selection is completed.\n   * @param {SelectionMode | HighlightMode} selectionMode - The selection mode.\n   * @returns {void}\n   */\n  Selection.prototype.selectionComplete = function (chart, index, selectionMode) {\n    var points;\n    var pointIndex;\n    var seriesIndex;\n    var selectedPointValues = [];\n    var yValue;\n    var selectedPointX;\n    if (selectionMode === 'Cluster') {\n      for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n        var series = _a[_i];\n        if (series.visible) {\n          for (var i = 0; i < this.selectedDataIndexes.length; i++) {\n            pointIndex = chart.isMultiSelect ? this.selectedDataIndexes[i].point : index.point;\n            seriesIndex = series.index;\n            points = series.points;\n            if (!isNaN(pointIndex) && pointIndex < points.length) {\n              yValue = series.type !== 'RangeArea' || series.type.indexOf('SplineRangeArea') > -1 || series.type.indexOf('RangeStepArea') > -1 ? points[pointIndex].yValue : points[pointIndex].regions[0].y;\n              selectedPointX = points[pointIndex].xValue;\n              if (chart.primaryXAxis.valueType === 'Category') {\n                selectedPointX = points[pointIndex].x.toLocaleString();\n              } else if (chart.primaryXAxis.valueType === 'DateTime') {\n                selectedPointX = new Date(points[pointIndex].xValue);\n              }\n              if (series.category !== 'Indicator') {\n                selectedPointValues.push({\n                  x: selectedPointX,\n                  y: yValue,\n                  seriesIndex: seriesIndex,\n                  pointIndex: pointIndex\n                });\n              }\n              if (series.type === 'RangeArea' || series.type === 'SplineRangeArea' || series.type === 'RangeStepArea') {\n                selectedPointValues.push({\n                  x: selectedPointX,\n                  y: points[pointIndex].regions[0].y,\n                  seriesIndex: seriesIndex,\n                  pointIndex: pointIndex\n                });\n              }\n            }\n          }\n        }\n      }\n    } else if (selectionMode === 'Series') {\n      if (chart.isMultiSelect) {\n        for (var i = 0; i < this.selectedDataIndexes.length; i++) {\n          seriesIndex = this.selectedDataIndexes[i].series;\n          if (this.selectedDataIndexes.length > 0) {\n            selectedPointValues.push({\n              seriesIndex: seriesIndex\n            });\n          }\n        }\n      } else {\n        seriesIndex = this.selectedDataIndexes.length > 0 ? this.selectedDataIndexes[0].series : this.highlightDataIndexes && this.highlightDataIndexes.length > 0 ? this.highlightDataIndexes[0].series : 0;\n        if (this.selectedDataIndexes.length > 0 || this.highlightDataIndexes && this.highlightDataIndexes.length > 0) {\n          selectedPointValues.push({\n            seriesIndex: seriesIndex\n          });\n        }\n      }\n    } else if (selectionMode === 'Point') {\n      var selectedData = [];\n      if (this.styleId.indexOf('highlight') > -1) {\n        selectedData = this.highlightDataIndexes;\n      } else {\n        selectedData = this.selectedDataIndexes;\n      }\n      for (var i = 0; i < selectedData.length; i++) {\n        pointIndex = selectedData[i].point;\n        seriesIndex = selectedData[i].series;\n        var series = chart.series[seriesIndex];\n        points = series.points;\n        if (!isNaN(pointIndex)) {\n          selectedPointX = points[pointIndex].xValue;\n          yValue = series.type !== 'RangeArea' || series.type.indexOf('SplineRangeArea') > -1 || series.type.indexOf('RangeStepArea') > -1 ? points[pointIndex].yValue : points[pointIndex].regions[0].y;\n          if (chart.primaryXAxis.valueType === 'Category') {\n            selectedPointX = points[pointIndex].x.toLocaleString();\n          } else if (chart.primaryXAxis.valueType === 'DateTime') {\n            selectedPointX = new Date(points[pointIndex].xValue);\n          }\n          selectedPointValues.push({\n            x: selectedPointX,\n            y: yValue,\n            seriesIndex: seriesIndex,\n            pointIndex: pointIndex\n          });\n        }\n      }\n    }\n    var args = {\n      name: selectionComplete,\n      selectedDataValues: selectedPointValues,\n      cancel: false,\n      chart: chart\n    };\n    chart.trigger(selectionComplete, args);\n  };\n  /**\n   * Handles the selection logic for the chart.\n   *\n   * @param {Chart} chart - The chart instance.\n   * @param {Index} index - The index of the selected data point.\n   * @param {Element[]} selectedElements - The elements representing the selected data point.\n   * @returns {void}\n   */\n  Selection.prototype.selection = function (chart, index, selectedElements) {\n    if (!(this.currentMode === 'Lasso')) {\n      if (!chart.isMultiSelect && this.currentMode.indexOf('Drag') === -1 && this.styleId.indexOf('highlight') === -1 && chart.selectionMode !== 'None') {\n        this.removeMultiSelectElements(chart, this.selectedDataIndexes, index, chart.series);\n      }\n    }\n    var indexValue = this.rangeColorMappingEnabled() ? 0 : index.series;\n    if (!isNullOrUndefined(selectedElements[0])) {\n      if (chart.visibleSeries[indexValue].isRectSeries) {\n        if (selectedElements[0].id) {\n          if (document.getElementById(selectedElements[0].id + '_Symbol')) {\n            selectedElements.push(getElement(selectedElements[0].id + '_Symbol'));\n          } else if (selectedElements[0].id.indexOf('SeriesGroup') !== -1) {\n            if (document.getElementById(selectedElements[0].id.replace('SeriesGroup', 'SymbolGroup'))) {\n              selectedElements.push(getElement(selectedElements[0].id.replace('SeriesGroup', 'SymbolGroup')));\n            }\n          }\n        }\n      }\n      var isAdd = void 0;\n      var className = selectedElements[0] && (selectedElements[0].getAttribute('class') || '');\n      className = className.replace('e-chart-focused', '').trim();\n      var pClassName = selectedElements[0].parentNode && (selectedElements[0].parentNode.getAttribute('class') || '');\n      if (className !== '' && this.currentMode !== 'Cluster') {\n        this.findTrackballElements(selectedElements, className);\n      }\n      if (selectedElements[0] && className.indexOf(this.getSelectionClass(selectedElements[0].id)) > -1) {\n        this.removeStyles(selectedElements);\n      } else if (selectedElements[0].parentNode && pClassName.indexOf(this.getSelectionClass(selectedElements[0].id)) > -1) {\n        this.removeStyles([selectedElements[0].parentNode]);\n      } else {\n        this.previousSelectedEle = chart.highlightMode !== 'None' || chart.legendSettings.enableHighlight ? selectedElements : [];\n        this.applyStyles(selectedElements);\n        isAdd = true;\n      }\n      if (this.styleId.indexOf('highlight') > 0 && (chart.highlightMode !== 'None' || chart.legendSettings.enableHighlight)) {\n        this.addOrRemoveIndex(this.highlightDataIndexes, index, isAdd);\n      } else {\n        this.addOrRemoveIndex(this.selectedDataIndexes, index, isAdd);\n      }\n    }\n  };\n  /**\n   * Handles the selection logic for clustered data points in the chart.\n   *\n   * @param {Chart} chart - The chart instance.\n   * @param {Index} index - The index of the selected clustered data point.\n   * @returns {void}\n   */\n  Selection.prototype.clusterSelection = function (chart, index) {\n    this.selection(chart, index, this.getClusterElements(chart, new Index(index.series, index.point)));\n  };\n  /**\n   * Removes the multi-selected elements from the chart.\n   *\n   * @param {Chart} chart - The chart instance.\n   * @param {Index[]} index - The indices of the multi-selected elements to be removed.\n   * @param {Index} currentIndex - The index of the current selected element.\n   * @param {SeriesModel[]} seriesCollection - The collection of series in the chart.\n   * @returns {void}\n   */\n  Selection.prototype.removeMultiSelectElements = function (chart, index, currentIndex, seriesCollection) {\n    var series;\n    for (var i = 0; i < index.length; i++) {\n      series = seriesCollection[index[i].series];\n      if (this.isSeriesMode && !this.toEquals(index[i], currentIndex, this.isSeriesMode) || this.currentMode === 'Cluster' && !this.toEquals(index[i], currentIndex, false) || !this.isSeriesMode && this.toEquals(index[i], currentIndex, true) && !this.toEquals(index[i], currentIndex, false)) {\n        this.removeStyles(this.findElements(chart, series, index[i], '', false));\n        if (series.marker.visible) {\n          this.removeStyles(this.findElements(chart, series, index[i], '', true));\n        }\n        if (series.marker.dataLabel.visible) {\n          this.removeStyles(this.findElements(chart, series, index[i], '', false, true));\n        }\n        index.splice(i, 1);\n        i--;\n      }\n    }\n  };\n  /**\n   * Applies a blur effect to a specific chart or legend.\n   *\n   * @param {string} chartId - The ID of the chart or legend.\n   * @param {Series[]} visibleSeries - The collection of visible series in the chart.\n   * @param {boolean} isLegend - Indicates whether the blur effect should be applied to a legend. Defaults to false.\n   * @param {number} index - The index of the series or legend item to which the blur effect should be applied. Defaults to 0.\n   * @returns {void}\n   */\n  Selection.prototype.blurEffect = function (chartId, visibleSeries, isLegend, index) {\n    if (isLegend === void 0) {\n      isLegend = false;\n    }\n    if (index === void 0) {\n      index = 0;\n    }\n    var visibility = this.checkVisibility(this.highlightDataIndexes, this.chart) || this.checkVisibility(this.selectedDataIndexes, this.chart); // legend click scenario\n    for (var _i = 0, visibleSeries_1 = visibleSeries; _i < visibleSeries_1.length; _i++) {\n      var series = visibleSeries_1[_i];\n      var legendIndex = void 0;\n      var legendStrokeColor = void 0;\n      if (this.rangeColorMappingEnabled()) {\n        if (isLegend === false) {\n          legendIndex = Object.keys(series.rangeColorPoints).indexOf(series.points[index].interior);\n          legendStrokeColor = series.points[index].interior;\n        } else {\n          legendIndex = index;\n          legendStrokeColor = document.getElementById(chartId + '_chart_legend_shape_' + index).getAttribute('fill');\n        }\n      } else {\n        legendIndex = series.index;\n        legendStrokeColor = this.chart.visibleSeries[series.index].interior;\n      }\n      if (series.visible) {\n        this.checkSelectionElements(getElement(chartId + 'SeriesGroup' + series.index), this.generateStyle(series), visibility, isLegend, legendIndex, legendStrokeColor);\n        if (series.marker.dataLabel.visible && !isNullOrUndefined(series.shapeElement)) {\n          this.checkSelectionElements(series.shapeElement, this.generateStyle(series), visibility, isLegend, legendIndex, legendStrokeColor);\n          this.checkSelectionElements(series.textElement, this.generateStyle(series), visibility, isLegend, legendIndex, legendStrokeColor);\n        }\n        if (!isNullOrUndefined(getElement(chartId + 'SymbolGroup' + series.index))) {\n          this.checkSelectionElements(getElement(chartId + 'SymbolGroup' + series.index), this.generateStyle(series), visibility, isLegend, legendIndex, legendStrokeColor);\n        }\n      }\n    }\n  };\n  /**\n   * Checks and updates the selection state of elements based on the provided criteria.\n   *\n   * @param {Element} element - The element to check for selection.\n   * @param {string} className - The class name used for selecting elements.\n   * @param {boolean} visibility - The visibility state of the element.\n   * @param {boolean} isLegend - Indicates whether the element is a legend. Defaults to true.\n   * @param {number} series - The index of the series associated with the element. Defaults to 0.\n   * @param {string} legendStrokeColor - The stroke color of the legend. Defaults to '#D3D3D3'.\n   * @returns {void}\n   */\n  Selection.prototype.checkSelectionElements = function (element, className, visibility, isLegend, series, legendStrokeColor) {\n    if (isLegend === void 0) {\n      isLegend = true;\n    }\n    if (series === void 0) {\n      series = 0;\n    }\n    if (legendStrokeColor === void 0) {\n      legendStrokeColor = '#D3D3D3';\n    }\n    var children = this.isSeriesMode ? element.childNodes || [element] : element.childNodes || element;\n    if (this.chart.selectionMode !== 'None' && (this.chart.highlightMode !== 'None' || this.chart.legendSettings.enableHighlight)) {\n      children = element.childNodes || element;\n    }\n    if (this.chart.selectionMode === 'Cluster' && element.tagName.toLowerCase() === 'text' && element.id.indexOf('_Text_') >= 0) {\n      children = [element];\n    }\n    var elementClassName;\n    var parentClassName;\n    var legendShape;\n    var selectElement = element;\n    var isDataLabelTextElement = this.chart.visibleSeries[this.rangeColorMappingEnabled() ? 0 : series].marker.dataLabel.visible && (element.id.indexOf('Text') > -1 || element.id.indexOf('TextShape') > -1) && element.tagName !== 'g';\n    for (var i = 0; i < children.length && !isDataLabelTextElement; i++) {\n      elementClassName = children[i].getAttribute('class') || '';\n      parentClassName = children[i].parentNode.getAttribute('class') || '';\n      if (this.chart.selectionMode !== 'None' && (this.chart.highlightMode !== 'None' || this.chart.legendSettings.enableHighlight)) {\n        className = elementClassName.indexOf('selection') > 0 || elementClassName.indexOf('highlight') > 0 ? elementClassName : className;\n        className = parentClassName.indexOf('selection') > 0 || parentClassName.indexOf('highlight') > 0 ? parentClassName : className;\n      }\n      if (elementClassName.indexOf(className) === -1 && parentClassName.indexOf(className) === -1 && visibility) {\n        this.addSvgClass(children[i], this.unselected);\n      } else {\n        selectElement = children[i];\n        this.removeSvgClass(children[i], this.unselected);\n        this.removeSvgClass(children[i].parentNode, this.unselected);\n        if (children[i].id !== '' && elementClassName.indexOf(this.unselected) !== -1 && parentClassName.indexOf(className) === -1) {\n          this.highlightAnimation(children[i], this.chart.series.length === 1 ? 0 : this.indexFinder(children[i].id).series, 700, 0.3);\n        }\n      }\n      if (children[i].id.indexOf('Trackball') > 0 && selectElement.classList[0] === className) {\n        this.removeSvgClass(children[i], this.unselected);\n        this.removeSvgClass(children[i].parentNode, this.unselected);\n        this.addSvgClass(children[i], className);\n      }\n    }\n    if (element.id.indexOf('Symbol') > -1) {\n      if (element.querySelectorAll('.' + className)[0] && element.querySelectorAll('.' + className)[0].getAttribute('class') === className) {\n        var symbolEle = getElement(this.control.element.id + '_Series_' + element.id[element.id.length - 1]);\n        var seriesClassName = symbolEle && symbolEle.hasAttribute('class') ? symbolEle.getAttribute('class') : '';\n        if (seriesClassName.indexOf(this.unselected) > -1) {\n          this.removeSvgClass(symbolEle, this.unselected);\n        }\n      }\n    }\n    if (this.control.legendModule && this.control.legendSettings.visible && this.control.legendSettings.visible && !(isLegend && this.rangeColorMappingEnabled && (element === this.control.visibleSeries[0].textElement || element === this.control.visibleSeries[0].shapeElement))) {\n      legendShape = getElement(this.control.element.id + '_chart_legend_shape_' + series);\n      if (legendShape) {\n        if (legendShape.hasAttribute('class')) {\n          this.removeSvgClass(legendShape, legendShape.getAttribute('class'));\n          if (!isNullOrUndefined(this.chart.highlightColor && this.chart.highlightColor !== '') && !this.chart.legendSettings.enableHighlight) {\n            legendShape.setAttribute('stroke', legendStrokeColor);\n            if (this.chart.highlightPattern === 'None') {\n              legendShape.setAttribute('fill', legendStrokeColor);\n            }\n          }\n        }\n        elementClassName = selectElement.getAttribute('class') || '';\n        parentClassName = selectElement.parentNode.getAttribute('class') || '';\n        if (elementClassName.indexOf(className) === -1 && parentClassName.indexOf(className) === -1 && visibility) {\n          this.addSvgClass(legendShape, this.chart.highlightMode === 'None' && this.chart.legendSettings.enableHighlight && (!this.chart.selectionModule || this.chart.selectionModule.selectedDataIndexes.length === 0) ? className : this.unselected);\n          this.removeSvgClass(legendShape, className);\n          if (this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor)) {\n            legendShape.setAttribute('stroke', this.control.visibleSeries[series].interior);\n            if (this.chart.highlightPattern === 'None') {\n              legendShape.setAttribute('fill', this.control.visibleSeries[series].interior);\n            }\n          }\n        } else {\n          this.removeSvgClass(legendShape, this.unselected);\n          if (!isNullOrUndefined(this.chart.highlightColor) && this.chart.highlightColor !== '') {\n            legendShape.setAttribute('stroke', this.control.visibleSeries[series].interior);\n            if (this.chart.highlightPattern === 'None') {\n              legendShape.setAttribute('fill', this.control.visibleSeries[series].interior);\n            }\n          }\n          if (elementClassName === '' && parentClassName === '' || elementClassName.trim() === 'EJ2-Trackball') {\n            this.removeSvgClass(legendShape, className);\n          } else {\n            this.addSvgClass(legendShape, className);\n            if (className.indexOf('highlight') > 0 && this.chart.highlightColor !== '' && this.chart.highlightColor !== 'transparent' && !isNullOrUndefined(this.chart.highlightColor)) {\n              legendShape.setAttribute('stroke', this.chart.highlightColor);\n              if (this.styleId.indexOf('highlight') > 0 && this.chart.highlightPattern === 'None') {\n                legendShape.setAttribute('fill', this.chart.highlightColor);\n              }\n            }\n          }\n        }\n        var legendItemsId = void 0;\n        if (this.rangeColorMappingEnabled()) {\n          for (var i = 0; i < this.chart.rangeColorSettings.length; i++) {\n            legendItemsId = document.getElementById(this.chart.element.id + '_chart_legend_shape_' + i);\n            if (legendShape !== legendItemsId) {\n              this.addSvgClass(legendItemsId, this.unselected);\n              this.removeSvgClass(legendItemsId, className);\n            } else if (isLegend === true) {\n              this.addSvgClass(legendItemsId, className);\n            }\n            if (elementClassName.indexOf(className) === -1 && isLegend === false) {\n              this.removeSvgClass(legendItemsId, this.unselected);\n            }\n          }\n        }\n        if (isLegend && parentClassName.indexOf(className) > -1) {\n          this.addSvgClass(legendShape, className);\n        }\n      }\n    }\n  };\n  /**\n   * Applies styles to the specified elements.\n   *\n   * @param {Element[]} elements - The elements to which styles will be applied.\n   * @returns {void}\n   */\n  Selection.prototype.applyStyles = function (elements) {\n    for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n      var element = elements_1[_i];\n      if (element) {\n        this.removeSvgClass(element.parentNode, this.unselected);\n        this.removeSvgClass(element, this.unselected);\n        if (this.chart.series[0].pointColorMapping === 'fill' || this.rangeColorMappingEnabled()) {\n          var className = this.getSelectionClass(element.id);\n          var index = className.indexOf('highlight') > -1 ? parseInt(className.split(this.chart.element.id + '_ej2_chart_highlight_series_')[1], 10) : parseInt(className.split(this.chart.element.id + '_ej2_chart_selection_series_')[1], 10);\n          var patternName = this.styleId.indexOf('highlight') > 0 ? this.chart.highlightPattern : this.chart.selectionPattern;\n          var pattern = void 0;\n          if (className.indexOf('highlight') > -1 || className.indexOf('selection') > -1) {\n            pattern = document.getElementById(this.chart.element.id + '_' + patternName + '_' + 'Selection' + '_' + index);\n          }\n          if (element.id.indexOf('legend') === -1 && element.id.indexOf('Text') === -1 && element.id.indexOf('TextShape') === -1 && element.id.indexOf('Group') === -1 && pattern != null) {\n            for (var i = 1; i < pattern.children.length; i++) {\n              pattern.children[i].setAttribute('fill', element.getAttribute('fill'));\n              pattern.children[i].setAttribute('stroke', element.getAttribute('fill'));\n            }\n          }\n        }\n        this.addSvgClass(element, this.getSelectionClass(element.id));\n        if (element.id.indexOf('Group') > 0) {\n          var seriesIndex = this.indexFinder(element.id);\n          for (var i = 0; i < element.children.length; i++) {\n            if (element.children[i].nodeName !== 'defs') {\n              this.stopElementAnimation(element.children[i], seriesIndex.series);\n            }\n          }\n        }\n        if (this.styleId.indexOf('highlight') > 0 && this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor) && this.chart.highlightPattern === 'None' && this.chart.highlightColor !== 'transparent') {\n          if (element.id.indexOf('Group') > 0) {\n            for (var i = 0; i < element.children.length; i++) {\n              element.children[i].setAttribute('fill', element.id.indexOf('Text') > -1 || element.id.indexOf('TextShape') > -1 ? element.children[i].getAttribute('fill') : this.chart.highlightColor);\n            }\n          } else {\n            element.setAttribute('fill', element.id.indexOf('Text') > -1 || element.id.indexOf('TextShape') > -1 ? element.getAttribute('fill') : this.chart.highlightColor);\n          }\n        }\n      }\n    }\n  };\n  /**\n   * Gets the CSS class for selection based on the provided identifier.\n   *\n   * @param {string} id - The identifier used to determine the selection class.\n   * @returns {string} - The CSS class for selection.\n   */\n  Selection.prototype.getSelectionClass = function (id) {\n    return this.generateStyle(this.control.visibleSeries[this.indexFinder(id).series]);\n  };\n  /**\n   * Removes styles from the provided elements.\n   *\n   * @param {Element[]} elements - The elements from which styles will be removed.\n   * @returns {void}\n   */\n  Selection.prototype.removeStyles = function (elements) {\n    for (var _i = 0, elements_2 = elements; _i < elements_2.length; _i++) {\n      var element = elements_2[_i];\n      if (element) {\n        this.removeSvgClass(element, this.getSelectionClass(element.id));\n        if (this.chart.highlightPattern === 'None' && this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor) && this.chart.highlightColor !== 'transparent') {\n          if (element.id.indexOf('Group') > 0) {\n            for (var i = 0; i < element.children.length; i++) {\n              element.children[i].setAttribute('fill', element.id.indexOf('Text') > -1 || element.id.indexOf('TextShape') > -1 ? element.children[i].getAttribute('fill') : this.control.visibleSeries[this.indexFinder(element.id).series].interior);\n            }\n          } else {\n            element.setAttribute('fill', element.id.indexOf('Text') > -1 || element.id.indexOf('TextShape') > -1 ? element.getAttribute('fill') : this.control.visibleSeries[this.indexFinder(element.id).series].interior);\n          }\n        }\n      }\n    }\n  };\n  /**\n   * Adds or removes an index from the provided array of indexes.\n   *\n   * @param {Index[]} indexes - The array of indexes.\n   * @param {Index} index - The index to add or remove.\n   * @param {boolean} [isAdd] - Optional parameter to specify whether to add or remove the index. Defaults to true (add).\n   * @returns {void}\n   */\n  Selection.prototype.addOrRemoveIndex = function (indexes, index, isAdd) {\n    for (var i = 0; i < indexes.length; i++) {\n      if (this.toEquals(indexes[i], index, this.isSeriesMode)) {\n        indexes.splice(i, 1);\n        i--;\n      }\n    }\n    if (isAdd) {\n      indexes.push(index);\n    }\n  };\n  /**\n   * Checks if two Index objects are equal.\n   *\n   * @param {Index} first - The first Index object.\n   * @param {Index} second - The second Index object.\n   * @param {boolean} checkSeriesOnly - Specifies whether to check series properties only.\n   * @returns {boolean} - True if the two Index objects are equal, otherwise false.\n   */\n  Selection.prototype.toEquals = function (first, second, checkSeriesOnly) {\n    return (first.series === second.series || this.currentMode === 'Cluster' && !checkSeriesOnly) && (checkSeriesOnly || first.point === second.point);\n  };\n  /**\n   * Redraws the selection or highlight on the chart.\n   *\n   * @param {Chart} chart - The chart instance.\n   * @param {SelectionMode | HighlightMode} oldMode - The previous selection or highlight mode.\n   * @param {boolean} chartRedraw - Specifies whether to redraw the entire chart.\n   * @returns {void}\n   */\n  Selection.prototype.redrawSelection = function (chart, oldMode, chartRedraw) {\n    this.isSeriesMode = oldMode === 'Series';\n    if (!isNullOrUndefined(oldMode)) {\n      if (oldMode.indexOf('Drag') !== -1 || oldMode === 'Lasso' || chartRedraw) {\n        chart.isRedrawSelection = false;\n      } else {\n        chart.isRedrawSelection = true;\n      }\n    }\n    var selectedDataIndexes = extend([], this.selectedDataIndexes, null, true);\n    var highlightDataIndexes = extend([], this.highlightDataIndexes, null, true);\n    if (this.styleId.indexOf('highlight') > 0 && highlightDataIndexes.length > 0) {\n      this.removeSelectedElements(chart, this.highlightDataIndexes, chart.series);\n      selectedDataIndexes = highlightDataIndexes;\n    } else {\n      this.removeSelectedElements(chart, this.selectedDataIndexes, chart.series);\n    }\n    this.blurEffect(chart.element.id, chart.visibleSeries, false);\n    this.selectDataIndex(chart, selectedDataIndexes);\n  };\n  /**\n   * Handles selection on legend item click.\n   *\n   * @param {Chart} chart - The chart instance.\n   * @param {number} series - The index of the series.\n   * @param {Element} targetElement - The target element clicked.\n   * @param {string} eventType - The type of event triggered.\n   * @returns {void}\n   */\n  Selection.prototype.legendSelection = function (chart, series, targetElement, eventType) {\n    if (eventType === 'mousemove') {\n      if (targetElement.id.indexOf('text') > 1) {\n        targetElement = getElement(targetElement.id.replace('text', 'shape'));\n      }\n      if (targetElement.id.indexOf('marker') > 1) {\n        targetElement = getElement(targetElement.id.replace('_marker', ''));\n      }\n      if (targetElement.id.indexOf('g') > 1) {\n        targetElement = getElement(targetElement.id.replace('_g_', '_shape_'));\n      }\n      if (targetElement.hasAttribute('class') && (targetElement.getAttribute('class').indexOf('highlight') > -1 || targetElement.getAttribute('class').indexOf('selection') > -1)) {\n        return;\n      }\n      this.currentMode = this.chart.highlightMode;\n    }\n    var isPreSelected = this.isAlreadySelected(targetElement, eventType);\n    if (isPreSelected) {\n      var seriesStyle = this.generateStyle(chart.visibleSeries[series]);\n      var selectedElements = document.querySelectorAll('.' + seriesStyle);\n      this.isSeriesMode = this.currentMode === 'Series';\n      var isBlurEffectNeeded = true;\n      if (selectedElements.length > 0) {\n        this.removeSelection(chart, series, selectedElements, seriesStyle, isBlurEffectNeeded);\n      } else {\n        for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n          var element = _a[_i];\n          if (element.index !== series && !chart.isMultiSelect) {\n            seriesStyle = this.generateStyle(chart.visibleSeries[element.index]);\n            selectedElements = document.querySelectorAll('.' + seriesStyle);\n            this.removeSelection(chart, series, selectedElements, seriesStyle, isBlurEffectNeeded);\n          }\n        }\n        var seriesElements = [];\n        if (this.rangeColorMappingEnabled()) {\n          for (var i = 0, a = chart.visibleSeries[0].seriesElement.children; i < a.length; i++) {\n            var point = a[i];\n            if (targetElement.getAttribute('fill') === point.getAttribute('fill')) {\n              if (chart.visibleSeries[0].marker.dataLabel.visible) {\n                var pointIndex = this.indexFinder(point.id).point;\n                if (!isNaN(pointIndex) && pointIndex >= 0) {\n                  var dataLabel = document.getElementById(this.chart.element.id + \"_Series_0_Point_\" + pointIndex + \"_Text_0\");\n                  var dataLabelBorder = document.getElementById(this.chart.element.id + \"_Series_0_Point_\" + pointIndex + \"_TextShape_0\");\n                  if (dataLabel) {\n                    seriesElements.push(dataLabel);\n                  }\n                  if (dataLabelBorder) {\n                    seriesElements.push(dataLabelBorder);\n                  }\n                }\n              }\n              seriesElements.push(point);\n            }\n          }\n          for (var _b = 0, seriesElements_1 = seriesElements; _b < seriesElements_1.length; _b++) {\n            var element = seriesElements_1[_b];\n            if (isNullOrUndefined(element)) {\n              return;\n            }\n            this.checkSelectionElements(element, seriesStyle, false, true, series);\n          }\n        } else {\n          if (chart.visibleSeries[series].visible) {\n            seriesElements = this.getSeriesElements(chart.visibleSeries[series]);\n            for (var _c = 0, seriesElements_2 = seriesElements; _c < seriesElements_2.length; _c++) {\n              var seriesElement = seriesElements_2[_c];\n              if (isNullOrUndefined(seriesElement)) {\n                return;\n              }\n              this.checkSelectionElements(seriesElement, seriesStyle, false, true, series);\n            }\n          }\n        }\n        this.isSeriesMode = true;\n        this.selection(chart, new Index(series, NaN), seriesElements);\n        this.isSeriesMode = chart.selectionMode === 'Series';\n        this.blurEffect(chart.element.id, chart.visibleSeries, true, series);\n      }\n    }\n  };\n  /**\n   * Checks if range color mapping is enabled for the chart.\n   *\n   * @returns {boolean} - Returns true if range color mapping is enabled, otherwise false.\n   */\n  Selection.prototype.rangeColorMappingEnabled = function () {\n    if (this.chart.rangeColorSettings && this.chart.rangeColorSettings.length > 0 && this.chart.visibleSeries.length === 1 && this.chart.rangeColorSettings[0].colors.length > 0 && (this.chart.series[0].type === 'Column' || this.chart.series[0].type === 'Bar' || this.chart.series[0].type === 'Scatter' || this.chart.series[0].type === 'Bubble')) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  Selection.prototype.removeSelection = function (chart, series, selectedElements, seriesStyle, isBlurEffectNeeded) {\n    if (selectedElements.length > 0) {\n      var elements = [];\n      for (var i = 0; i < selectedElements.length; i++) {\n        elements.push(selectedElements[i]);\n      }\n      this.removeStyles(elements);\n      this.isSeriesMode = true;\n      this.addOrRemoveIndex(this.selectedDataIndexes, new Index(series, NaN));\n      for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n        var value = _a[_i];\n        seriesStyle = this.generateStyle(value);\n        if (document.querySelectorAll('.' + seriesStyle).length > 0) {\n          for (var _b = 0, elements_3 = elements; _b < elements_3.length; _b++) {\n            var element = elements_3[_b];\n            this.checkSelectionElements(element, seriesStyle, true, true, series);\n          }\n          isBlurEffectNeeded = false;\n          break;\n        }\n      }\n      if (isBlurEffectNeeded) {\n        this.isSeriesMode = chart.selectionMode === 'Series';\n        this.blurEffect(chart.element.id, chart.visibleSeries);\n      }\n    }\n  };\n  /**\n   * Retrieves the SVG elements associated with a particular series in the chart.\n   *\n   * @param {SeriesModel} series - The series for which to retrieve the SVG elements.\n   * @returns {Element[]} - An array of SVG elements representing the series.\n   */\n  Selection.prototype.getSeriesElements = function (series) {\n    var seriesElements = [series.seriesElement];\n    if (series.marker.visible && series.type !== 'Scatter' && series.type !== 'Bubble' && !series.isRectSeries) {\n      seriesElements.push(series.symbolElement);\n    } else if (series.marker.visible && series.isRectSeries) {\n      seriesElements.push(series.symbolElement);\n    }\n    if (series.marker.dataLabel.visible) {\n      seriesElements.push(series.textElement);\n      seriesElements.push(series.shapeElement);\n    }\n    return seriesElements;\n  };\n  /**\n   * Finds the index associated with a particular element ID.\n   *\n   * @param {string} id - The ID of the element to find the index for.\n   * @returns {Index} - The index associated with the element ID.\n   */\n  Selection.prototype.indexFinder = function (id) {\n    var ids = ['NaN', 'NaN'];\n    if (id.indexOf('SeriesGroup') > -1) {\n      ids = id.split('SeriesGroup');\n      ids[0] = ids[1];\n    } else if (id.indexOf('SymbolGroup') > -1) {\n      ids = id.split('SymbolGroup');\n      ids[0] = ids[1];\n    } else if (id.indexOf('_Point_') > -1) {\n      ids = id.split('_Series_')[1].split('_Point_');\n    } else if (id.indexOf('_border_') > -1) {\n      ids[0] = id.split('_border_')[1];\n    } else if (id.indexOf('_Series_') > -1) {\n      ids[0] = id.split('_Series_')[1];\n    } else if (id.indexOf('_chart_legend_shape_') > -1) {\n      ids = id.split('_chart_legend_shape_');\n      ids[0] = ids[1];\n    } else if (id.indexOf('TextGroup') > -1) {\n      ids = id.split('TextGroup');\n      ids[0] = ids[1];\n    } else if (id.indexOf('ShapeGroup') > -1) {\n      ids = id.split('ShapeGroup');\n      ids[0] = ids[1];\n    }\n    return new Index(parseInt(ids[0], 10), parseInt(ids[1], 10));\n  };\n  /**\n   * Calculates the elements selected by dragging a rectangle on the chart.\n   *\n   * @param {Chart} chart - The chart instance.\n   * @param {Rect} dragRect - The rectangle representing the selection area.\n   * @param {boolean} isClose - Flag indicating whether the selection should be close.\n   * @returns {void}\n   */\n  Selection.prototype.calculateDragSelectedElements = function (chart, dragRect, isClose) {\n    this.removeSelectedElements(chart, this.selectedDataIndexes, chart.series);\n    var isLasso = chart.selectionMode === 'Lasso';\n    var rect = new Rect(dragRect.x, dragRect.y, dragRect.width, dragRect.height);\n    var axisOffset = new ChartLocation(chart.chartAxisLayoutPanel.seriesClipRect.x, chart.chartAxisLayoutPanel.seriesClipRect.y);\n    this.removeOffset(rect, axisOffset);\n    var points;\n    var index;\n    var selectedPointValues = [];\n    var selectedSeriesValues = [];\n    this.isSeriesMode = false;\n    var isDragResize = chart.allowMultiSelection && (this.rectGrabbing || this.resizing);\n    this.rectPoints = this.dragRectArray[isDragResize ? this.targetIndex : this.count] = new Rect(dragRect.x, dragRect.y, dragRect.width, dragRect.height);\n    if (dragRect.width && dragRect.height && !isClose) {\n      var rt = new Rect(dragRect.x, dragRect.y, dragRect.width, dragRect.height);\n      this.removeOffset(rt, axisOffset);\n      this.filterArray[isDragResize ? this.targetIndex : this.count] = rt;\n    }\n    var _loop_1 = function (series) {\n      if (series.visible) {\n        points = series.points;\n        selectedPointValues = [];\n        var xAxisOffset_1;\n        var yAxisOffset_1;\n        if ((chart.isTransposed || series.type.indexOf('Bar') !== -1) && !(chart.isTransposed && series.type.indexOf('Bar') !== -1)) {\n          xAxisOffset_1 = series.xAxis.rect.y - axisOffset.y;\n          yAxisOffset_1 = series.yAxis.rect.x - axisOffset.x;\n        } else {\n          xAxisOffset_1 = series.xAxis.rect.x - axisOffset.x;\n          yAxisOffset_1 = series.yAxis.rect.y - axisOffset.y;\n        }\n        for (var j = 0; j < points.length; j++) {\n          var yValue = series.type !== 'RangeArea' || series.type.indexOf('SplineRangeArea') > -1 || series.type.indexOf('RangeStepArea') > -1 ? points[j].yValue : points[j].regions[0].y;\n          var isCurrentPoint = void 0;\n          var selectedPointX = points[j].xValue;\n          if (chart.primaryXAxis.valueType === 'Category') {\n            selectedPointX = points[j].x.toLocaleString();\n          } else if (chart.primaryXAxis.valueType === 'DateTime') {\n            selectedPointX = new Date(points[j].xValue);\n          }\n          if (series.type === 'BoxAndWhisker') {\n            isCurrentPoint = points[j].regions.some(function (region) {\n              return withInBounds(region.x + xAxisOffset_1, region.y + yAxisOffset_1, rect);\n            });\n          } else {\n            if (chart.selectionMode === 'Lasso') {\n              isCurrentPoint = points[j].isSelect;\n            } else {\n              isCurrentPoint = chart.allowMultiSelection ? this_1.isPointSelect(points[j], xAxisOffset_1, yAxisOffset_1, this_1.filterArray) : points[j].symbolLocations.some(function (location) {\n                return location && withInBounds(location.x + xAxisOffset_1, location.y + yAxisOffset_1, rect);\n              });\n            }\n          }\n          if (isCurrentPoint && series.category !== 'Indicator') {\n            index = new Index(series.index, points[j].index);\n            this_1.selection(chart, index, this_1.findElements(chart, series, index, '', !series.isRectSeries ? series.marker.visible : false));\n            selectedPointValues.push({\n              x: selectedPointX,\n              y: yValue\n            });\n          }\n          if (isCurrentPoint && (series.type === 'RangeArea' || series.type === 'SplineRangeArea' || series.type === 'RangeStepArea')) {\n            selectedPointValues.push({\n              x: selectedPointX,\n              y: points[j].regions[0].y\n            });\n          }\n        }\n        selectedSeriesValues.push(selectedPointValues);\n      }\n    };\n    var this_1 = this;\n    for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n      var series = _a[_i];\n      _loop_1(series);\n    }\n    this.blurEffect(chart.element.id, chart.visibleSeries);\n    var x = isLasso ? chart.mouseDownX : dragRect.x + dragRect.width;\n    var y = isLasso ? chart.mouseDownY : dragRect.y;\n    if (!isClose) {\n      this.createCloseButton(x, y);\n    }\n    var args = {\n      name: dragComplete,\n      selectedDataValues: selectedSeriesValues,\n      cancel: false\n    };\n    chart.trigger(dragComplete, args);\n  };\n  Selection.prototype.removeOffset = function (rect, clip) {\n    rect.x -= clip.x;\n    rect.y -= clip.y;\n  };\n  Selection.prototype.isPointSelect = function (points, xAxisOffset, yAxisOffset, rectCollection) {\n    var location = points.symbolLocations[0];\n    for (var _i = 0, rectCollection_1 = rectCollection; _i < rectCollection_1.length; _i++) {\n      var rect = rectCollection_1[_i];\n      if (rect && location && withInBounds(location.x + xAxisOffset, location.y + yAxisOffset, rect)) {\n        return true;\n      }\n    }\n    return false;\n  };\n  /**\n   * Draws the dragging rectangle on the chart.\n   *\n   * @param {Chart} chart - The chart instance.\n   * @param {Rect} dragRect - The rectangle representing the dragging area.\n   * @returns {void}\n   */\n  Selection.prototype.drawDraggingRect = function (chart, dragRect) {\n    var cartesianLayout = chart.chartAxisLayoutPanel.seriesClipRect;\n    var border = chart.chartArea.border.width;\n    var rectFill = chart.themeStyle.selectionRectFill;\n    var rectStroke = chart.themeStyle.selectionRectStroke;\n    var isLasso = chart.selectionMode === 'Lasso';\n    if (this.isdrawRect) {\n      cartesianLayout.x = cartesianLayout.x - border / 2;\n      cartesianLayout.y = cartesianLayout.y - border / 2;\n      cartesianLayout.width = cartesianLayout.width + border;\n      cartesianLayout.height = cartesianLayout.height + border;\n      this.isdrawRect = false;\n    }\n    switch (chart.selectionMode) {\n      case 'DragX':\n        dragRect.y = cartesianLayout.y;\n        dragRect.height = cartesianLayout.height;\n        break;\n      case 'DragY':\n        dragRect.x = cartesianLayout.x;\n        dragRect.width = cartesianLayout.width;\n        break;\n    }\n    if ((dragRect.width < 5 || dragRect.height < 5) && !isLasso) {\n      return null;\n    }\n    var isDragMode = chart.selectionMode.indexOf('Drag') > -1 || chart.selectionMode === 'Lasso';\n    if (chart.allowMultiSelection && isDragMode) {\n      var element = void 0;\n      var dragGroup = void 0;\n      var multiGroup = getElement(this.multiRectGroup);\n      if (!multiGroup) {\n        multiGroup = chart.svgRenderer.createGroup({\n          id: this.multiRectGroup\n        });\n        chart.svgObject.appendChild(multiGroup);\n      }\n      if (this.rectGrabbing || this.resizing) {\n        var rectElement = getElement(this.draggedRect + this.targetIndex);\n        if (rectElement.nextSibling) {\n          remove(rectElement.nextSibling);\n        }\n        this.setAttributes(rectElement, dragRect);\n      } else if (!getElement(this.draggedRectGroup + this.count)) {\n        dragGroup = chart.svgRenderer.createGroup({\n          id: this.draggedRectGroup + this.count\n        });\n        var svgElement = document.getElementById(chart.element.id + '_series_svg');\n        if (chart.enableCanvas) {\n          svgElement.appendChild(dragGroup);\n        } else {\n          multiGroup.appendChild(dragGroup);\n        }\n        // chart.enableCanvas ? svgElement.appendChild(dragGroup) : multiGroup.appendChild(dragGroup);\n      }\n      if (!(chart.selectionMode === 'Lasso')) {\n        element = chart.svgRenderer.drawRectangle(new RectOption(this.draggedRect + this.count, rectFill, {\n          color: rectStroke,\n          width: 1\n        }, 1, dragRect, 0, 0, '', chart.theme.indexOf('Fluent2') < 1 ? '3' : ''));\n        element.style.cursor = 'move';\n      } else {\n        element = chart.svgRenderer.drawPath(new PathOption(this.lassoPath + this.count, rectFill, 3, rectStroke, 1, '', this.path));\n      }\n      if (!dragGroup && !this.rectGrabbing && !this.resizing) {\n        getElement(this.draggedRectGroup + this.count).appendChild(element);\n      } else if (!this.rectGrabbing && !this.resizing) {\n        dragGroup.appendChild(element);\n      }\n    } else {\n      var element = isLasso ? getElement(this.lassoPath) : getElement(this.draggedRect);\n      if (this.closeIcon) {\n        removeElement(this.closeIconId);\n      }\n      if (element) {\n        if (isLasso) {\n          element.setAttribute('d', this.path);\n        } else {\n          this.setAttributes(element, dragRect);\n        }\n      } else {\n        var dragGroup = chart.svgRenderer.createGroup({\n          id: this.draggedRectGroup\n        });\n        var svgElement = document.getElementById(chart.element.id + '_series_svg');\n        if (chart.enableCanvas) {\n          svgElement.appendChild(dragGroup);\n        } else {\n          chart.svgObject.appendChild(dragGroup);\n        }\n        // chart.enableCanvas ? svgElement.appendChild(dragGroup) : chart.svgObject.appendChild(dragGroup);\n        if (!(chart.selectionMode === 'Lasso')) {\n          element = chart.svgRenderer.drawRectangle(new RectOption(this.draggedRect, rectFill, {\n            color: rectStroke,\n            width: 1\n          }, 1, dragRect, 0, 0, '', chart.theme.indexOf('Fluent2') < 1 ? '3' : ''));\n        } else {\n          element = chart.svgRenderer.drawPath(new PathOption(this.lassoPath, rectFill, 3, rectStroke, 1, '', this.path));\n        }\n        //element.setAttribute('style', 'cursor:move;');\n        dragGroup.appendChild(element);\n      }\n    }\n  };\n  /**\n   * Retrieves the index of a particular item based on its identifier.\n   *\n   * @param {string} id - The identifier of the item.\n   * @returns {number} - The index of the item, or -1 if not found.\n   */\n  Selection.prototype.getIndex = function (id) {\n    var i;\n    for (i = id.length - 1; i > 0; i--) {\n      var x = Number(id[i]);\n      if (!isNaN(x)) {\n        continue;\n      } else {\n        break;\n      }\n    }\n    var index = +id.substr(i + 1, id.length - 1);\n    return index;\n  };\n  Selection.prototype.createCloseButton = function (x, y) {\n    var isMultiDrag = this.chart.allowMultiSelection;\n    var circleStroke = this.chart.themeStyle.selectionCircleStroke;\n    var isDrag = this.rectGrabbing || this.resizing;\n    var closeIcon = this.chart.svgRenderer.createGroup({\n      id: this.closeIconId + (isMultiDrag ? isDrag ? this.targetIndex : this.count : ''),\n      style: 'cursor:pointer; visibility: visible;'\n    });\n    closeIcon.appendChild(this.chart.svgRenderer.drawCircle(new CircleOption(this.closeIconId + '_circle' + (isMultiDrag ? isDrag ? this.targetIndex : this.count : ''), '#FFFFFF', {\n      color: circleStroke,\n      width: 1\n    }, 1, x, y, 10)));\n    var direction = 'M ' + (x - 4) + ' ' + (y - 4) + ' L ' + (x + 4) + ' ' + (y + 4) + ' M ' + (x - 4) + ' ' + (y + 4) + ' L ' + (x + 4) + ' ' + (y - 4);\n    closeIcon.appendChild(this.chart.svgRenderer.drawPath({\n      id: this.closeIconId + '_cross' + (isMultiDrag ? isDrag ? this.targetIndex : this.count : ''),\n      d: direction,\n      stroke: circleStroke,\n      'stroke-width': 2,\n      fill: circleStroke\n    }));\n    this.closeIcon = closeIcon;\n    var pathElement = getElement(this.draggedRectGroup + (isMultiDrag ? isDrag ? this.targetIndex : this.count : ''));\n    if (pathElement) {\n      pathElement.appendChild(closeIcon);\n    }\n  };\n  /**\n   * Method to remove dragged element.\n   *\n   * @returns {void}\n   * @private\n   */\n  Selection.prototype.removeDraggedElements = function (chart, targetElement, eventType) {\n    if (targetElement.id && targetElement.id.indexOf(this.closeIconId) > -1 && eventType.indexOf('move') === -1) {\n      var isSelectedvalues = true;\n      if (chart.allowMultiSelection) {\n        var index = this.getIndex(targetElement.id);\n        var multiRectGroupElement = getElement(this.multiRectGroup);\n        remove(getElement(this.draggedRectGroup + index));\n        this.dragRectArray[index] = null;\n        this.filterArray[index] = null;\n        this.totalSelectedPoints[index] = null;\n        if (multiRectGroupElement && multiRectGroupElement.childElementCount === 0) {\n          removeElement(multiRectGroupElement);\n          this.dragRectArray = [];\n          this.filterArray = [];\n          this.totalSelectedPoints = [];\n        }\n        if (this.currentMode === 'Lasso') {\n          if (this.multiDataIndexes[index] != null) {\n            for (var i = 0; i < this.multiDataIndexes[index].length; i++) {\n              this.multiDataIndexes[index][i].isSelect = false;\n            }\n          }\n          this.multiDataIndexes[index] = null;\n          for (var j = 0; j < this.multiDataIndexes.length; j++) {\n            if (this.multiDataIndexes[j] != null) {\n              isSelectedvalues = false;\n              for (var k = 0; k < this.multiDataIndexes[j].length; k++) {\n                this.multiDataIndexes[j][k].isSelect = true;\n              }\n            }\n          }\n          this.calculateDragSelectedElements(chart, this.dragRect, true);\n        } else if (this.filterArray.length) {\n          for (var i = 0; i < this.filterArray.length; i++) {\n            if (this.filterArray[i]) {\n              isSelectedvalues = false;\n              this.calculateDragSelectedElements(chart, this.filterArray[i], true);\n            }\n          }\n        } else {\n          this.calculateDragSelectedElements(chart, new Rect(0, 0, 0, 0), true);\n        }\n      } else {\n        remove(getElement(this.draggedRectGroup));\n        this.removeSelectedElements(chart, this.selectedDataIndexes, chart.series);\n      }\n      this.blurEffect(chart.element.id, chart.visibleSeries);\n      this.changeCursorStyle(false, chart.svgObject, 'auto');\n      if (!chart.allowMultiSelection || isSelectedvalues) {\n        this.rectPoints = null;\n      }\n    }\n  };\n  /**\n   * Updates the selection rectangle during resizing.\n   *\n   * @param {Chart} chart - The chart instance.\n   * @param {ChartLocation} location - The location of the resizing action.\n   * @param {boolean} [tapped=false] - Indicates whether the resizing action was initiated by tapping.\n   * @param {Element} [target] - The target element of the resizing action.\n   * @returns {void}\n   */\n  Selection.prototype.resizingSelectionRect = function (chart, location, tapped, target) {\n    var rect;\n    if (chart.allowMultiSelection && target.id.indexOf('_ej2_drag_rect') > -1 || this.dragRectArray[this.targetIndex]) {\n      if (target.id.indexOf('_ej2_drag_rect') > -1) {\n        this.targetIndex = this.getIndex(target.id);\n      }\n      var r = this.dragRectArray[this.targetIndex];\n      rect = new Rect(r.x, r.y, r.width, r.height);\n    }\n    if (!chart.allowMultiSelection) {\n      rect = new Rect(this.rectPoints.x, this.rectPoints.y, this.rectPoints.width, this.rectPoints.height);\n    }\n    if (rect) {\n      var resize = this.findResizeMode(chart.svgObject, rect, location);\n      if (this.resizing) {\n        rect = getDraggedRectLocation(rect.x, rect.y, rect.x + rect.width, rect.y + rect.height, chart.chartAxisLayoutPanel.seriesClipRect);\n        this.drawDraggingRect(chart, rect);\n        this.dragRect = rect;\n      }\n      if (tapped) {\n        this.resizing = resize;\n      }\n    } else {\n      return;\n    }\n  };\n  Selection.prototype.findResizeMode = function (chartSvgObject, rect, location) {\n    var cursorStyle = 'se-resize';\n    var resize = false;\n    if (!this.resizing) {\n      var resizeEdges = [new Rect(rect.x, rect.y, rect.width - 5, 5), new Rect(rect.x, rect.y, 5, rect.height), new Rect(rect.x, rect.y + rect.height - 5, rect.width - 5, 5), new Rect(rect.x + rect.width - 5, rect.y + 5, 5, rect.height - 15), new Rect(rect.x + rect.width - 10, rect.y + rect.height - 10, 10, 10)]; //corner\n      for (var i = 0; i < resizeEdges.length; i++) {\n        if (withInBounds(location.x, location.y, resizeEdges[i])) {\n          cursorStyle = i === 4 ? cursorStyle : i % 2 === 0 ? 'ns-resize' : 'ew-resize';\n          resize = true;\n          this.resizeMode = i;\n          break;\n        }\n      }\n    } else {\n      var x = rect.x;\n      var y = rect.y;\n      var width = location.x - x;\n      var height = location.y - y;\n      switch (this.resizeMode) {\n        case 0:\n          height = Math.abs(rect.height + rect.y - location.y);\n          rect.y = Math.min(rect.height + rect.y, location.y);\n          rect.height = height;\n          break;\n        case 1:\n          width = Math.abs(rect.width + rect.x - location.x);\n          rect.x = Math.min(rect.width + rect.x, location.x);\n          rect.width = width;\n          break;\n        case 2:\n          rect.height = Math.abs(height);\n          rect.y = Math.min(location.y, y);\n          break;\n        case 3:\n          rect.width = Math.abs(width);\n          rect.x = Math.min(location.x, x);\n          break;\n        case 4:\n          rect.width = Math.abs(width);\n          rect.height = Math.abs(height);\n          rect.x = Math.min(location.x, x);\n          rect.y = Math.min(location.y, y);\n          break;\n      }\n    }\n    if (this.currentMode !== 'Lasso') {\n      this.changeCursorStyle(resize, getElement(this.chart.allowMultiSelection ? this.draggedRect + this.targetIndex : this.draggedRect), cursorStyle);\n    }\n    this.changeCursorStyle(resize, chartSvgObject, cursorStyle);\n    return resize;\n  };\n  Selection.prototype.changeCursorStyle = function (isResize, rectelement, cursorStyle) {\n    cursorStyle = isResize ? cursorStyle : this.control.svgObject === rectelement ? 'auto' : 'move';\n    if (rectelement) {\n      rectelement.style.cursor = cursorStyle;\n    }\n  };\n  Selection.prototype.removeSelectedElements = function (chart, index, seriesCollection) {\n    index = chart.isRedrawSelection ? index : index.splice(0, index.length); // No need to remove selected indexes while redrawing\n    var seriesElements;\n    for (var _i = 0, seriesCollection_1 = seriesCollection; _i < seriesCollection_1.length; _i++) {\n      var series = seriesCollection_1[_i];\n      if (series.visible) {\n        seriesElements = this.getSeriesElements(series);\n        this.removeStyles(seriesElements);\n        for (var _a = 0, seriesElements_3 = seriesElements; _a < seriesElements_3.length; _a++) {\n          var seriesElement = seriesElements_3[_a];\n          this.removeStyles(this.getChildren(seriesElement));\n        }\n      }\n    }\n  };\n  Selection.prototype.setAttributes = function (ele, object) {\n    var keys = Object.keys(object);\n    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n      var key = keys_1[_i];\n      ele.setAttribute(key, object[key]);\n    }\n  };\n  /**\n   * Updates the position of the dragged rectangle.\n   *\n   * @param {Chart} chart - The chart instance.\n   * @param {Rect} grabbedPoint - The rectangle representing the grabbed point.\n   * @param {boolean} [doDrawing=false] - Indicates whether to redraw the dragging rectangle.\n  //  * @param {Element} [target] - The target element related to the dragging action.\n   * @returns {void}\n   */\n  Selection.prototype.draggedRectMoved = function (chart, grabbedPoint, doDrawing) {\n    var rect;\n    if ((this.resizing || this.rectGrabbing) && chart.allowMultiSelection) {\n      var r = this.dragRectArray[this.targetIndex];\n      rect = new Rect(r.x, r.y, r.width, r.height);\n    } else {\n      rect = new Rect(this.rectPoints.x, this.rectPoints.y, this.rectPoints.width, this.rectPoints.height);\n    }\n    rect.x -= grabbedPoint.x - chart.mouseX;\n    rect.y -= grabbedPoint.y - chart.mouseY;\n    rect = getDraggedRectLocation(rect.x, rect.y, rect.x + rect.width, rect.height + rect.y, chart.chartAxisLayoutPanel.seriesClipRect);\n    if (doDrawing) {\n      this.drawDraggingRect(chart, rect);\n    } else {\n      this.calculateDragSelectedElements(chart, rect);\n    }\n  };\n  Selection.prototype.mouseLeave = function (event) {\n    this.completeSelection(event.target, event.type);\n  };\n  /**\n   * Completes the selection process.\n   *\n   * @param {HTMLElement} target - The target element where the selection is completed.\n   * @param {string} eventType - The type of event that triggered the selection completion.\n   * @returns {void}\n   */\n  Selection.prototype.completeSelection = function (target, eventType) {\n    var chart = this.chart;\n    if (chart.selectionMode === 'None') {\n      return;\n    }\n    this.currentMode = chart.selectionMode;\n    if ((this.dragging || this.resizing) && this.dragRect.width > 5 && this.dragRect.height > 5) {\n      this.calculateDragSelectedElements(chart, this.dragRect);\n    } else if (!chart.allowMultiSelection && this.rectGrabbing && this.rectPoints.width && this.rectPoints.height) {\n      this.draggedRectMoved(chart, this.dragRect);\n    } else if (this.rectGrabbing && this.dragRectArray[this.targetIndex].width && this.dragRectArray[this.targetIndex].height) {\n      this.draggedRectMoved(chart, this.dragRect);\n    }\n    if (chart.selectionMode === 'Lasso' && this.dragging && this.path) {\n      if (this.path.indexOf('L') !== -1) {\n        if (!chart.allowMultiSelection) {\n          getElement(this.lassoPath).setAttribute('d', this.path + 'Z');\n          this.pointChecking(getElement(this.lassoPath));\n        } else if (getElement(this.lassoPath + this.count)) {\n          getElement(this.lassoPath + this.count).setAttribute('d', this.path + 'Z');\n          this.pointChecking(getElement(this.lassoPath + this.count));\n        }\n        if (this.dragging || this.resizing) {\n          this.calculateDragSelectedElements(chart, this.dragRect);\n        }\n      }\n    }\n    this.dragging = false;\n    this.rectGrabbing = false;\n    this.resizing = false;\n    this.removeDraggedElements(chart, target, eventType);\n  };\n  Selection.prototype.getDragRect = function (chart, seriesClipRect) {\n    return getDraggedRectLocation(chart.mouseDownX, chart.mouseDownY, chart.mouseX, chart.mouseY, seriesClipRect);\n  };\n  /**\n   * Initiates the drag operation.\n   *\n   * @param {Chart} chart - The chart instance where the drag operation is initiated.\n   * @param {Rect} seriesClipRect - The clipping rectangle of the series.\n   * @param {number} mouseDownX - The X-coordinate where the mouse was pressed down.\n   * @param {number} mouseDownY - The Y-coordinate where the mouse was pressed down.\n   * @param {Event} event - The event object associated with the mouse down event.\n   * @returns {void}\n   */\n  Selection.prototype.dragStart = function (chart, seriesClipRect, mouseDownX, mouseDownY, event) {\n    var mode = chart.selectionMode;\n    this.currentMode = chart.selectionMode;\n    this.dragging = (mode.indexOf('Drag') > -1 || mode === 'Lasso') && (chart.isDoubleTap || !chart.isTouch) && chart.chartAreaType !== 'PolarRadar';\n    var target = event.target;\n    this.path = undefined;\n    if (this.dragging) {\n      this.count = getElement(this.multiRectGroup) ? this.count + 1 : 0;\n      this.dragRect = new Rect(chart.mouseDownX, chart.mouseDownY, 0, 0);\n      if (chart.mouseDownX < seriesClipRect.x || chart.mouseDownX > seriesClipRect.x + seriesClipRect.width || chart.mouseDownY < seriesClipRect.y || chart.mouseDownY > seriesClipRect.y + seriesClipRect.height) {\n        this.dragging = false;\n      }\n    }\n    if (mode === 'Lasso') {\n      for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n        var series = _a[_i];\n        if (series.visible) {\n          for (var _b = 0, _c = series.points; _b < _c.length; _b++) {\n            var point = _c[_b];\n            if (!chart.allowMultiSelection) {\n              point.isSelect = false;\n            }\n          }\n        }\n      }\n    }\n    if (!(mode === 'Lasso')) {\n      if (this.rectPoints && !chart.allowMultiSelection) {\n        this.dragRect = new Rect(chart.mouseDownX, chart.mouseDownY, 0, 0);\n        this.resizingSelectionRect(chart, new ChartLocation(mouseDownX, mouseDownY), true);\n        this.rectGrabbing = withInBounds(mouseDownX, mouseDownY, this.rectPoints);\n      }\n      if (chart.allowMultiSelection) {\n        var index = this.getIndex(target.id);\n        this.targetIndex = this.isDragRect(target.id) ? index : undefined;\n        if (this.dragRectArray.length && this.isDragRect(target.id)) {\n          this.resizingSelectionRect(chart, new ChartLocation(mouseDownX, mouseDownY), true, target);\n          this.rectGrabbing = withInBounds(mouseDownX, mouseDownY, this.dragRectArray[index]);\n        }\n      }\n    }\n  };\n  Selection.prototype.isDragRect = function (id) {\n    return id.indexOf('_ej2_drag_rect') > -1;\n  };\n  /**\n   * Handles the mouse move event.\n   *\n   * @param {PointerEvent | TouchEvent} event - The pointer event or touch event associated with the mouse move.\n   * @returns {void}\n   */\n  Selection.prototype.mouseMove = function (event) {\n    var chart = this.chart;\n    var target = event.target;\n    var eventType = event.type;\n    this.highlightChart(target, eventType);\n    if (chart.selectionMode === 'None') {\n      return;\n    }\n    if (eventType === 'touchmove' && (Browser.isIos || Browser.isIos7) && this.dragging && event.preventDefault) {\n      event.preventDefault();\n    }\n    this.selectionAndDrag(chart, target, eventType);\n  };\n  /**\n   * Highlights the specified chart element.\n   *\n   * @param {Element} target - The target element to highlight.\n   * @param {string} eventType - The type of event triggering the highlighting.\n   * @returns {void}\n   */\n  Selection.prototype.highlightChart = function (target, eventType) {\n    if (this.chart.highlightMode !== 'None' || this.chart.legendSettings.enableHighlight) {\n      if (!isNullOrUndefined(target)) {\n        if (target.id.indexOf('_legend_text') > 1) {\n          target = getElement(target.id.replace('text', 'shape'));\n        }\n        if (target.hasAttribute('class') && (target.getAttribute('class').indexOf('highlight') > -1 || target.getAttribute('class').indexOf('selection') > -1)) {\n          return;\n        }\n        this.calculateSelectedElements(target, eventType);\n        if (this.chart.highlightModule.highlightDataIndexes && this.chart.highlightModule.highlightDataIndexes.length > 0 && target.id.indexOf('_chart_legend_g_') === -1 && target.id.indexOf('chart_legend_shape') === -1 && target.id.indexOf('_Series_') === -1) {\n          this.removeLegendHighlightStyles();\n        } else if (this.chart.highlightModule.highlightDataIndexes && this.chart.highlightModule.highlightDataIndexes.length > 0 && target.id.indexOf('_chart_legend_') === -1 && target.id.indexOf('_Series_') > -1 && this.chart.tooltip && this.chart.tooltip.enableHighlight && this.chart.highlightMode === 'None') {\n          this.removeLegendHighlightStyles(true);\n        }\n      }\n      return;\n    }\n  };\n  /**\n   * Handles the selection and dragging functionality for the chart.\n   *\n   * @param {Chart} chart - The chart instance.\n   * @param {Element} target - The target element involved in the selection or dragging action.\n   * @param {string} eventType - The type of event triggering the selection or dragging action.\n   * @returns {void}\n   */\n  Selection.prototype.selectionAndDrag = function (chart, target, eventType) {\n    var insideMoving = withInBounds(chart.mouseX, chart.mouseY, chart.chartAxisLayoutPanel.seriesClipRect);\n    if (insideMoving && !this.chart.enableCanvas) {\n      if (this.rectGrabbing && !this.resizing) {\n        this.draggedRectMoved(chart, this.dragRect, true);\n      } else if (this.dragging && !this.resizing) {\n        if (chart.selectionMode === 'Lasso') {\n          this.getPath(chart.mouseDownX, chart.mouseDownY, chart.mouseX, chart.mouseY);\n          this.drawDraggingRect(chart, this.dragRect);\n        } else {\n          this.dragRect = this.getDragRect(chart, chart.chartAxisLayoutPanel.seriesClipRect);\n          this.drawDraggingRect(chart, this.dragRect);\n        }\n      }\n      if (this.rectPoints && !chart.allowMultiSelection) {\n        this.resizingSelectionRect(chart, new ChartLocation(chart.mouseX, chart.mouseY), null, target);\n      } else if (chart.allowMultiSelection && !this.dragging || this.resizing) {\n        this.resizingSelectionRect(chart, new ChartLocation(chart.mouseX, chart.mouseY), null, target);\n      }\n    } else {\n      this.completeSelection(target, eventType);\n    }\n  };\n  /**\n   * Remove highlighted legend when not focused.\n   * @param {boolean} tooltipHighlight - Specifies whether the tooltip highlighting is enabled.\n   * @private\n   * @returns {void}\n   */\n  Selection.prototype.removeLegendHighlightStyles = function (tooltipHighlight) {\n    this.chart.highlightModule.highlightDataIndexes = [];\n    var elementCollection;\n    for (var i = 0; i < this.chart.visibleSeries.length; i++) {\n      elementCollection = document.getElementsByClassName(this.generateStyle(this.chart.visibleSeries[i]));\n      if (this.selectedDataIndexes.length === 0) {\n        elementCollection = document.getElementsByClassName(this.generateStyle(this.chart.visibleSeries[i]));\n        while (elementCollection.length > 0) {\n          var element = elementCollection[0];\n          if (element) {\n            this.removeSvgClass(element, element.getAttribute('class'));\n            if (element.id.indexOf('Group') > 0 && !this.chart.visibleSeries[i].isRectSeries) {\n              var seriesIndex = this.indexFinder(element.id);\n              for (var j = 0; j < element.children.length; j++) {\n                if (element.children[j].nodeName !== 'defs') {\n                  this.highlightAnimation(element.children[j], seriesIndex.series, tooltipHighlight ? 0 : 700, 0.3, !tooltipHighlight);\n                }\n              }\n            }\n          }\n        }\n        elementCollection = document.getElementsByClassName(this.unselected);\n        while (elementCollection.length > 0) {\n          var element = elementCollection[0];\n          if (element) {\n            this.removeSvgClass(element, element.getAttribute('class'));\n            if (element.id !== '') {\n              this.highlightAnimation(element, this.chart.series.length === 1 ? 0 : this.indexFinder(element.id).series, tooltipHighlight ? 0 : 700, 0.3);\n            }\n          }\n        }\n      } else {\n        elementCollection = document.getElementsByClassName(this.generateStyle(this.chart.visibleSeries[i]));\n        while (elementCollection.length > 0) {\n          var element = elementCollection[0];\n          if (element) {\n            this.removeSvgClass(element, element.getAttribute('class'));\n            this.addSvgClass(element, this.unselected);\n          }\n        }\n      }\n    }\n  };\n  Selection.prototype.getPath = function (startX, startY, endX, endY) {\n    if (this.dragging) {\n      if (this.path) {\n        this.path = this.path + ' L' + endX + ' ' + endY;\n      } else {\n        this.path = 'M ' + startX + ' ' + startY;\n      }\n    }\n  };\n  /**\n   * Performs a highlight animation on the specified HTML element.\n   *\n   * @param {HTMLElement} element - The HTML element to animate.\n   * @param {number} index - The index to find the opacity value of the series.\n   * @param {number} duration - The duration of the animation in milliseconds.\n   * @param {number} startOpacity - The starting opacity value for the animation.\n   * @param {boolean} strokeWidth - The starting opacity value for the animation.\n   * @returns {void}\n   */\n  Selection.prototype.highlightAnimation = function (element, index, duration, startOpacity, strokeWidth) {\n    var _this = this;\n    var endOpacity;\n    var endWidth;\n    var startWidth = parseFloat(this.chart.visibleSeries[index].width.toString()) + 1;\n    if (strokeWidth) {\n      if (element.id.indexOf('border') !== -1 && this.chart.visibleSeries[index].border.width) {\n        endWidth = parseFloat(this.chart.visibleSeries[index].border.width.toString());\n      } else if (element.id.indexOf('Symbol') !== -1 && this.chart.visibleSeries[index].marker.border.width) {\n        endWidth = parseFloat(this.chart.visibleSeries[index].marker.border.width.toString());\n      } else {\n        endWidth = parseFloat(this.chart.visibleSeries[index].width.toString());\n      }\n    } else {\n      if (element.id.indexOf('border') !== -1) {\n        endOpacity = 1;\n      } else if (element.id.indexOf('Symbol') !== -1) {\n        endOpacity = parseFloat(this.chart.visibleSeries[index].marker.opacity.toString());\n      } else if (element.id.indexOf('legend_shape') !== -1) {\n        endOpacity = parseFloat(this.chart.legendSettings.opacity.toString());\n      } else {\n        endOpacity = parseFloat(this.chart.visibleSeries[index].opacity.toString());\n      }\n      if (isNullOrUndefined(this.chart.selectionModule) && this.chart.selectionMode === 'None' && this.chart.highlightColor !== '') {\n        startOpacity = 1;\n      }\n    }\n    if (endOpacity || strokeWidth && endWidth && startWidth) {\n      new Animation({}).animate(element, {\n        duration: duration,\n        progress: function (args) {\n          element.style.animation = '';\n          if (_this.chart.tooltip.enableHighlight && _this.chart.tooltipModule.svgTooltip) {\n            return;\n          }\n          var progress = args.timeStamp / args.duration;\n          if (strokeWidth) {\n            var currentWidth = startWidth + (endWidth - startWidth) * progress;\n            element.setAttribute('stroke-width', currentWidth.toString());\n          } else {\n            var currentOpacity = startOpacity + (endOpacity - startOpacity) * progress;\n            element.setAttribute('opacity', currentOpacity.toString());\n          }\n        },\n        end: function () {\n          if (_this.chart.tooltip.enableHighlight && _this.chart.tooltipModule.svgTooltip) {\n            return;\n          }\n          if (strokeWidth) {\n            element.setAttribute('stroke-width', endWidth.toString());\n          } else {\n            element.setAttribute('opacity', endOpacity.toString());\n          }\n        }\n      });\n    }\n  };\n  /**\n   * Stops the animation and sets opacity of the specified HTML element.\n   *\n   * @param {HTMLElement} element - The HTML element to stop the animation.\n   * @param {number} index - The index to find the opacity value of the series.\n   * @returns {void}\n   */\n  Selection.prototype.stopElementAnimation = function (element, index) {\n    var endOpacity;\n    if (element.id.indexOf('border') !== -1) {\n      endOpacity = 1;\n    } else if (element.id.indexOf('Symbol') !== -1) {\n      endOpacity = parseFloat(this.chart.visibleSeries[index].marker.opacity.toString());\n    } else {\n      endOpacity = parseFloat(this.chart.visibleSeries[index].opacity.toString());\n    }\n    if (element.getAttribute('e-animate')) {\n      Animation.stop(element);\n    }\n    element.setAttribute('opacity', endOpacity.toString());\n  };\n  Selection.prototype.pointChecking = function (path) {\n    var _this = this;\n    var chart = this.chart;\n    var element;\n    var svgRect = getElement(chart.svgId).getBoundingClientRect();\n    var offsetX = chart.chartAxisLayoutPanel.seriesClipRect.x + Math.max(svgRect.left, 0);\n    var offsetY = chart.chartAxisLayoutPanel.seriesClipRect.y + Math.max(svgRect.top, 0);\n    this.multiDataIndexes[this.count] = [];\n    for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n      var series = _a[_i];\n      series.points.filter(function (point) {\n        // To check whether the point have symbol location value or not.\n        if (point.symbolLocations && point.symbolLocations.length) {\n          element = document.elementFromPoint(point.symbolLocations[0].x + offsetX, point.symbolLocations[0].y + offsetY);\n        }\n        if (element === path) {\n          point.isSelect = true;\n          if (_this.chart.allowMultiSelection && _this.currentMode === 'Lasso') {\n            _this.multiDataIndexes[_this.count][_this.seriesIndex] = point;\n            _this.seriesIndex++;\n          }\n        } else if (!chart.allowMultiSelection) {\n          point.isSelect = false;\n        }\n      });\n    }\n    this.seriesIndex = 0;\n  };\n  /**\n   * Get module name.\n   *\n   * @private\n   * @returns {string} - Returns the module name.\n   */\n  Selection.prototype.getModuleName = function () {\n    return 'Selection';\n  };\n  /**\n   * To destroy the selection.\n   *\n   * @returns {void}\n   * @private\n   */\n  Selection.prototype.destroy = function () {\n    this.removeEventListener();\n    // Destroy method performed here\n  };\n  return Selection;\n}(BaseSelection);\nexport { Selection };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","Animation","Browser","remove","extend","isNullOrUndefined","ChartLocation","RectOption","CircleOption","withInBounds","getDraggedRectLocation","removeElement","getElement","Rect","PathOption","Index","dragComplete","selectionComplete","BaseSelection","Selection","_super","chart","_this","call","isdrawRect","multiDataIndexes","pathIndex","seriesIndex","count","dragRectArray","filterArray","totalSelectedPoints","renderer","mode","selectionMode","isMultiDrag","isMultiSelect","indexOf","addEventListener","isDestroyed","stockChart","onPanning","cancelEvent","isPointer","on","touchMoveEvent","mouseMove","mouseLeave","mouseClick","touchStartEvent","mousedown","touchEndEvent","e","isPointMouseDown","isChartDrag","isDoubleTap","isTouch","rectPoints","dragStart","chartAxisLayoutPanel","seriesClipRect","mouseDownX","mouseDownY","removeEventListener","off","initPrivateVariables","styleId","element","id","unselected","closeIconId","draggedRectGroup","multiRectGroup","draggedRect","lassoPath","selectedDataIndexes","isSeriesMode","invokeSelection","series","visibleSeries","seriesStyles","currentMode","selectDataIndex","concatIndexes","generateStyle","unSelectedStyle","highlightMode","legendSettings","enableHighlight","nonHighlightStyle","selectionStyle","index","indexes","_i","indexes_1","length","performSelection","getElementByIndex","marker","visible","suffix","dataLabel","elementId","point","type","getClusterElements","clusters","seriesStyle","selectedElements","_a","isRectSeries","push","dataLabelTextElement","document","getElementById","dataLabelShapeElement","querySelectorAll","findTrackballElements","clusterIndex","removeSelection","className","trackballElements","elements","i","parentNode","slice","i_1","removeStyles","findElements","getSeriesElements","isAlreadySelected","targetElem","eventType","selectionModule","highlightDataIndexes","previousSelectedEle","parentNodeId","isElement","hasAttribute","getAttribute","removeAttribute","j","children","highlightColor","highlightPattern","setAttribute","control","indexFinder","interior","addOrRemoveIndex","event","calculateSelectedElements","target","highlightModule","isDevice","removeLegendHighlightStyles","targetElement","pointClick","split","selectionEle","blurEffect","selection","isNaN","pointElements","baseId","textElement","replace","clusterSelection","points","pointIndex","selectedPointValues","yValue","selectedPointX","regions","y","xValue","primaryXAxis","valueType","x","toLocaleString","Date","category","selectedData","args","name","selectedDataValues","cancel","trigger","removeMultiSelectElements","indexValue","rangeColorMappingEnabled","isAdd","trim","pClassName","getSelectionClass","applyStyles","currentIndex","seriesCollection","toEquals","splice","chartId","isLegend","visibility","checkVisibility","visibleSeries_1","legendIndex","legendStrokeColor","keys","rangeColorPoints","checkSelectionElements","shapeElement","childNodes","tagName","toLowerCase","elementClassName","parentClassName","legendShape","selectElement","isDataLabelTextElement","addSvgClass","removeSvgClass","highlightAnimation","classList","symbolEle","seriesClassName","legendModule","legendItemsId","rangeColorSettings","elements_1","pointColorMapping","parseInt","patternName","selectionPattern","pattern","nodeName","stopElementAnimation","elements_2","first","second","checkSeriesOnly","redrawSelection","oldMode","chartRedraw","isRedrawSelection","removeSelectedElements","legendSelection","isPreSelected","isBlurEffectNeeded","seriesElements","a","seriesElement","dataLabelBorder","_b","seriesElements_1","_c","seriesElements_2","NaN","colors","value","elements_3","symbolElement","ids","calculateDragSelectedElements","dragRect","isClose","isLasso","rect","width","height","axisOffset","removeOffset","selectedSeriesValues","isDragResize","allowMultiSelection","rectGrabbing","resizing","targetIndex","rt","_loop_1","xAxisOffset_1","yAxisOffset_1","isTransposed","xAxis","yAxis","isCurrentPoint","some","region","isSelect","this_1","isPointSelect","symbolLocations","location","createCloseButton","clip","xAxisOffset","yAxisOffset","rectCollection","rectCollection_1","drawDraggingRect","cartesianLayout","border","chartArea","rectFill","themeStyle","selectionRectFill","rectStroke","selectionRectStroke","isDragMode","dragGroup","multiGroup","svgRenderer","createGroup","svgObject","appendChild","rectElement","nextSibling","setAttributes","svgElement","enableCanvas","drawRectangle","color","theme","style","cursor","drawPath","path","closeIcon","getIndex","Number","substr","circleStroke","selectionCircleStroke","isDrag","drawCircle","direction","stroke","fill","pathElement","removeDraggedElements","isSelectedvalues","multiRectGroupElement","childElementCount","k","changeCursorStyle","resizingSelectionRect","tapped","r","resize","findResizeMode","chartSvgObject","cursorStyle","resizeEdges","resizeMode","Math","abs","min","isResize","rectelement","seriesCollection_1","seriesElements_3","getChildren","ele","object","keys_1","key","draggedRectMoved","grabbedPoint","doDrawing","mouseX","mouseY","completeSelection","dragging","pointChecking","getDragRect","chartAreaType","undefined","isDragRect","highlightChart","isIos","isIos7","preventDefault","selectionAndDrag","tooltip","insideMoving","getPath","tooltipHighlight","elementCollection","getElementsByClassName","startX","startY","endX","endY","duration","startOpacity","strokeWidth","endOpacity","endWidth","startWidth","parseFloat","toString","opacity","animate","progress","animation","tooltipModule","svgTooltip","timeStamp","currentWidth","currentOpacity","end","stop","svgRect","svgId","getBoundingClientRect","offsetX","max","left","offsetY","top","filter","elementFromPoint","getModuleName","destroy"],"sources":["C:/Users/mkfun/Desktop/ct assignment/admin/node_modules/@syncfusion/ej2-charts/src/chart/user-interaction/selection.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * Selection src file\n */\nimport { Animation, Browser } from '@syncfusion/ej2-base';\nimport { remove } from '@syncfusion/ej2-base';\nimport { extend, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { ChartLocation, RectOption, CircleOption, withInBounds, getDraggedRectLocation, removeElement, getElement } from '../../common/utils/helper';\nimport { Rect, PathOption } from '@syncfusion/ej2-svg-base';\nimport { Index } from '../../common/model/base';\nimport { dragComplete, selectionComplete } from '../../common/model/constants';\nimport { BaseSelection } from '../../common/user-interaction/selection';\n/**\n * The `Selection` module handles the selection of chart elements.\n *\n * @private\n */\nvar Selection = /** @class */ (function (_super) {\n    __extends(Selection, _super);\n    /**\n     * Constructor for selection module.\n     *\n     * @private\n     */\n    function Selection(chart) {\n        var _this = _super.call(this, chart) || this;\n        _this.isdrawRect = true;\n        _this.multiDataIndexes = [];\n        _this.pathIndex = 0;\n        _this.seriesIndex = 0;\n        _this.count = -1;\n        _this.dragRectArray = [];\n        _this.filterArray = [];\n        _this.totalSelectedPoints = [];\n        _this.chart = chart;\n        _this.renderer = chart.renderer;\n        var mode = chart.selectionMode;\n        _this.isMultiDrag = chart.isMultiSelect && (mode.indexOf('Drag') > -1);\n        _this.addEventListener();\n        return _this;\n    }\n    /**\n     * Adds event listeners for the chart.\n     *\n     * @returns {void}\n     */\n    Selection.prototype.addEventListener = function () {\n        if (this.chart.isDestroyed || (this.chart.stockChart && this.chart.stockChart.onPanning)) {\n            return;\n        }\n        var cancelEvent = Browser.isPointer ? 'pointerleave' : 'mouseleave';\n        this.chart.on(Browser.touchMoveEvent, this.mouseMove, this);\n        this.chart.on(cancelEvent, this.mouseLeave, this);\n        this.chart.on('click', this.mouseClick, this);\n        this.chart.on(Browser.touchStartEvent, this.mousedown, this);\n        this.chart.on(Browser.touchEndEvent, this.mouseLeave, this);\n    };\n    /**\n     * Handles the mousedown event.\n     *\n     * @private\n     * @param {Event} e - The event object.\n     * @returns {void}\n     */\n    Selection.prototype.mousedown = function (e) {\n        var chart = this.chart;\n        if (chart.isPointMouseDown || chart.selectionMode === 'None' || chart.isChartDrag) {\n            return;\n        }\n        if (chart.isDoubleTap || !chart.isTouch || this.rectPoints) {\n            this.dragStart(chart, chart.chartAxisLayoutPanel.seriesClipRect, chart.mouseDownX, chart.mouseDownY, e);\n        }\n    };\n    /**\n     * UnBinding events for selection module.\n     *\n     * @returns {void}\n     */\n    Selection.prototype.removeEventListener = function () {\n        if (this.chart.isDestroyed) {\n            return;\n        }\n        this.chart.off(Browser.touchMoveEvent, this.mouseMove);\n        this.chart.off('pointerleave' || 'mouseleave', this.mouseLeave);\n        this.chart.off('click', this.mouseClick);\n        this.chart.off(Browser.touchStartEvent, this.mousedown);\n        this.chart.off(Browser.touchEndEvent, this.mouseLeave);\n    };\n    /**\n     * Initializes private variables for the chart.\n     *\n     * @private\n     * @param {Chart} chart - The chart instance.\n     * @returns {void}\n     */\n    Selection.prototype.initPrivateVariables = function (chart) {\n        this.styleId = chart.element.id + '_ej2_chart_selection';\n        this.unselected = chart.element.id + '_ej2_deselected';\n        this.closeIconId = chart.element.id + '_ej2_drag_close';\n        this.draggedRectGroup = chart.element.id + '_ej2_drag_group';\n        this.multiRectGroup = chart.element.id + '_ej2_drag_multi_group';\n        this.draggedRect = chart.element.id + '_ej2_drag_rect';\n        this.lassoPath = chart.element.id + '_ej2_drag_path';\n        this.selectedDataIndexes = [];\n        this.rectPoints = null;\n        this.isSeriesMode = chart.selectionMode === 'Series';\n    };\n    /**\n     * Method to select the point and series.\n     *\n     * @param {Chart} chart - The chart instance.\n     * @returns {void}\n     */\n    Selection.prototype.invokeSelection = function (chart) {\n        this.initPrivateVariables(chart);\n        this.series = extend({}, chart.visibleSeries, null, true);\n        this.seriesStyles();\n        this.currentMode = chart.selectionMode;\n        if (!(chart.selectionMode.indexOf('Drag') > -1)) {\n            this.selectDataIndex(chart, this.concatIndexes(chart.selectedDataIndexes, this.selectedDataIndexes));\n        }\n    };\n    Selection.prototype.generateStyle = function (series) {\n        if (series) {\n            if (this.styleId.indexOf('selection') > 1 && this.chart.selectionMode !== 'None') {\n                this.unselected = series.unSelectedStyle || this.unselected;\n            }\n            if (this.styleId.indexOf('highlight') > 0 && (this.chart.highlightMode !== 'None' || this.chart.legendSettings.enableHighlight)) {\n                this.unselected = series.nonHighlightStyle || this.unselected;\n            }\n            return (series.selectionStyle || this.styleId + '_series_' + series.index);\n        }\n        return 'undefined';\n    };\n    /**\n     * Selects data points in the chart based on the provided indexes.\n     *\n     * @param {Chart} chart - The chart instance.\n     * @param {Index[]} indexes - An array of Index objects specifying the series and point indexes to be selected.\n     * @returns {void}\n     */\n    Selection.prototype.selectDataIndex = function (chart, indexes) {\n        for (var _i = 0, indexes_1 = indexes; _i < indexes_1.length; _i++) {\n            var index = indexes_1[_i];\n            this.performSelection(index, chart, this.getElementByIndex(chart, index, '', this.series[index.series].marker.visible)[0]);\n        }\n    };\n    /**\n     * Retrieves the DOM elements corresponding to the specified data point index.\n     *\n     * @param {Chart} chart - The chart instance.\n     * @param {Index} index - The index object specifying the series and point indexes.\n     * @param {string} [suffix=''] - Optional suffix to be appended to the element IDs.\n     * @param {boolean} [marker] - Optional parameter to specify whether to retrieve marker elements. Default is false.\n     * @param {boolean} [dataLabel] - Optional parameter to specify whether to retrieve datalabel elements. Default is false.\n     * @returns {Element[]} - An array of DOM elements corresponding to the specified data point index.\n     */\n    Selection.prototype.getElementByIndex = function (chart, index, suffix, marker, dataLabel) {\n        if (suffix === void 0) { suffix = ''; }\n        var elementId = chart.element.id + '_Series_' + index.series + '_Point' + '_' + index.point;\n        var series = chart.series[index.series];\n        elementId = (series.type !== 'Scatter' && series.type !== 'Bubble' && marker) ? (elementId + '_Symbol' + suffix) : elementId;\n        if (!marker && dataLabel) {\n            return [getElement(elementId + '_Text_0' + suffix), getElement(elementId + '_TextShape_0' + suffix)];\n        }\n        return [getElement(elementId), ((series.type === 'RangeArea' || series.type === 'SplineRangeArea' || series.type === 'RangeStepArea') && series.marker.visible) ?\n                getElement(elementId + '1') : null];\n    };\n    /**\n     * Retrieves the DOM elements corresponding to the cluster of data points at the specified index.\n     *\n     * @param {Chart} chart - The chart instance.\n     * @param {Index} index - The index object specifying the series and point indexes.\n     * @returns {Element[]} - An array of DOM elements corresponding to the cluster of data points at the specified index.\n     */\n    Selection.prototype.getClusterElements = function (chart, index) {\n        var clusters = [];\n        var seriesStyle;\n        var selectedElements;\n        for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n            var series = _a[_i];\n            if (series.visible) {\n                index = new Index(series.index, index.point);\n                if (series.isRectSeries) {\n                    clusters.push(this.getElementByIndex(chart, index)[0]);\n                }\n                clusters.push(this.getElementByIndex(chart, index, '', series.marker.visible)[0]);\n                var dataLabelTextElement = document.getElementById(chart.element.id + '_Series_' + series.index + '_Point_' + index.point + '_Text_0');\n                var dataLabelShapeElement = document.getElementById(chart.element.id + '_Series_' + series.index + '_Point_' + index.point + '_TextShape_0');\n                if (dataLabelTextElement) {\n                    clusters.push(dataLabelTextElement);\n                }\n                if (dataLabelShapeElement) {\n                    clusters.push(dataLabelShapeElement);\n                }\n                seriesStyle = this.generateStyle(chart.visibleSeries[index.series]);\n                selectedElements = document.querySelectorAll('.' + seriesStyle);\n                this.findTrackballElements(selectedElements, seriesStyle);\n                var clusterIndex = series.marker.visible && series.isRectSeries ? 2 : 1;\n                clusterIndex += (dataLabelTextElement && dataLabelShapeElement) ? 2 :\n                    (dataLabelTextElement || dataLabelShapeElement) ? 1 : 0;\n                if (!chart.isMultiSelect && selectedElements.length > 0 &&\n                    selectedElements[0].id !== (clusters[clusters.length - clusterIndex] ? clusters[clusters.length - clusterIndex].id : '')) {\n                    this.removeSelection(chart, index.series, selectedElements, seriesStyle, true);\n                }\n            }\n        }\n        return clusters;\n    };\n    /**\n     * Finds the elements within the selected elements that match the specified class name.\n     *\n     * @param {Element[] | NodeListOf<HTMLElement>} selectedElements - The elements to search within.\n     * @param {string} className - The class name to search for.\n     * @returns {void}\n     */\n    Selection.prototype.findTrackballElements = function (selectedElements, className) {\n        var trackballElements;\n        var elements;\n        for (var i = 0; i < selectedElements.length; i++) {\n            if (!isNullOrUndefined(selectedElements[i])) {\n                trackballElements = !isNullOrUndefined(selectedElements[i].parentNode) ?\n                    [].slice.call(selectedElements[0].parentNode.querySelectorAll('.' + className)) : [];\n                if (trackballElements.length > 0) {\n                    elements = [];\n                    for (var i_1 = 0; i_1 < trackballElements.length; i_1++) {\n                        if (trackballElements[i_1].id.indexOf('Trackball') > -1) {\n                            elements.push(trackballElements[i_1]);\n                        }\n                    }\n                    this.removeStyles(elements);\n                }\n            }\n        }\n    };\n    /**\n     * Finds the elements in the chart corresponding to the specified series and data point index.\n     *\n     * @param {Chart} chart - The chart instance.\n     * @param {SeriesModel} series - The series for which to find the elements.\n     * @param {Index} index - The index of the data point.\n     * @param {string} [suffix=''] - A suffix to append to the element IDs.\n     * @param {boolean} [marker] - Specifies whether to include marker elements.\n     * @param {boolean} [dataLabel] - Specifies whether to include datalabel elements.\n     * @returns {Element[]} - An array of elements corresponding to the specified series and data point index.\n     */\n    Selection.prototype.findElements = function (chart, series, index, suffix, marker, dataLabel) {\n        if (suffix === void 0) { suffix = ''; }\n        if (this.isSeriesMode) {\n            return this.getSeriesElements(series);\n        }\n        else if (this.currentMode === 'Cluster') {\n            return this.getClusterElements(chart, index);\n        }\n        else {\n            return this.getElementByIndex(chart, index, suffix, marker, dataLabel);\n        }\n    };\n    /**\n     * Checks if the target element is already selected for the specified event type.\n     *\n     * @param {Element} targetElem - The target element to check.\n     * @param {string} eventType - The type of event (e.g., 'mouse move', 'touch move').\n     * @returns {boolean} - A boolean value indicating whether the target element is already selected for the specified event type.\n     */\n    Selection.prototype.isAlreadySelected = function (targetElem, eventType) {\n        if (eventType === 'click') {\n            this.currentMode = this.chart.selectionMode;\n            this.styleId = this.chart.element.id + (this.chart.selectionModule && this.chart.selectionMode !== 'None' ? '_ej2_chart_selection' : '_ej2_chart_highlight');\n        }\n        else if (eventType === 'mousemove' || eventType === 'pointermove') {\n            this.currentMode = this.chart.highlightMode;\n            this.highlightDataIndexes = [];\n            this.styleId = this.chart.element.id + '_ej2_chart_highlight';\n        }\n        if (this.chart.highlightMode !== 'None' && this.chart.selectionMode === 'None') {\n            if (eventType === 'click') {\n                return false;\n            }\n        }\n        if (((this.chart.highlightMode !== 'None' || this.chart.legendSettings.enableHighlight) && this.previousSelectedEle && this.previousSelectedEle[0])) {\n            var parentNodeId = targetElem.parentNode ? targetElem.parentNode.id : '';\n            var isElement = void 0;\n            if (targetElem.parentNode) {\n                isElement = (parentNodeId.indexOf('SeriesGroup') > 0 || parentNodeId.indexOf('SymbolGroup') > 0) ? true : false;\n            }\n            for (var i = 0; i < this.previousSelectedEle.length; i++) {\n                if (this.previousSelectedEle[i] && this.previousSelectedEle[i].hasAttribute('class')) {\n                    if (this.previousSelectedEle[i].getAttribute('class').indexOf('highlight') > -1 &&\n                        (isElement || eventType === 'click')) {\n                        this.previousSelectedEle[i].removeAttribute('class');\n                        if (this.previousSelectedEle[i].id.indexOf('Group') > 0) {\n                            for (var j = 0; j < this.previousSelectedEle[i].children.length; j++) {\n                                if (this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor) && this.chart.highlightPattern === 'None') {\n                                    this.previousSelectedEle[i].children[j].setAttribute('fill', (this.previousSelectedEle[i].children[j].id.indexOf('Text') > -1 || this.previousSelectedEle[i].children[j].id.indexOf('TextShape') > -1) ? this.previousSelectedEle[i].children[j].getAttribute('fill') : this.control.visibleSeries[this.indexFinder(this.previousSelectedEle[i].id).series].interior);\n                                }\n                                this.previousSelectedEle[i].children[j].removeAttribute('style');\n                            }\n                        }\n                        else {\n                            if (this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor) && this.chart.highlightPattern === 'None') {\n                                this.previousSelectedEle[i].setAttribute('fill', (this.previousSelectedEle[i].id.indexOf('Text') > -1 || this.previousSelectedEle[i].id.indexOf('TextShape') > -1) ? this.previousSelectedEle[i].getAttribute('fill') : this.control.visibleSeries[this.indexFinder(this.previousSelectedEle[i].id).series].interior);\n                            }\n                            this.previousSelectedEle[i].removeAttribute('style');\n                        }\n                        this.addOrRemoveIndex(this.highlightDataIndexes, this.indexFinder(this.previousSelectedEle[i].id));\n                    }\n                    else if (!isElement && this.previousSelectedEle[i].getAttribute('class').indexOf('highlight') > -1) {\n                        this.performSelection(this.indexFinder(this.previousSelectedEle[i].id), this.chart, this.previousSelectedEle[i]);\n                    }\n                }\n            }\n        }\n        return true;\n    };\n    Selection.prototype.mouseClick = function (event) {\n        this.calculateSelectedElements(event.target, event.type, true);\n        if (this.chart.highlightModule && this.chart.highlightModule.highlightDataIndexes\n            && this.chart.highlightModule.highlightDataIndexes.length > 0 && event.target.id.indexOf('_chart_legend_') === -1\n            && event.target.id.indexOf('_Series_') === -1 && this.chart.isTouch && Browser.isDevice) {\n            this.removeLegendHighlightStyles();\n        }\n    };\n    /**\n     * Calculates the selected elements based on the target element and event type.\n     *\n     * @param {HTMLElement} targetElement - The target element for which to calculate selected elements.\n     * @param {string} eventType - The type of event (e.g., 'mouse move', 'touch move').\n     * @param {boolean} pointClick - Selection of series points.\n     * @returns {void}\n     */\n    Selection.prototype.calculateSelectedElements = function (targetElement, eventType, pointClick) {\n        if (isNullOrUndefined(targetElement)) {\n            return;\n        }\n        if ((this.chart.selectionMode === 'None' && this.chart.highlightMode === 'None') ||\n            targetElement.id && targetElement.id.indexOf(this.chart.element.id + '_') === -1) {\n            return;\n        }\n        if (eventType === 'mousemove' || eventType === 'pointermove') {\n            if (targetElement.hasAttribute('class') && (targetElement.getAttribute('class').indexOf('highlight') > -1 ||\n                targetElement.getAttribute('class').indexOf('selection') > -1)) {\n                return;\n            }\n            if (!isNullOrUndefined(targetElement.parentNode) && targetElement.parentNode.hasAttribute('class') &&\n                (targetElement.parentNode.getAttribute('class').indexOf('highlight') > 0 ||\n                    targetElement.parentNode.getAttribute('class').indexOf('selection') > 0)) {\n                return;\n            }\n        }\n        this.isAlreadySelected(targetElement, eventType);\n        if (targetElement.id && targetElement.id.indexOf('_Series_') > -1 && targetElement.id.indexOf('_Text_') === -1) {\n            var element = void 0;\n            if (targetElement.id.indexOf('_Trackball_1') > -1) {\n                element = getElement(targetElement.id.split('_Trackball_')[0] + '_Symbol');\n                element = isNullOrUndefined(element) ? getElement(targetElement.id.split('_Trackball_')[0]) : element;\n            }\n            else if (targetElement.id.indexOf('_Trackball_0') > -1) {\n                return null;\n            }\n            this.performSelection(this.indexFinder(targetElement.id), this.chart, element || targetElement, pointClick);\n        }\n    };\n    /**\n     * Performs selection based on the provided index and chart.\n     *\n     * @param {Index} index - The index for which to perform the selection.\n     * @param {Chart} chart - The chart instance.\n     * @param {Element} [element] - Optional. The element associated with the selection.\n     * @param {boolean} pointClick - Selection of series points.\n     * @returns {void}\n     */\n    Selection.prototype.performSelection = function (index, chart, element, pointClick) {\n        this.isSeriesMode = this.currentMode === 'Series';\n        if (chart.visibleSeries[index.series].type === 'BoxAndWhisker' && element &&\n            element.id === chart.element.id + '_Series_' + index.series + '_Point_' + index.point + '_BoxPath') {\n            element = element.parentNode;\n        }\n        if (chart.visibleSeries[index.series].type === 'Area' && (this.currentMode === 'Point' || this.currentMode === 'Cluster') && element &&\n            (element.id === this.chart.element.id + '_Series_' + index.series)) {\n            var className = this.generateStyle(chart.series[index.series]);\n            var selectionEle = document.querySelectorAll('.' + className);\n            this.findTrackballElements(selectionEle, className);\n            this.blurEffect(chart.element.id, chart.visibleSeries, false, index.point);\n        }\n        switch (this.currentMode) {\n            case 'Series':\n                this.selection(chart, index, this.getSeriesElements(chart.series[index.series]));\n                this.selectionComplete(chart, index, this.currentMode);\n                this.blurEffect(chart.element.id, chart.visibleSeries, false, index.point);\n                break;\n            case 'Point':\n                if ((!isNaN(index.point) && element) || (!pointClick && isNaN(index.point))) {\n                    var pointElements = [];\n                    pointElements.push(element);\n                    var series = this.chart.visibleSeries[index.series];\n                    var baseId = chart.element.id + \"_Series_\" + index.series + \"_Point_\" + index.point;\n                    var textElement = document.getElementById(baseId + \"_Text_0\");\n                    if (series.marker.dataLabel.visible && textElement !== null) {\n                        pointElements.push(textElement);\n                        pointElements.push(document.getElementById(baseId + \"_TextShape_0\"));\n                    }\n                    if (pointElements[0] !== null && chart.series[index.series].marker.visible &&\n                        (chart.series[index.series].type.indexOf('Column') !== -1 || chart.series[index.series].type.indexOf('Bar') !== -1)) {\n                        if (!(element.id.indexOf('_Symbol') !== -1) && getElement(element.id + '_Symbol')) {\n                            pointElements.push(getElement(element.id + '_Symbol'));\n                        }\n                        else if (element.id.indexOf('_Symbol') !== -1 && getElement(element.id.replace('_Symbol', ''))) {\n                            pointElements.push(getElement(element.id.replace('_Symbol', '')));\n                        }\n                    }\n                    this.selection(chart, index, (!pointClick && isNaN(index.point)) ?\n                        this.getSeriesElements(chart.series[index.series]) : pointElements);\n                    this.selectionComplete(chart, index, this.currentMode);\n                    this.blurEffect(chart.element.id, chart.visibleSeries, false, index.point);\n                }\n                break;\n            case 'Cluster':\n                if (!isNaN(index.point) || (!pointClick && isNaN(index.point))) {\n                    if (!pointClick && isNaN(index.point)) {\n                        this.selection(chart, index, this.getSeriesElements(chart.series[index.series]));\n                    }\n                    else {\n                        this.clusterSelection(chart, index);\n                    }\n                    this.selectionComplete(chart, index, this.currentMode);\n                    this.blurEffect(chart.element.id, chart.visibleSeries, false, index.point);\n                }\n                break;\n        }\n    };\n    /**\n     * Completes the selection process based on the provided index and selection mode.\n     *\n     * @param {Chart} chart - The chart instance.\n     * @param {Index} index - The index for which the selection is completed.\n     * @param {SelectionMode | HighlightMode} selectionMode - The selection mode.\n     * @returns {void}\n     */\n    Selection.prototype.selectionComplete = function (chart, index, selectionMode) {\n        var points;\n        var pointIndex;\n        var seriesIndex;\n        var selectedPointValues = [];\n        var yValue;\n        var selectedPointX;\n        if (selectionMode === 'Cluster') {\n            for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n                var series = _a[_i];\n                if (series.visible) {\n                    for (var i = 0; i < this.selectedDataIndexes.length; i++) {\n                        pointIndex = chart.isMultiSelect ? this.selectedDataIndexes[i].point : index.point;\n                        seriesIndex = series.index;\n                        points = series.points;\n                        if (!isNaN(pointIndex) && (pointIndex < points.length)) {\n                            yValue = (series.type !== 'RangeArea' || series.type.indexOf('SplineRangeArea') > -1 || series.type.indexOf('RangeStepArea') > -1) ? points[pointIndex].yValue :\n                                points[pointIndex].regions[0].y;\n                            selectedPointX = points[pointIndex].xValue;\n                            if (chart.primaryXAxis.valueType === 'Category') {\n                                selectedPointX = points[pointIndex].x.toLocaleString();\n                            }\n                            else if (chart.primaryXAxis.valueType === 'DateTime') {\n                                selectedPointX = new Date(points[pointIndex].xValue);\n                            }\n                            if (series.category !== 'Indicator') {\n                                selectedPointValues.push({\n                                    x: selectedPointX, y: yValue, seriesIndex: seriesIndex,\n                                    pointIndex: pointIndex\n                                });\n                            }\n                            if (series.type === 'RangeArea' || series.type === 'SplineRangeArea' || series.type === 'RangeStepArea') {\n                                selectedPointValues.push({\n                                    x: selectedPointX, y: points[pointIndex].regions[0].y,\n                                    seriesIndex: seriesIndex, pointIndex: pointIndex\n                                });\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        else if (selectionMode === 'Series') {\n            if (chart.isMultiSelect) {\n                for (var i = 0; i < this.selectedDataIndexes.length; i++) {\n                    seriesIndex = this.selectedDataIndexes[i].series;\n                    if (this.selectedDataIndexes.length > 0) {\n                        selectedPointValues.push({\n                            seriesIndex: seriesIndex\n                        });\n                    }\n                }\n            }\n            else {\n                seriesIndex = (this.selectedDataIndexes.length > 0) ? this.selectedDataIndexes[0].series :\n                    (this.highlightDataIndexes && this.highlightDataIndexes.length > 0) ? this.highlightDataIndexes[0].series : 0;\n                if (this.selectedDataIndexes.length > 0 || (this.highlightDataIndexes && this.highlightDataIndexes.length > 0)) {\n                    selectedPointValues.push({\n                        seriesIndex: seriesIndex\n                    });\n                }\n            }\n        }\n        else if (selectionMode === 'Point') {\n            var selectedData = [];\n            if (this.styleId.indexOf('highlight') > -1) {\n                selectedData = this.highlightDataIndexes;\n            }\n            else {\n                selectedData = this.selectedDataIndexes;\n            }\n            for (var i = 0; i < selectedData.length; i++) {\n                pointIndex = selectedData[i].point;\n                seriesIndex = selectedData[i].series;\n                var series = chart.series[seriesIndex];\n                points = series.points;\n                if (!isNaN(pointIndex)) {\n                    selectedPointX = points[pointIndex].xValue;\n                    yValue = (series.type !== 'RangeArea' || series.type.indexOf('SplineRangeArea') > -1 || series.type.indexOf('RangeStepArea') > -1) ? points[pointIndex].yValue :\n                        points[pointIndex].regions[0].y;\n                    if (chart.primaryXAxis.valueType === 'Category') {\n                        selectedPointX = points[pointIndex].x.toLocaleString();\n                    }\n                    else if (chart.primaryXAxis.valueType === 'DateTime') {\n                        selectedPointX = new Date(points[pointIndex].xValue);\n                    }\n                    selectedPointValues.push({\n                        x: selectedPointX, y: yValue, seriesIndex: seriesIndex,\n                        pointIndex: pointIndex\n                    });\n                }\n            }\n        }\n        var args = {\n            name: selectionComplete,\n            selectedDataValues: selectedPointValues,\n            cancel: false,\n            chart: chart\n        };\n        chart.trigger(selectionComplete, args);\n    };\n    /**\n     * Handles the selection logic for the chart.\n     *\n     * @param {Chart} chart - The chart instance.\n     * @param {Index} index - The index of the selected data point.\n     * @param {Element[]} selectedElements - The elements representing the selected data point.\n     * @returns {void}\n     */\n    Selection.prototype.selection = function (chart, index, selectedElements) {\n        if (!(this.currentMode === 'Lasso')) {\n            if (!chart.isMultiSelect && (this.currentMode.indexOf('Drag') === -1 && this.styleId.indexOf('highlight') === -1 &&\n                chart.selectionMode !== 'None')) {\n                this.removeMultiSelectElements(chart, this.selectedDataIndexes, index, chart.series);\n            }\n        }\n        var indexValue = (this.rangeColorMappingEnabled()) ? 0 : index.series;\n        if (!isNullOrUndefined(selectedElements[0])) {\n            if (chart.visibleSeries[indexValue].isRectSeries) {\n                if (selectedElements[0].id) {\n                    if (document.getElementById(selectedElements[0].id + '_Symbol')) {\n                        selectedElements.push(getElement(selectedElements[0].id + '_Symbol'));\n                    }\n                    else if (selectedElements[0].id.indexOf('SeriesGroup') !== -1) {\n                        if (document.getElementById(selectedElements[0].id.replace('SeriesGroup', 'SymbolGroup'))) {\n                            selectedElements.push(getElement(selectedElements[0].id.replace('SeriesGroup', 'SymbolGroup')));\n                        }\n                    }\n                }\n            }\n            var isAdd = void 0;\n            var className = selectedElements[0] && (selectedElements[0].getAttribute('class') || '');\n            className = className.replace('e-chart-focused', '').trim();\n            var pClassName = selectedElements[0].parentNode &&\n                (selectedElements[0].parentNode.getAttribute('class') || '');\n            if (className !== '' && this.currentMode !== 'Cluster') {\n                this.findTrackballElements(selectedElements, className);\n            }\n            if (selectedElements[0] && className.indexOf(this.getSelectionClass(selectedElements[0].id)) > -1) {\n                this.removeStyles(selectedElements);\n            }\n            else if (selectedElements[0].parentNode && pClassName.indexOf(this.getSelectionClass(selectedElements[0].id)) > -1) {\n                this.removeStyles([selectedElements[0].parentNode]);\n            }\n            else {\n                this.previousSelectedEle = (chart.highlightMode !== 'None' || chart.legendSettings.enableHighlight) ? selectedElements : [];\n                this.applyStyles(selectedElements);\n                isAdd = true;\n            }\n            if (this.styleId.indexOf('highlight') > 0 && (chart.highlightMode !== 'None' || chart.legendSettings.enableHighlight)) {\n                this.addOrRemoveIndex(this.highlightDataIndexes, index, isAdd);\n            }\n            else {\n                this.addOrRemoveIndex(this.selectedDataIndexes, index, isAdd);\n            }\n        }\n    };\n    /**\n     * Handles the selection logic for clustered data points in the chart.\n     *\n     * @param {Chart} chart - The chart instance.\n     * @param {Index} index - The index of the selected clustered data point.\n     * @returns {void}\n     */\n    Selection.prototype.clusterSelection = function (chart, index) {\n        this.selection(chart, index, this.getClusterElements(chart, new Index(index.series, index.point)));\n    };\n    /**\n     * Removes the multi-selected elements from the chart.\n     *\n     * @param {Chart} chart - The chart instance.\n     * @param {Index[]} index - The indices of the multi-selected elements to be removed.\n     * @param {Index} currentIndex - The index of the current selected element.\n     * @param {SeriesModel[]} seriesCollection - The collection of series in the chart.\n     * @returns {void}\n     */\n    Selection.prototype.removeMultiSelectElements = function (chart, index, currentIndex, seriesCollection) {\n        var series;\n        for (var i = 0; i < index.length; i++) {\n            series = seriesCollection[index[i].series];\n            if ((this.isSeriesMode && !this.toEquals(index[i], currentIndex, this.isSeriesMode)) ||\n                (this.currentMode === 'Cluster' && !this.toEquals(index[i], currentIndex, false)) ||\n                (!this.isSeriesMode && this.toEquals(index[i], currentIndex, true) &&\n                    !this.toEquals(index[i], currentIndex, false))) {\n                this.removeStyles(this.findElements(chart, series, index[i], '', false));\n                if (series.marker.visible) {\n                    this.removeStyles(this.findElements(chart, series, index[i], '', true));\n                }\n                if (series.marker.dataLabel.visible) {\n                    this.removeStyles(this.findElements(chart, series, index[i], '', false, true));\n                }\n                index.splice(i, 1);\n                i--;\n            }\n        }\n    };\n    /**\n     * Applies a blur effect to a specific chart or legend.\n     *\n     * @param {string} chartId - The ID of the chart or legend.\n     * @param {Series[]} visibleSeries - The collection of visible series in the chart.\n     * @param {boolean} isLegend - Indicates whether the blur effect should be applied to a legend. Defaults to false.\n     * @param {number} index - The index of the series or legend item to which the blur effect should be applied. Defaults to 0.\n     * @returns {void}\n     */\n    Selection.prototype.blurEffect = function (chartId, visibleSeries, isLegend, index) {\n        if (isLegend === void 0) { isLegend = false; }\n        if (index === void 0) { index = 0; }\n        var visibility = (this.checkVisibility(this.highlightDataIndexes, this.chart) ||\n            this.checkVisibility(this.selectedDataIndexes, this.chart)); // legend click scenario\n        for (var _i = 0, visibleSeries_1 = visibleSeries; _i < visibleSeries_1.length; _i++) {\n            var series = visibleSeries_1[_i];\n            var legendIndex = void 0;\n            var legendStrokeColor = void 0;\n            if (this.rangeColorMappingEnabled()) {\n                if (isLegend === false) {\n                    legendIndex = Object.keys(series.rangeColorPoints).indexOf(series.points[index].interior);\n                    legendStrokeColor = series.points[index].interior;\n                }\n                else {\n                    legendIndex = index;\n                    legendStrokeColor = document.getElementById(chartId + '_chart_legend_shape_' + index).getAttribute('fill');\n                }\n            }\n            else {\n                legendIndex = series.index;\n                legendStrokeColor = this.chart.visibleSeries[series.index].interior;\n            }\n            if (series.visible) {\n                this.checkSelectionElements(getElement(chartId + 'SeriesGroup' + series.index), this.generateStyle(series), visibility, isLegend, legendIndex, legendStrokeColor);\n                if (series.marker.dataLabel.visible && !isNullOrUndefined(series.shapeElement)) {\n                    this.checkSelectionElements(series.shapeElement, this.generateStyle(series), visibility, isLegend, legendIndex, legendStrokeColor);\n                    this.checkSelectionElements(series.textElement, this.generateStyle(series), visibility, isLegend, legendIndex, legendStrokeColor);\n                }\n                if (!isNullOrUndefined(getElement(chartId + 'SymbolGroup' + series.index))) {\n                    this.checkSelectionElements(getElement(chartId + 'SymbolGroup' + series.index), this.generateStyle(series), visibility, isLegend, legendIndex, legendStrokeColor);\n                }\n            }\n        }\n    };\n    /**\n     * Checks and updates the selection state of elements based on the provided criteria.\n     *\n     * @param {Element} element - The element to check for selection.\n     * @param {string} className - The class name used for selecting elements.\n     * @param {boolean} visibility - The visibility state of the element.\n     * @param {boolean} isLegend - Indicates whether the element is a legend. Defaults to true.\n     * @param {number} series - The index of the series associated with the element. Defaults to 0.\n     * @param {string} legendStrokeColor - The stroke color of the legend. Defaults to '#D3D3D3'.\n     * @returns {void}\n     */\n    Selection.prototype.checkSelectionElements = function (element, className, visibility, isLegend, series, legendStrokeColor) {\n        if (isLegend === void 0) { isLegend = true; }\n        if (series === void 0) { series = 0; }\n        if (legendStrokeColor === void 0) { legendStrokeColor = '#D3D3D3'; }\n        var children = (this.isSeriesMode ?\n            element.childNodes || [element] : element.childNodes || element);\n        if (this.chart.selectionMode !== 'None' && (this.chart.highlightMode !== 'None' || this.chart.legendSettings.enableHighlight)) {\n            children = (element.childNodes || element);\n        }\n        if (this.chart.selectionMode === 'Cluster' && element.tagName.toLowerCase() === 'text' && element.id.indexOf('_Text_') >= 0) {\n            children = [element];\n        }\n        var elementClassName;\n        var parentClassName;\n        var legendShape;\n        var selectElement = element;\n        var isDataLabelTextElement = (this.chart.visibleSeries[this.rangeColorMappingEnabled() ? 0 : series].marker.dataLabel.visible && (element.id.indexOf('Text') > -1 || element.id.indexOf('TextShape') > -1) && element.tagName !== 'g');\n        for (var i = 0; i < children.length && !isDataLabelTextElement; i++) {\n            elementClassName = children[i].getAttribute('class') || '';\n            parentClassName = children[i].parentNode.getAttribute('class') || '';\n            if (this.chart.selectionMode !== 'None' && (this.chart.highlightMode !== 'None' || this.chart.legendSettings.enableHighlight)) {\n                className = elementClassName.indexOf('selection') > 0 ||\n                    elementClassName.indexOf('highlight') > 0 ? elementClassName : className;\n                className = (parentClassName.indexOf('selection') > 0 ||\n                    parentClassName.indexOf('highlight') > 0) ? parentClassName : className;\n            }\n            if (elementClassName.indexOf(className) === -1 &&\n                parentClassName.indexOf(className) === -1 && visibility) {\n                this.addSvgClass(children[i], this.unselected);\n            }\n            else {\n                selectElement = children[i];\n                this.removeSvgClass(children[i], this.unselected);\n                this.removeSvgClass(children[i].parentNode, this.unselected);\n                if (children[i].id !== '' && elementClassName.indexOf(this.unselected) !== -1 && parentClassName.indexOf(className) === -1) {\n                    this.highlightAnimation(children[i], this.chart.series.length === 1 ? 0 :\n                        this.indexFinder(children[i].id).series, 700, 0.3);\n                }\n            }\n            if (children[i].id.indexOf('Trackball') > 0 && selectElement.classList[0] === className) {\n                this.removeSvgClass(children[i], this.unselected);\n                this.removeSvgClass(children[i].parentNode, this.unselected);\n                this.addSvgClass(children[i], className);\n            }\n        }\n        if (element.id.indexOf('Symbol') > -1) {\n            if ((element.querySelectorAll('.' + className)[0]) && element.querySelectorAll('.' + className)[0].getAttribute('class')\n                === className) {\n                var symbolEle = getElement(this.control.element.id + '_Series_' + element.id[element.id.length - 1]);\n                var seriesClassName = symbolEle && symbolEle.hasAttribute('class') ? symbolEle.getAttribute('class') : '';\n                if (seriesClassName.indexOf(this.unselected) > -1) {\n                    this.removeSvgClass(symbolEle, this.unselected);\n                }\n            }\n        }\n        if (this.control.legendModule && this.control.legendSettings.visible && this.control.legendSettings.visible\n            && !(isLegend && this.rangeColorMappingEnabled && (element === this.control.visibleSeries[0].textElement\n                || element === this.control.visibleSeries[0].shapeElement))) {\n            legendShape = getElement(this.control.element.id + '_chart_legend_shape_' + series);\n            if (legendShape) {\n                if (legendShape.hasAttribute('class')) {\n                    this.removeSvgClass(legendShape, legendShape.getAttribute('class'));\n                    if (!isNullOrUndefined(this.chart.highlightColor && this.chart.highlightColor !== '') && !this.chart.legendSettings.enableHighlight) {\n                        legendShape.setAttribute('stroke', legendStrokeColor);\n                        if (this.chart.highlightPattern === 'None') {\n                            legendShape.setAttribute('fill', legendStrokeColor);\n                        }\n                    }\n                }\n                elementClassName = selectElement.getAttribute('class') || '';\n                parentClassName = selectElement.parentNode.getAttribute('class') || '';\n                if (elementClassName.indexOf(className) === -1 && parentClassName.indexOf(className) === -1 && visibility) {\n                    this.addSvgClass(legendShape, (this.chart.highlightMode === 'None' && this.chart.legendSettings.enableHighlight && (!this.chart.selectionModule || this.chart.selectionModule.selectedDataIndexes.length === 0)) ? className : this.unselected);\n                    this.removeSvgClass(legendShape, className);\n                    if (this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor)) {\n                        legendShape.setAttribute('stroke', this.control.visibleSeries[series].interior);\n                        if (this.chart.highlightPattern === 'None') {\n                            legendShape.setAttribute('fill', this.control.visibleSeries[series].interior);\n                        }\n                    }\n                }\n                else {\n                    this.removeSvgClass(legendShape, this.unselected);\n                    if (!isNullOrUndefined(this.chart.highlightColor) && this.chart.highlightColor !== '') {\n                        legendShape.setAttribute('stroke', this.control.visibleSeries[series].interior);\n                        if (this.chart.highlightPattern === 'None') {\n                            legendShape.setAttribute('fill', this.control.visibleSeries[series].interior);\n                        }\n                    }\n                    if ((elementClassName === '' && parentClassName === '') || elementClassName.trim() === 'EJ2-Trackball') {\n                        this.removeSvgClass(legendShape, className);\n                    }\n                    else {\n                        this.addSvgClass(legendShape, className);\n                        if (className.indexOf('highlight') > 0 && this.chart.highlightColor !== '' && this.chart.highlightColor !== 'transparent' && !isNullOrUndefined(this.chart.highlightColor)) {\n                            legendShape.setAttribute('stroke', this.chart.highlightColor);\n                            if (this.styleId.indexOf('highlight') > 0 && this.chart.highlightPattern === 'None') {\n                                legendShape.setAttribute('fill', this.chart.highlightColor);\n                            }\n                        }\n                    }\n                }\n                var legendItemsId = void 0;\n                if (this.rangeColorMappingEnabled()) {\n                    for (var i = 0; i < this.chart.rangeColorSettings.length; i++) {\n                        legendItemsId = document.getElementById(this.chart.element.id + '_chart_legend_shape_' + i);\n                        if (legendShape !== legendItemsId) {\n                            this.addSvgClass(legendItemsId, this.unselected);\n                            this.removeSvgClass(legendItemsId, className);\n                        }\n                        else if (isLegend === true) {\n                            this.addSvgClass(legendItemsId, className);\n                        }\n                        if (elementClassName.indexOf(className) === -1 && isLegend === false) {\n                            this.removeSvgClass(legendItemsId, this.unselected);\n                        }\n                    }\n                }\n                if (isLegend && parentClassName.indexOf(className) > -1) {\n                    this.addSvgClass(legendShape, className);\n                }\n            }\n        }\n    };\n    /**\n     * Applies styles to the specified elements.\n     *\n     * @param {Element[]} elements - The elements to which styles will be applied.\n     * @returns {void}\n     */\n    Selection.prototype.applyStyles = function (elements) {\n        for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n            var element = elements_1[_i];\n            if (element) {\n                this.removeSvgClass(element.parentNode, this.unselected);\n                this.removeSvgClass(element, this.unselected);\n                if (this.chart.series[0].pointColorMapping === 'fill' || this.rangeColorMappingEnabled()) {\n                    var className = this.getSelectionClass(element.id);\n                    var index = className.indexOf('highlight') > -1 ? parseInt(className.split(this.chart.element.id + '_ej2_chart_highlight_series_')[1], 10) : parseInt(className.split(this.chart.element.id + '_ej2_chart_selection_series_')[1], 10);\n                    var patternName = this.styleId.indexOf('highlight') > 0 ? this.chart.highlightPattern : this.chart.selectionPattern;\n                    var pattern = void 0;\n                    if (className.indexOf('highlight') > -1 || className.indexOf('selection') > -1) {\n                        pattern = document.getElementById(this.chart.element.id + '_' + patternName + '_' + 'Selection' + '_' + index);\n                    }\n                    if (element.id.indexOf('legend') === -1 && element.id.indexOf('Text') === -1 && element.id.indexOf('TextShape') === -1 && element.id.indexOf('Group') === -1 && pattern != null) {\n                        for (var i = 1; i < pattern.children.length; i++) {\n                            pattern.children[i].setAttribute('fill', element.getAttribute('fill'));\n                            pattern.children[i].setAttribute('stroke', element.getAttribute('fill'));\n                        }\n                    }\n                }\n                this.addSvgClass(element, this.getSelectionClass(element.id));\n                if (element.id.indexOf('Group') > 0) {\n                    var seriesIndex = this.indexFinder(element.id);\n                    for (var i = 0; i < element.children.length; i++) {\n                        if (element.children[i].nodeName !== 'defs') {\n                            this.stopElementAnimation(element.children[i], seriesIndex.series);\n                        }\n                    }\n                }\n                if (this.styleId.indexOf('highlight') > 0 && this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor) && this.chart.highlightPattern === 'None' && this.chart.highlightColor !== 'transparent') {\n                    if (element.id.indexOf('Group') > 0) {\n                        for (var i = 0; i < element.children.length; i++) {\n                            element.children[i].setAttribute('fill', (element.id.indexOf('Text') > -1\n                                || element.id.indexOf('TextShape') > -1) ? element.children[i].getAttribute('fill')\n                                : this.chart.highlightColor);\n                        }\n                    }\n                    else {\n                        element.setAttribute('fill', (element.id.indexOf('Text') > -1\n                            || element.id.indexOf('TextShape') > -1) ? element.getAttribute('fill')\n                            : this.chart.highlightColor);\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * Gets the CSS class for selection based on the provided identifier.\n     *\n     * @param {string} id - The identifier used to determine the selection class.\n     * @returns {string} - The CSS class for selection.\n     */\n    Selection.prototype.getSelectionClass = function (id) {\n        return this.generateStyle(this.control.visibleSeries[this.indexFinder(id).series]);\n    };\n    /**\n     * Removes styles from the provided elements.\n     *\n     * @param {Element[]} elements - The elements from which styles will be removed.\n     * @returns {void}\n     */\n    Selection.prototype.removeStyles = function (elements) {\n        for (var _i = 0, elements_2 = elements; _i < elements_2.length; _i++) {\n            var element = elements_2[_i];\n            if (element) {\n                this.removeSvgClass(element, this.getSelectionClass(element.id));\n                if (this.chart.highlightPattern === 'None' && this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor) && this.chart.highlightColor !== 'transparent') {\n                    if (element.id.indexOf('Group') > 0) {\n                        for (var i = 0; i < element.children.length; i++) {\n                            element.children[i].setAttribute('fill', (element.id.indexOf('Text') > -1\n                                || element.id.indexOf('TextShape') > -1) ? element.children[i].getAttribute('fill')\n                                : this.control.visibleSeries[this.indexFinder(element.id).series].interior);\n                        }\n                    }\n                    else {\n                        element.setAttribute('fill', (element.id.indexOf('Text') > -1\n                            || element.id.indexOf('TextShape') > -1) ? element.getAttribute('fill')\n                            : this.control.visibleSeries[this.indexFinder(element.id).series].interior);\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * Adds or removes an index from the provided array of indexes.\n     *\n     * @param {Index[]} indexes - The array of indexes.\n     * @param {Index} index - The index to add or remove.\n     * @param {boolean} [isAdd] - Optional parameter to specify whether to add or remove the index. Defaults to true (add).\n     * @returns {void}\n     */\n    Selection.prototype.addOrRemoveIndex = function (indexes, index, isAdd) {\n        for (var i = 0; i < indexes.length; i++) {\n            if (this.toEquals(indexes[i], index, this.isSeriesMode)) {\n                indexes.splice(i, 1);\n                i--;\n            }\n        }\n        if (isAdd) {\n            indexes.push(index);\n        }\n    };\n    /**\n     * Checks if two Index objects are equal.\n     *\n     * @param {Index} first - The first Index object.\n     * @param {Index} second - The second Index object.\n     * @param {boolean} checkSeriesOnly - Specifies whether to check series properties only.\n     * @returns {boolean} - True if the two Index objects are equal, otherwise false.\n     */\n    Selection.prototype.toEquals = function (first, second, checkSeriesOnly) {\n        return ((first.series === second.series || (this.currentMode === 'Cluster' && !checkSeriesOnly))\n            && (checkSeriesOnly || (first.point === second.point)));\n    };\n    /**\n     * Redraws the selection or highlight on the chart.\n     *\n     * @param {Chart} chart - The chart instance.\n     * @param {SelectionMode | HighlightMode} oldMode - The previous selection or highlight mode.\n     * @param {boolean} chartRedraw - Specifies whether to redraw the entire chart.\n     * @returns {void}\n     */\n    Selection.prototype.redrawSelection = function (chart, oldMode, chartRedraw) {\n        this.isSeriesMode = oldMode === 'Series';\n        if (!isNullOrUndefined(oldMode)) {\n            if (oldMode.indexOf('Drag') !== -1 || oldMode === 'Lasso' || chartRedraw) {\n                chart.isRedrawSelection = false;\n            }\n            else {\n                chart.isRedrawSelection = true;\n            }\n        }\n        var selectedDataIndexes = extend([], this.selectedDataIndexes, null, true);\n        var highlightDataIndexes = extend([], this.highlightDataIndexes, null, true);\n        if (this.styleId.indexOf('highlight') > 0 && highlightDataIndexes.length > 0) {\n            this.removeSelectedElements(chart, this.highlightDataIndexes, chart.series);\n            selectedDataIndexes = highlightDataIndexes;\n        }\n        else {\n            this.removeSelectedElements(chart, this.selectedDataIndexes, chart.series);\n        }\n        this.blurEffect(chart.element.id, chart.visibleSeries, false);\n        this.selectDataIndex(chart, selectedDataIndexes);\n    };\n    /**\n     * Handles selection on legend item click.\n     *\n     * @param {Chart} chart - The chart instance.\n     * @param {number} series - The index of the series.\n     * @param {Element} targetElement - The target element clicked.\n     * @param {string} eventType - The type of event triggered.\n     * @returns {void}\n     */\n    Selection.prototype.legendSelection = function (chart, series, targetElement, eventType) {\n        if (eventType === 'mousemove') {\n            if (targetElement.id.indexOf('text') > 1) {\n                targetElement = getElement(targetElement.id.replace('text', 'shape'));\n            }\n            if (targetElement.id.indexOf('marker') > 1) {\n                targetElement = getElement(targetElement.id.replace('_marker', ''));\n            }\n            if (targetElement.id.indexOf('g') > 1) {\n                targetElement = getElement(targetElement.id.replace('_g_', '_shape_'));\n            }\n            if (targetElement.hasAttribute('class') && (targetElement.getAttribute('class').indexOf('highlight') > -1 ||\n                targetElement.getAttribute('class').indexOf('selection') > -1)) {\n                return;\n            }\n            this.currentMode = this.chart.highlightMode;\n        }\n        var isPreSelected = this.isAlreadySelected(targetElement, eventType);\n        if (isPreSelected) {\n            var seriesStyle = this.generateStyle(chart.visibleSeries[series]);\n            var selectedElements = (document.querySelectorAll('.' + seriesStyle));\n            this.isSeriesMode = this.currentMode === 'Series';\n            var isBlurEffectNeeded = true;\n            if (selectedElements.length > 0) {\n                this.removeSelection(chart, series, selectedElements, seriesStyle, isBlurEffectNeeded);\n            }\n            else {\n                for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n                    var element = _a[_i];\n                    if (element.index !== series && !chart.isMultiSelect) {\n                        seriesStyle = this.generateStyle(chart.visibleSeries[element.index]);\n                        selectedElements = document.querySelectorAll('.' + seriesStyle);\n                        this.removeSelection(chart, series, selectedElements, seriesStyle, isBlurEffectNeeded);\n                    }\n                }\n                var seriesElements = [];\n                if (this.rangeColorMappingEnabled()) {\n                    for (var i = 0, a = chart.visibleSeries[0].seriesElement.children; i < a.length; i++) {\n                        var point = a[i];\n                        if (targetElement.getAttribute('fill') === point.getAttribute('fill')) {\n                            if (chart.visibleSeries[0].marker.dataLabel.visible) {\n                                var pointIndex = this.indexFinder(point.id).point;\n                                if (!isNaN(pointIndex) && pointIndex >= 0) {\n                                    var dataLabel = document.getElementById(this.chart.element.id + \"_Series_0_Point_\" + pointIndex + \"_Text_0\");\n                                    var dataLabelBorder = document.getElementById(this.chart.element.id + \"_Series_0_Point_\" + pointIndex + \"_TextShape_0\");\n                                    if (dataLabel) {\n                                        seriesElements.push(dataLabel);\n                                    }\n                                    if (dataLabelBorder) {\n                                        seriesElements.push(dataLabelBorder);\n                                    }\n                                }\n                            }\n                            seriesElements.push(point);\n                        }\n                    }\n                    for (var _b = 0, seriesElements_1 = seriesElements; _b < seriesElements_1.length; _b++) {\n                        var element = seriesElements_1[_b];\n                        if (isNullOrUndefined(element)) {\n                            return;\n                        }\n                        this.checkSelectionElements(element, seriesStyle, false, true, series);\n                    }\n                }\n                else {\n                    if (chart.visibleSeries[series].visible) {\n                        seriesElements = this.getSeriesElements(chart.visibleSeries[series]);\n                        for (var _c = 0, seriesElements_2 = seriesElements; _c < seriesElements_2.length; _c++) {\n                            var seriesElement = seriesElements_2[_c];\n                            if (isNullOrUndefined(seriesElement)) {\n                                return;\n                            }\n                            this.checkSelectionElements(seriesElement, seriesStyle, false, true, series);\n                        }\n                    }\n                }\n                this.isSeriesMode = true;\n                this.selection(chart, new Index(series, NaN), seriesElements);\n                this.isSeriesMode = chart.selectionMode === 'Series';\n                this.blurEffect(chart.element.id, chart.visibleSeries, true, series);\n            }\n        }\n    };\n    /**\n     * Checks if range color mapping is enabled for the chart.\n     *\n     * @returns {boolean} - Returns true if range color mapping is enabled, otherwise false.\n     */\n    Selection.prototype.rangeColorMappingEnabled = function () {\n        if ((this.chart.rangeColorSettings && this.chart.rangeColorSettings.length > 0 && this.chart.visibleSeries.length === 1 &&\n            this.chart.rangeColorSettings[0].colors.length > 0 &&\n            (this.chart.series[0].type === 'Column' || this.chart.series[0].type === 'Bar' ||\n                this.chart.series[0].type === 'Scatter' || this.chart.series[0].type === 'Bubble'))) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    Selection.prototype.removeSelection = function (chart, series, selectedElements, seriesStyle, isBlurEffectNeeded) {\n        if (selectedElements.length > 0) {\n            var elements = [];\n            for (var i = 0; i < selectedElements.length; i++) {\n                elements.push(selectedElements[i]);\n            }\n            this.removeStyles(elements);\n            this.isSeriesMode = true;\n            this.addOrRemoveIndex(this.selectedDataIndexes, new Index(series, NaN));\n            for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n                var value = _a[_i];\n                seriesStyle = this.generateStyle(value);\n                if (document.querySelectorAll('.' + seriesStyle).length > 0) {\n                    for (var _b = 0, elements_3 = elements; _b < elements_3.length; _b++) {\n                        var element = elements_3[_b];\n                        this.checkSelectionElements(element, seriesStyle, true, true, series);\n                    }\n                    isBlurEffectNeeded = false;\n                    break;\n                }\n            }\n            if (isBlurEffectNeeded) {\n                this.isSeriesMode = chart.selectionMode === 'Series';\n                this.blurEffect(chart.element.id, chart.visibleSeries);\n            }\n        }\n    };\n    /**\n     * Retrieves the SVG elements associated with a particular series in the chart.\n     *\n     * @param {SeriesModel} series - The series for which to retrieve the SVG elements.\n     * @returns {Element[]} - An array of SVG elements representing the series.\n     */\n    Selection.prototype.getSeriesElements = function (series) {\n        var seriesElements = [series.seriesElement];\n        if (series.marker.visible && series.type !== 'Scatter' && series.type !== 'Bubble' && !series.isRectSeries) {\n            seriesElements.push(series.symbolElement);\n        }\n        else if (series.marker.visible && series.isRectSeries) {\n            seriesElements.push(series.symbolElement);\n        }\n        if (series.marker.dataLabel.visible) {\n            seriesElements.push(series.textElement);\n            seriesElements.push(series.shapeElement);\n        }\n        return seriesElements;\n    };\n    /**\n     * Finds the index associated with a particular element ID.\n     *\n     * @param {string} id - The ID of the element to find the index for.\n     * @returns {Index} - The index associated with the element ID.\n     */\n    Selection.prototype.indexFinder = function (id) {\n        var ids = ['NaN', 'NaN'];\n        if (id.indexOf('SeriesGroup') > -1) {\n            ids = id.split('SeriesGroup');\n            ids[0] = ids[1];\n        }\n        else if (id.indexOf('SymbolGroup') > -1) {\n            ids = id.split('SymbolGroup');\n            ids[0] = ids[1];\n        }\n        else if (id.indexOf('_Point_') > -1) {\n            ids = id.split('_Series_')[1].split('_Point_');\n        }\n        else if (id.indexOf('_border_') > -1) {\n            ids[0] = id.split('_border_')[1];\n        }\n        else if (id.indexOf('_Series_') > -1) {\n            ids[0] = id.split('_Series_')[1];\n        }\n        else if (id.indexOf('_chart_legend_shape_') > -1) {\n            ids = id.split('_chart_legend_shape_');\n            ids[0] = ids[1];\n        }\n        else if (id.indexOf('TextGroup') > -1) {\n            ids = id.split('TextGroup');\n            ids[0] = ids[1];\n        }\n        else if (id.indexOf('ShapeGroup') > -1) {\n            ids = id.split('ShapeGroup');\n            ids[0] = ids[1];\n        }\n        return new Index(parseInt(ids[0], 10), parseInt(ids[1], 10));\n    };\n    /**\n     * Calculates the elements selected by dragging a rectangle on the chart.\n     *\n     * @param {Chart} chart - The chart instance.\n     * @param {Rect} dragRect - The rectangle representing the selection area.\n     * @param {boolean} isClose - Flag indicating whether the selection should be close.\n     * @returns {void}\n     */\n    Selection.prototype.calculateDragSelectedElements = function (chart, dragRect, isClose) {\n        this.removeSelectedElements(chart, this.selectedDataIndexes, chart.series);\n        var isLasso = chart.selectionMode === 'Lasso';\n        var rect = new Rect(dragRect.x, dragRect.y, dragRect.width, dragRect.height);\n        var axisOffset = new ChartLocation(chart.chartAxisLayoutPanel.seriesClipRect.x, chart.chartAxisLayoutPanel.seriesClipRect.y);\n        this.removeOffset(rect, axisOffset);\n        var points;\n        var index;\n        var selectedPointValues = [];\n        var selectedSeriesValues = [];\n        this.isSeriesMode = false;\n        var isDragResize = (chart.allowMultiSelection) && (this.rectGrabbing || this.resizing);\n        this.rectPoints = this.dragRectArray[isDragResize ? this.targetIndex : this.count] =\n            new Rect(dragRect.x, dragRect.y, dragRect.width, dragRect.height);\n        if (dragRect.width && dragRect.height && !isClose) {\n            var rt = new Rect(dragRect.x, dragRect.y, dragRect.width, dragRect.height);\n            this.removeOffset(rt, axisOffset);\n            this.filterArray[isDragResize ? this.targetIndex : this.count] = rt;\n        }\n        var _loop_1 = function (series) {\n            if (series.visible) {\n                points = series.points;\n                selectedPointValues = [];\n                var xAxisOffset_1;\n                var yAxisOffset_1;\n                if ((chart.isTransposed || series.type.indexOf('Bar') !== -1) &&\n                    !(chart.isTransposed && series.type.indexOf('Bar') !== -1)) {\n                    xAxisOffset_1 = series.xAxis.rect.y - axisOffset.y;\n                    yAxisOffset_1 = series.yAxis.rect.x - axisOffset.x;\n                }\n                else {\n                    xAxisOffset_1 = series.xAxis.rect.x - axisOffset.x;\n                    yAxisOffset_1 = series.yAxis.rect.y - axisOffset.y;\n                }\n                for (var j = 0; j < points.length; j++) {\n                    var yValue = (series.type !== 'RangeArea' || series.type.indexOf('SplineRangeArea') > -1 || series.type.indexOf('RangeStepArea') > -1) ? points[j].yValue :\n                        points[j].regions[0].y;\n                    var isCurrentPoint = void 0;\n                    var selectedPointX = points[j].xValue;\n                    if (chart.primaryXAxis.valueType === 'Category') {\n                        selectedPointX = points[j].x.toLocaleString();\n                    }\n                    else if (chart.primaryXAxis.valueType === 'DateTime') {\n                        selectedPointX = new Date(points[j].xValue);\n                    }\n                    if (series.type === 'BoxAndWhisker') {\n                        isCurrentPoint = points[j].regions.some(function (region) {\n                            return withInBounds(region.x + xAxisOffset_1, region.y + yAxisOffset_1, rect);\n                        });\n                    }\n                    else {\n                        if (chart.selectionMode === 'Lasso') {\n                            isCurrentPoint = points[j].isSelect;\n                        }\n                        else {\n                            isCurrentPoint = (chart.allowMultiSelection) ?\n                                this_1.isPointSelect(points[j], xAxisOffset_1, yAxisOffset_1, this_1.filterArray) :\n                                points[j].symbolLocations.some(function (location) {\n                                    return location && withInBounds(location.x + xAxisOffset_1, location.y + yAxisOffset_1, rect);\n                                });\n                        }\n                    }\n                    if (isCurrentPoint && series.category !== 'Indicator') {\n                        index = new Index(series.index, points[j].index);\n                        this_1.selection(chart, index, this_1.findElements(chart, series, index, '', !series.isRectSeries ? series.marker.visible : false));\n                        selectedPointValues.push({ x: selectedPointX, y: yValue });\n                    }\n                    if (isCurrentPoint && (series.type === 'RangeArea' || series.type === 'SplineRangeArea' || series.type === 'RangeStepArea')) {\n                        selectedPointValues.push({ x: selectedPointX, y: points[j].regions[0].y });\n                    }\n                }\n                selectedSeriesValues.push(selectedPointValues);\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n            var series = _a[_i];\n            _loop_1(series);\n        }\n        this.blurEffect(chart.element.id, chart.visibleSeries);\n        var x = isLasso ? chart.mouseDownX : (dragRect.x + dragRect.width);\n        var y = isLasso ? chart.mouseDownY : dragRect.y;\n        if (!isClose) {\n            this.createCloseButton(x, y);\n        }\n        var args = {\n            name: dragComplete,\n            selectedDataValues: selectedSeriesValues,\n            cancel: false\n        };\n        chart.trigger(dragComplete, args);\n    };\n    Selection.prototype.removeOffset = function (rect, clip) {\n        rect.x -= clip.x;\n        rect.y -= clip.y;\n    };\n    Selection.prototype.isPointSelect = function (points, xAxisOffset, yAxisOffset, rectCollection) {\n        var location = points.symbolLocations[0];\n        for (var _i = 0, rectCollection_1 = rectCollection; _i < rectCollection_1.length; _i++) {\n            var rect = rectCollection_1[_i];\n            if (rect && location && withInBounds(location.x + xAxisOffset, location.y + yAxisOffset, rect)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * Draws the dragging rectangle on the chart.\n     *\n     * @param {Chart} chart - The chart instance.\n     * @param {Rect} dragRect - The rectangle representing the dragging area.\n     * @returns {void}\n     */\n    Selection.prototype.drawDraggingRect = function (chart, dragRect) {\n        var cartesianLayout = chart.chartAxisLayoutPanel.seriesClipRect;\n        var border = chart.chartArea.border.width;\n        var rectFill = chart.themeStyle.selectionRectFill;\n        var rectStroke = chart.themeStyle.selectionRectStroke;\n        var isLasso = chart.selectionMode === 'Lasso';\n        if (this.isdrawRect) {\n            cartesianLayout.x = cartesianLayout.x - border / 2;\n            cartesianLayout.y = cartesianLayout.y - border / 2;\n            cartesianLayout.width = cartesianLayout.width + border;\n            cartesianLayout.height = cartesianLayout.height + border;\n            this.isdrawRect = false;\n        }\n        switch (chart.selectionMode) {\n            case 'DragX':\n                dragRect.y = cartesianLayout.y;\n                dragRect.height = cartesianLayout.height;\n                break;\n            case 'DragY':\n                dragRect.x = cartesianLayout.x;\n                dragRect.width = cartesianLayout.width;\n                break;\n        }\n        if ((dragRect.width < 5 || dragRect.height < 5) && !isLasso) {\n            return null;\n        }\n        var isDragMode = chart.selectionMode.indexOf('Drag') > -1 || chart.selectionMode === 'Lasso';\n        if ((chart.allowMultiSelection) && isDragMode) {\n            var element = void 0;\n            var dragGroup = void 0;\n            var multiGroup = getElement(this.multiRectGroup);\n            if (!multiGroup) {\n                multiGroup = chart.svgRenderer.createGroup({ id: this.multiRectGroup });\n                chart.svgObject.appendChild(multiGroup);\n            }\n            if (this.rectGrabbing || this.resizing) {\n                var rectElement = getElement(this.draggedRect + this.targetIndex);\n                if (rectElement.nextSibling) {\n                    remove(rectElement.nextSibling);\n                }\n                this.setAttributes(rectElement, dragRect);\n            }\n            else if (!getElement(this.draggedRectGroup + this.count)) {\n                dragGroup = chart.svgRenderer.createGroup({ id: this.draggedRectGroup + this.count });\n                var svgElement = document.getElementById(chart.element.id + '_series_svg');\n                if (chart.enableCanvas) {\n                    svgElement.appendChild(dragGroup);\n                }\n                else {\n                    multiGroup.appendChild(dragGroup);\n                }\n                // chart.enableCanvas ? svgElement.appendChild(dragGroup) : multiGroup.appendChild(dragGroup);\n            }\n            if (!(chart.selectionMode === 'Lasso')) {\n                element = chart.svgRenderer.drawRectangle(new RectOption(this.draggedRect + this.count, rectFill, { color: rectStroke, width: 1 }, 1, dragRect, 0, 0, '', chart.theme.indexOf('Fluent2') < 1 ? '3' : ''));\n                element.style.cursor = 'move';\n            }\n            else {\n                element = chart.svgRenderer.drawPath(new PathOption(this.lassoPath + this.count, rectFill, 3, rectStroke, 1, '', this.path));\n            }\n            if (!dragGroup && !this.rectGrabbing && !this.resizing) {\n                getElement(this.draggedRectGroup + this.count).appendChild(element);\n            }\n            else if (!this.rectGrabbing && !this.resizing) {\n                dragGroup.appendChild(element);\n            }\n        }\n        else {\n            var element = isLasso ?\n                getElement(this.lassoPath) : getElement(this.draggedRect);\n            if (this.closeIcon) {\n                removeElement(this.closeIconId);\n            }\n            if (element) {\n                if (isLasso) {\n                    element.setAttribute('d', this.path);\n                }\n                else {\n                    this.setAttributes(element, dragRect);\n                }\n            }\n            else {\n                var dragGroup = chart.svgRenderer.createGroup({ id: this.draggedRectGroup });\n                var svgElement = document.getElementById(chart.element.id + '_series_svg');\n                if (chart.enableCanvas) {\n                    svgElement.appendChild(dragGroup);\n                }\n                else {\n                    chart.svgObject.appendChild(dragGroup);\n                }\n                // chart.enableCanvas ? svgElement.appendChild(dragGroup) : chart.svgObject.appendChild(dragGroup);\n                if (!(chart.selectionMode === 'Lasso')) {\n                    element = chart.svgRenderer.drawRectangle(new RectOption(this.draggedRect, rectFill, { color: rectStroke, width: 1 }, 1, dragRect, 0, 0, '', chart.theme.indexOf('Fluent2') < 1 ? '3' : ''));\n                }\n                else {\n                    element = chart.svgRenderer.drawPath(new PathOption(this.lassoPath, rectFill, 3, rectStroke, 1, '', this.path));\n                }\n                //element.setAttribute('style', 'cursor:move;');\n                dragGroup.appendChild(element);\n            }\n        }\n    };\n    /**\n     * Retrieves the index of a particular item based on its identifier.\n     *\n     * @param {string} id - The identifier of the item.\n     * @returns {number} - The index of the item, or -1 if not found.\n     */\n    Selection.prototype.getIndex = function (id) {\n        var i;\n        for (i = id.length - 1; i > 0; i--) {\n            var x = Number(id[i]);\n            if (!isNaN(x)) {\n                continue;\n            }\n            else {\n                break;\n            }\n        }\n        var index = +id.substr(i + 1, id.length - 1);\n        return index;\n    };\n    Selection.prototype.createCloseButton = function (x, y) {\n        var isMultiDrag = this.chart.allowMultiSelection;\n        var circleStroke = this.chart.themeStyle.selectionCircleStroke;\n        var isDrag = this.rectGrabbing || this.resizing;\n        var closeIcon = this.chart.svgRenderer.createGroup({\n            id: this.closeIconId + (isMultiDrag ? (isDrag ? this.targetIndex : this.count) : ''),\n            style: 'cursor:pointer; visibility: visible;'\n        });\n        closeIcon.appendChild(this.chart.svgRenderer.drawCircle(new CircleOption(this.closeIconId + '_circle' + (isMultiDrag ? (isDrag ? this.targetIndex : this.count) : ''), '#FFFFFF', { color: circleStroke, width: 1 }, 1, x, y, 10)));\n        var direction = 'M ' + (x - 4) + ' ' + (y - 4) + ' L ' + (x + 4) + ' ' + (y + 4) + ' M ' + (x - 4) + ' ' + (y + 4) +\n            ' L ' + (x + 4) + ' ' + (y - 4);\n        closeIcon.appendChild(this.chart.svgRenderer.drawPath({\n            id: this.closeIconId + '_cross' +\n                (isMultiDrag ? (isDrag ? this.targetIndex : this.count) : ''), d: direction,\n            stroke: circleStroke, 'stroke-width': 2, fill: circleStroke\n        }));\n        this.closeIcon = closeIcon;\n        var pathElement = getElement(this.draggedRectGroup + (isMultiDrag ? (isDrag ? this.targetIndex : this.count) : ''));\n        if (pathElement) {\n            pathElement.appendChild(closeIcon);\n        }\n    };\n    /**\n     * Method to remove dragged element.\n     *\n     * @returns {void}\n     * @private\n     */\n    Selection.prototype.removeDraggedElements = function (chart, targetElement, eventType) {\n        if ((targetElement.id && targetElement.id.indexOf(this.closeIconId) > -1) && (eventType.indexOf('move') === -1)) {\n            var isSelectedvalues = true;\n            if ((chart.allowMultiSelection)) {\n                var index = this.getIndex(targetElement.id);\n                var multiRectGroupElement = getElement(this.multiRectGroup);\n                remove(getElement(this.draggedRectGroup + index));\n                this.dragRectArray[index] = null;\n                this.filterArray[index] = null;\n                this.totalSelectedPoints[index] = null;\n                if (multiRectGroupElement && multiRectGroupElement.childElementCount === 0) {\n                    removeElement(multiRectGroupElement);\n                    this.dragRectArray = [];\n                    this.filterArray = [];\n                    this.totalSelectedPoints = [];\n                }\n                if (this.currentMode === 'Lasso') {\n                    if (this.multiDataIndexes[index] != null) {\n                        for (var i = 0; i < this.multiDataIndexes[index].length; i++) {\n                            this.multiDataIndexes[index][i].isSelect = false;\n                        }\n                    }\n                    this.multiDataIndexes[index] = null;\n                    for (var j = 0; j < this.multiDataIndexes.length; j++) {\n                        if (this.multiDataIndexes[j] != null) {\n                            isSelectedvalues = false;\n                            for (var k = 0; k < this.multiDataIndexes[j].length; k++) {\n                                this.multiDataIndexes[j][k].isSelect = true;\n                            }\n                        }\n                    }\n                    this.calculateDragSelectedElements(chart, this.dragRect, true);\n                }\n                else if (this.filterArray.length) {\n                    for (var i = 0; i < this.filterArray.length; i++) {\n                        if (this.filterArray[i]) {\n                            isSelectedvalues = false;\n                            this.calculateDragSelectedElements(chart, this.filterArray[i], true);\n                        }\n                    }\n                }\n                else {\n                    this.calculateDragSelectedElements(chart, new Rect(0, 0, 0, 0), true);\n                }\n            }\n            else {\n                remove(getElement(this.draggedRectGroup));\n                this.removeSelectedElements(chart, this.selectedDataIndexes, chart.series);\n            }\n            this.blurEffect(chart.element.id, chart.visibleSeries);\n            this.changeCursorStyle(false, chart.svgObject, 'auto');\n            if (!(chart.allowMultiSelection) || isSelectedvalues) {\n                this.rectPoints = null;\n            }\n        }\n    };\n    /**\n     * Updates the selection rectangle during resizing.\n     *\n     * @param {Chart} chart - The chart instance.\n     * @param {ChartLocation} location - The location of the resizing action.\n     * @param {boolean} [tapped=false] - Indicates whether the resizing action was initiated by tapping.\n     * @param {Element} [target] - The target element of the resizing action.\n     * @returns {void}\n     */\n    Selection.prototype.resizingSelectionRect = function (chart, location, tapped, target) {\n        var rect;\n        if (((chart.allowMultiSelection) && (target.id.indexOf('_ej2_drag_rect') > -1)) ||\n            this.dragRectArray[this.targetIndex]) {\n            if (target.id.indexOf('_ej2_drag_rect') > -1) {\n                this.targetIndex = this.getIndex(target.id);\n            }\n            var r = this.dragRectArray[this.targetIndex];\n            rect = new Rect(r.x, r.y, r.width, r.height);\n        }\n        if (!(chart.allowMultiSelection)) {\n            rect = new Rect(this.rectPoints.x, this.rectPoints.y, this.rectPoints.width, this.rectPoints.height);\n        }\n        if (rect) {\n            var resize = this.findResizeMode(chart.svgObject, rect, location);\n            if (this.resizing) {\n                rect = getDraggedRectLocation(rect.x, rect.y, (rect.x + rect.width), (rect.y + rect.height), chart.chartAxisLayoutPanel.seriesClipRect);\n                this.drawDraggingRect(chart, rect);\n                this.dragRect = rect;\n            }\n            if (tapped) {\n                this.resizing = resize;\n            }\n        }\n        else {\n            return;\n        }\n    };\n    Selection.prototype.findResizeMode = function (chartSvgObject, rect, location) {\n        var cursorStyle = 'se-resize';\n        var resize = false;\n        if (!this.resizing) {\n            var resizeEdges = [new Rect(rect.x, (rect.y), rect.width - 5, 5),\n                new Rect((rect.x), rect.y, 5, rect.height),\n                new Rect(rect.x, (rect.y + rect.height - 5), rect.width - 5, 5),\n                new Rect((rect.x + rect.width - 5), rect.y + 5, 5, rect.height - 15),\n                new Rect((rect.x + rect.width - 10), (rect.y + rect.height - 10), 10, 10)]; //corner\n            for (var i = 0; i < resizeEdges.length; i++) {\n                if (withInBounds(location.x, location.y, resizeEdges[i])) {\n                    cursorStyle = (i === 4) ? cursorStyle : (i % 2 === 0) ? 'ns-resize' : 'ew-resize';\n                    resize = true;\n                    this.resizeMode = i;\n                    break;\n                }\n            }\n        }\n        else {\n            var x = rect.x;\n            var y = rect.y;\n            var width = (location.x - x);\n            var height = (location.y - y);\n            switch (this.resizeMode) {\n                case 0:\n                    height = Math.abs((rect.height + rect.y) - location.y);\n                    rect.y = Math.min((rect.height + rect.y), location.y);\n                    rect.height = height;\n                    break;\n                case 1:\n                    width = Math.abs((rect.width + rect.x) - location.x);\n                    rect.x = Math.min((rect.width + rect.x), location.x);\n                    rect.width = width;\n                    break;\n                case 2:\n                    rect.height = Math.abs(height);\n                    rect.y = Math.min(location.y, y);\n                    break;\n                case 3:\n                    rect.width = Math.abs(width);\n                    rect.x = Math.min(location.x, x);\n                    break;\n                case 4:\n                    rect.width = Math.abs(width);\n                    rect.height = Math.abs(height);\n                    rect.x = Math.min(location.x, x);\n                    rect.y = Math.min(location.y, y);\n                    break;\n            }\n        }\n        if (this.currentMode !== 'Lasso') {\n            this.changeCursorStyle(resize, getElement((this.chart.allowMultiSelection) ? this.draggedRect +\n                this.targetIndex : this.draggedRect), cursorStyle);\n        }\n        this.changeCursorStyle(resize, chartSvgObject, cursorStyle);\n        return resize;\n    };\n    Selection.prototype.changeCursorStyle = function (isResize, rectelement, cursorStyle) {\n        cursorStyle = isResize ? cursorStyle : (this.control.svgObject === rectelement) ? 'auto' : 'move';\n        if (rectelement) {\n            rectelement.style.cursor = cursorStyle;\n        }\n    };\n    Selection.prototype.removeSelectedElements = function (chart, index, seriesCollection) {\n        index = chart.isRedrawSelection ? index : index.splice(0, index.length); // No need to remove selected indexes while redrawing\n        var seriesElements;\n        for (var _i = 0, seriesCollection_1 = seriesCollection; _i < seriesCollection_1.length; _i++) {\n            var series = seriesCollection_1[_i];\n            if (series.visible) {\n                seriesElements = this.getSeriesElements(series);\n                this.removeStyles(seriesElements);\n                for (var _a = 0, seriesElements_3 = seriesElements; _a < seriesElements_3.length; _a++) {\n                    var seriesElement = seriesElements_3[_a];\n                    this.removeStyles(this.getChildren(seriesElement));\n                }\n            }\n        }\n    };\n    Selection.prototype.setAttributes = function (ele, object) {\n        var keys = Object.keys(object);\n        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n            var key = keys_1[_i];\n            ele.setAttribute(key, object[key]);\n        }\n    };\n    /**\n     * Updates the position of the dragged rectangle.\n     *\n     * @param {Chart} chart - The chart instance.\n     * @param {Rect} grabbedPoint - The rectangle representing the grabbed point.\n     * @param {boolean} [doDrawing=false] - Indicates whether to redraw the dragging rectangle.\n    //  * @param {Element} [target] - The target element related to the dragging action.\n     * @returns {void}\n     */\n    Selection.prototype.draggedRectMoved = function (chart, grabbedPoint, doDrawing) {\n        var rect;\n        if ((this.resizing || this.rectGrabbing) && (chart.allowMultiSelection)) {\n            var r = this.dragRectArray[this.targetIndex];\n            rect = new Rect(r.x, r.y, r.width, r.height);\n        }\n        else {\n            rect = new Rect(this.rectPoints.x, this.rectPoints.y, this.rectPoints.width, this.rectPoints.height);\n        }\n        rect.x -= (grabbedPoint.x - chart.mouseX);\n        rect.y -= (grabbedPoint.y - chart.mouseY);\n        rect = getDraggedRectLocation(rect.x, rect.y, rect.x + rect.width, rect.height + rect.y, chart.chartAxisLayoutPanel.seriesClipRect);\n        if (doDrawing) {\n            this.drawDraggingRect(chart, rect);\n        }\n        else {\n            this.calculateDragSelectedElements(chart, rect);\n        }\n    };\n    Selection.prototype.mouseLeave = function (event) {\n        this.completeSelection(event.target, event.type);\n    };\n    /**\n     * Completes the selection process.\n     *\n     * @param {HTMLElement} target - The target element where the selection is completed.\n     * @param {string} eventType - The type of event that triggered the selection completion.\n     * @returns {void}\n     */\n    Selection.prototype.completeSelection = function (target, eventType) {\n        var chart = this.chart;\n        if (chart.selectionMode === 'None') {\n            return;\n        }\n        this.currentMode = chart.selectionMode;\n        if ((this.dragging || this.resizing) && this.dragRect.width > 5 && this.dragRect.height > 5) {\n            this.calculateDragSelectedElements(chart, this.dragRect);\n        }\n        else if (!(chart.allowMultiSelection) && this.rectGrabbing &&\n            this.rectPoints.width && this.rectPoints.height) {\n            this.draggedRectMoved(chart, this.dragRect);\n        }\n        else if (this.rectGrabbing && this.dragRectArray[this.targetIndex].width && this.dragRectArray[this.targetIndex].height) {\n            this.draggedRectMoved(chart, this.dragRect);\n        }\n        if (chart.selectionMode === 'Lasso' && this.dragging && this.path) {\n            if (this.path.indexOf('L') !== -1) {\n                if (!(chart.allowMultiSelection)) {\n                    getElement(this.lassoPath).setAttribute('d', this.path + 'Z');\n                    this.pointChecking(getElement(this.lassoPath));\n                }\n                else if (getElement(this.lassoPath + this.count)) {\n                    getElement(this.lassoPath + this.count).setAttribute('d', this.path + 'Z');\n                    this.pointChecking(getElement(this.lassoPath + this.count));\n                }\n                if (this.dragging || this.resizing) {\n                    this.calculateDragSelectedElements(chart, this.dragRect);\n                }\n            }\n        }\n        this.dragging = false;\n        this.rectGrabbing = false;\n        this.resizing = false;\n        this.removeDraggedElements(chart, target, eventType);\n    };\n    Selection.prototype.getDragRect = function (chart, seriesClipRect) {\n        return getDraggedRectLocation(chart.mouseDownX, chart.mouseDownY, chart.mouseX, chart.mouseY, seriesClipRect);\n    };\n    /**\n     * Initiates the drag operation.\n     *\n     * @param {Chart} chart - The chart instance where the drag operation is initiated.\n     * @param {Rect} seriesClipRect - The clipping rectangle of the series.\n     * @param {number} mouseDownX - The X-coordinate where the mouse was pressed down.\n     * @param {number} mouseDownY - The Y-coordinate where the mouse was pressed down.\n     * @param {Event} event - The event object associated with the mouse down event.\n     * @returns {void}\n     */\n    Selection.prototype.dragStart = function (chart, seriesClipRect, mouseDownX, mouseDownY, event) {\n        var mode = chart.selectionMode;\n        this.currentMode = chart.selectionMode;\n        this.dragging = (mode.indexOf('Drag') > -1 || mode === 'Lasso') && (chart.isDoubleTap || !chart.isTouch) &&\n            chart.chartAreaType !== 'PolarRadar';\n        var target = event.target;\n        this.path = undefined;\n        if (this.dragging) {\n            this.count = getElement(this.multiRectGroup) ? (this.count + 1) : 0;\n            this.dragRect = new Rect(chart.mouseDownX, chart.mouseDownY, 0, 0);\n            if (chart.mouseDownX < seriesClipRect.x || chart.mouseDownX > (seriesClipRect.x + seriesClipRect.width) ||\n                chart.mouseDownY < seriesClipRect.y || chart.mouseDownY > (seriesClipRect.y + seriesClipRect.height)) {\n                this.dragging = false;\n            }\n        }\n        if (mode === 'Lasso') {\n            for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n                var series = _a[_i];\n                if (series.visible) {\n                    for (var _b = 0, _c = series.points; _b < _c.length; _b++) {\n                        var point = _c[_b];\n                        if (!(chart.allowMultiSelection)) {\n                            point.isSelect = false;\n                        }\n                    }\n                }\n            }\n        }\n        if (!(mode === 'Lasso')) {\n            if (this.rectPoints && !(chart.allowMultiSelection)) {\n                this.dragRect = new Rect(chart.mouseDownX, chart.mouseDownY, 0, 0);\n                this.resizingSelectionRect(chart, new ChartLocation(mouseDownX, mouseDownY), true);\n                this.rectGrabbing = withInBounds(mouseDownX, mouseDownY, this.rectPoints);\n            }\n            if ((chart.allowMultiSelection)) {\n                var index = this.getIndex(target.id);\n                this.targetIndex = this.isDragRect(target.id) ? index : undefined;\n                if (this.dragRectArray.length && this.isDragRect(target.id)) {\n                    this.resizingSelectionRect(chart, new ChartLocation(mouseDownX, mouseDownY), true, target);\n                    this.rectGrabbing = withInBounds(mouseDownX, mouseDownY, this.dragRectArray[index]);\n                }\n            }\n        }\n    };\n    Selection.prototype.isDragRect = function (id) {\n        return id.indexOf('_ej2_drag_rect') > -1;\n    };\n    /**\n     * Handles the mouse move event.\n     *\n     * @param {PointerEvent | TouchEvent} event - The pointer event or touch event associated with the mouse move.\n     * @returns {void}\n     */\n    Selection.prototype.mouseMove = function (event) {\n        var chart = this.chart;\n        var target = event.target;\n        var eventType = event.type;\n        this.highlightChart(target, eventType);\n        if (chart.selectionMode === 'None') {\n            return;\n        }\n        if (eventType === 'touchmove' && (Browser.isIos || Browser.isIos7) && this.dragging && event.preventDefault) {\n            event.preventDefault();\n        }\n        this.selectionAndDrag(chart, target, eventType);\n    };\n    /**\n     * Highlights the specified chart element.\n     *\n     * @param {Element} target - The target element to highlight.\n     * @param {string} eventType - The type of event triggering the highlighting.\n     * @returns {void}\n     */\n    Selection.prototype.highlightChart = function (target, eventType) {\n        if (this.chart.highlightMode !== 'None' || this.chart.legendSettings.enableHighlight) {\n            if (!isNullOrUndefined(target)) {\n                if (target.id.indexOf('_legend_text') > 1) {\n                    target = getElement(target.id.replace('text', 'shape'));\n                }\n                if ((target).hasAttribute('class') && ((target).getAttribute('class').indexOf('highlight') > -1 ||\n                    target.getAttribute('class').indexOf('selection') > -1)) {\n                    return;\n                }\n                this.calculateSelectedElements(target, eventType);\n                if (this.chart.highlightModule.highlightDataIndexes && this.chart.highlightModule.highlightDataIndexes.length > 0 &&\n                    target.id.indexOf('_chart_legend_g_') === -1 && target.id.indexOf('chart_legend_shape') === -1 && target.id.indexOf('_Series_') === -1) {\n                    this.removeLegendHighlightStyles();\n                }\n                else if (this.chart.highlightModule.highlightDataIndexes && this.chart.highlightModule.highlightDataIndexes.length > 0 &&\n                    target.id.indexOf('_chart_legend_') === -1 && target.id.indexOf('_Series_') > -1 && this.chart.tooltip && this.chart.tooltip.enableHighlight && this.chart.highlightMode === 'None') {\n                    this.removeLegendHighlightStyles(true);\n                }\n            }\n            return;\n        }\n    };\n    /**\n     * Handles the selection and dragging functionality for the chart.\n     *\n     * @param {Chart} chart - The chart instance.\n     * @param {Element} target - The target element involved in the selection or dragging action.\n     * @param {string} eventType - The type of event triggering the selection or dragging action.\n     * @returns {void}\n     */\n    Selection.prototype.selectionAndDrag = function (chart, target, eventType) {\n        var insideMoving = withInBounds(chart.mouseX, chart.mouseY, chart.chartAxisLayoutPanel.seriesClipRect);\n        if (insideMoving && !this.chart.enableCanvas) {\n            if (this.rectGrabbing && !this.resizing) {\n                this.draggedRectMoved(chart, this.dragRect, true);\n            }\n            else if (this.dragging && !this.resizing) {\n                if (chart.selectionMode === 'Lasso') {\n                    this.getPath(chart.mouseDownX, chart.mouseDownY, chart.mouseX, chart.mouseY);\n                    this.drawDraggingRect(chart, this.dragRect);\n                }\n                else {\n                    this.dragRect = this.getDragRect(chart, chart.chartAxisLayoutPanel.seriesClipRect);\n                    this.drawDraggingRect(chart, this.dragRect);\n                }\n            }\n            if (this.rectPoints && !(chart.allowMultiSelection)) {\n                this.resizingSelectionRect(chart, new ChartLocation(chart.mouseX, chart.mouseY), null, target);\n            }\n            else if (((chart.allowMultiSelection) && !this.dragging) || this.resizing) {\n                this.resizingSelectionRect(chart, new ChartLocation(chart.mouseX, chart.mouseY), null, target);\n            }\n        }\n        else {\n            this.completeSelection(target, eventType);\n        }\n    };\n    /**\n     * Remove highlighted legend when not focused.\n     * @param {boolean} tooltipHighlight - Specifies whether the tooltip highlighting is enabled.\n     * @private\n     * @returns {void}\n     */\n    Selection.prototype.removeLegendHighlightStyles = function (tooltipHighlight) {\n        this.chart.highlightModule.highlightDataIndexes = [];\n        var elementCollection;\n        for (var i = 0; i < this.chart.visibleSeries.length; i++) {\n            elementCollection = document.getElementsByClassName(this.generateStyle(this.chart.visibleSeries[i]));\n            if (this.selectedDataIndexes.length === 0) {\n                elementCollection = document.getElementsByClassName(this.generateStyle(this.chart.visibleSeries[i]));\n                while (elementCollection.length > 0) {\n                    var element = elementCollection[0];\n                    if (element) {\n                        this.removeSvgClass(element, element.getAttribute('class'));\n                        if (element.id.indexOf('Group') > 0 && !this.chart.visibleSeries[i].isRectSeries) {\n                            var seriesIndex = this.indexFinder(element.id);\n                            for (var j = 0; j < element.children.length; j++) {\n                                if (element.children[j].nodeName !== 'defs') {\n                                    this.highlightAnimation(element.children[j], seriesIndex.series, tooltipHighlight ? 0 : 700, 0.3, !tooltipHighlight);\n                                }\n                            }\n                        }\n                    }\n                }\n                elementCollection = document.getElementsByClassName(this.unselected);\n                while (elementCollection.length > 0) {\n                    var element = elementCollection[0];\n                    if (element) {\n                        this.removeSvgClass(element, element.getAttribute('class'));\n                        if (element.id !== '') {\n                            this.highlightAnimation(element, this.chart.series.length === 1 ? 0 : this.indexFinder(element.id).series, tooltipHighlight ? 0 : 700, 0.3);\n                        }\n                    }\n                }\n            }\n            else {\n                elementCollection = document.getElementsByClassName(this.generateStyle(this.chart.visibleSeries[i]));\n                while (elementCollection.length > 0) {\n                    var element = elementCollection[0];\n                    if (element) {\n                        this.removeSvgClass(element, element.getAttribute('class'));\n                        this.addSvgClass(element, this.unselected);\n                    }\n                }\n            }\n        }\n    };\n    Selection.prototype.getPath = function (startX, startY, endX, endY) {\n        if (this.dragging) {\n            if (this.path) {\n                this.path = this.path + ' L' + endX + ' ' + endY;\n            }\n            else {\n                this.path = 'M ' + startX + ' ' + startY;\n            }\n        }\n    };\n    /**\n     * Performs a highlight animation on the specified HTML element.\n     *\n     * @param {HTMLElement} element - The HTML element to animate.\n     * @param {number} index - The index to find the opacity value of the series.\n     * @param {number} duration - The duration of the animation in milliseconds.\n     * @param {number} startOpacity - The starting opacity value for the animation.\n     * @param {boolean} strokeWidth - The starting opacity value for the animation.\n     * @returns {void}\n     */\n    Selection.prototype.highlightAnimation = function (element, index, duration, startOpacity, strokeWidth) {\n        var _this = this;\n        var endOpacity;\n        var endWidth;\n        var startWidth = parseFloat(this.chart.visibleSeries[index].width.toString()) + 1;\n        if (strokeWidth) {\n            if (element.id.indexOf('border') !== -1 && this.chart.visibleSeries[index].border.width) {\n                endWidth = parseFloat(this.chart.visibleSeries[index].border.width.toString());\n            }\n            else if (element.id.indexOf('Symbol') !== -1 && this.chart.visibleSeries[index].marker.border.width) {\n                endWidth = parseFloat(this.chart.visibleSeries[index].marker.border.width.toString());\n            }\n            else {\n                endWidth = parseFloat(this.chart.visibleSeries[index].width.toString());\n            }\n        }\n        else {\n            if (element.id.indexOf('border') !== -1) {\n                endOpacity = 1;\n            }\n            else if (element.id.indexOf('Symbol') !== -1) {\n                endOpacity = parseFloat(this.chart.visibleSeries[index].marker.opacity.toString());\n            }\n            else if (element.id.indexOf('legend_shape') !== -1) {\n                endOpacity = parseFloat(this.chart.legendSettings.opacity.toString());\n            }\n            else {\n                endOpacity = parseFloat(this.chart.visibleSeries[index].opacity.toString());\n            }\n            if (isNullOrUndefined(this.chart.selectionModule) && this.chart.selectionMode === 'None' && this.chart.highlightColor !== '') {\n                startOpacity = 1;\n            }\n        }\n        if (endOpacity || (strokeWidth && endWidth && startWidth)) {\n            new Animation({}).animate(element, {\n                duration: duration,\n                progress: function (args) {\n                    element.style.animation = '';\n                    if (_this.chart.tooltip.enableHighlight && _this.chart.tooltipModule.svgTooltip) {\n                        return;\n                    }\n                    var progress = args.timeStamp / args.duration;\n                    if (strokeWidth) {\n                        var currentWidth = startWidth + (endWidth - startWidth) * progress;\n                        element.setAttribute('stroke-width', currentWidth.toString());\n                    }\n                    else {\n                        var currentOpacity = startOpacity + (endOpacity - startOpacity) * progress;\n                        element.setAttribute('opacity', currentOpacity.toString());\n                    }\n                },\n                end: function () {\n                    if (_this.chart.tooltip.enableHighlight && _this.chart.tooltipModule.svgTooltip) {\n                        return;\n                    }\n                    if (strokeWidth) {\n                        element.setAttribute('stroke-width', endWidth.toString());\n                    }\n                    else {\n                        element.setAttribute('opacity', endOpacity.toString());\n                    }\n                }\n            });\n        }\n    };\n    /**\n     * Stops the animation and sets opacity of the specified HTML element.\n     *\n     * @param {HTMLElement} element - The HTML element to stop the animation.\n     * @param {number} index - The index to find the opacity value of the series.\n     * @returns {void}\n     */\n    Selection.prototype.stopElementAnimation = function (element, index) {\n        var endOpacity;\n        if (element.id.indexOf('border') !== -1) {\n            endOpacity = 1;\n        }\n        else if (element.id.indexOf('Symbol') !== -1) {\n            endOpacity = parseFloat(this.chart.visibleSeries[index].marker.opacity.toString());\n        }\n        else {\n            endOpacity = parseFloat(this.chart.visibleSeries[index].opacity.toString());\n        }\n        if (element.getAttribute('e-animate')) {\n            Animation.stop(element);\n        }\n        element.setAttribute('opacity', endOpacity.toString());\n    };\n    Selection.prototype.pointChecking = function (path) {\n        var _this = this;\n        var chart = this.chart;\n        var element;\n        var svgRect = getElement(chart.svgId).getBoundingClientRect();\n        var offsetX = chart.chartAxisLayoutPanel.seriesClipRect.x + Math.max(svgRect.left, 0);\n        var offsetY = chart.chartAxisLayoutPanel.seriesClipRect.y + Math.max(svgRect.top, 0);\n        this.multiDataIndexes[this.count] = [];\n        for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n            var series = _a[_i];\n            series.points.filter(function (point) {\n                // To check whether the point have symbol location value or not.\n                if (point.symbolLocations && point.symbolLocations.length) {\n                    element = document.elementFromPoint(point.symbolLocations[0].x + offsetX, point.symbolLocations[0].y + offsetY);\n                }\n                if (element === path) {\n                    point.isSelect = true;\n                    if ((_this.chart.allowMultiSelection) && _this.currentMode === 'Lasso') {\n                        _this.multiDataIndexes[_this.count][_this.seriesIndex] = point;\n                        _this.seriesIndex++;\n                    }\n                }\n                else if (!(chart.allowMultiSelection)) {\n                    point.isSelect = false;\n                }\n            });\n        }\n        this.seriesIndex = 0;\n    };\n    /**\n     * Get module name.\n     *\n     * @private\n     * @returns {string} - Returns the module name.\n     */\n    Selection.prototype.getModuleName = function () {\n        return 'Selection';\n    };\n    /**\n     * To destroy the selection.\n     *\n     * @returns {void}\n     * @private\n     */\n    Selection.prototype.destroy = function () {\n        this.removeEventListener();\n        // Destroy method performed here\n    };\n    return Selection;\n}(BaseSelection));\nexport { Selection };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}