{"ast":null,"code":"import { ExportUtils } from '../../common/utils/export';\nimport { beforeExport } from '../../common/model/constants';\n/**\n * The `Export3DModule` module is used to print and export the rendered chart.\n */\nvar Export3D = /** @class */function () {\n  /**\n   * Constructor for export module.\n   *\n   * @private\n   */\n  function Export3D(chart) {\n    this.chart = chart;\n  }\n  /**\n   * Export the chart on the page to PNG, JPEG, or SVG format.\n   *\n   * @param {number} type - The format in which the chart will be exported.\n   * @param {string} fileName - The name of the exported file.\n   * @returns {void}\n   */\n  Export3D.prototype.export = function (type, fileName) {\n    var exportChart = new ExportUtils(this.chart);\n    var argsData = {\n      cancel: false,\n      width: null,\n      height: null\n    };\n    this.chart.trigger(beforeExport, argsData);\n    if (!argsData.cancel) {\n      exportChart.export(type, fileName, undefined, [this.chart]);\n    }\n  };\n  /**\n   * Export the chart on the page to a PDF document.\n   *\n   * @param {string} fileName - The name of the exported file.\n   * @param {PdfPageOrientation} orientation - Page orientation (portrait or landscape).\n   * @param {Chart3D[]} controls - Array of controls to be exported.\n   * @param {number} width - The width of the exported chart.\n   * @param {number} height - The height of the exported chart.\n   * @param {boolean} isVertical - Export the chart vertically or horizontally.\n   * @param {string} header - Text to appear at the top of the exported PDF document.\n   * @param {string} footer - Text to appear at the bottom of the exported PDF document.\n   * @param {boolean} exportToMultiplePage - Export the chart to multiple PDF pages.\n   * @returns {void}\n   */\n  Export3D.prototype.pdfExport = function (fileName, orientation, controls, width, height, isVertical, header, footer, exportToMultiplePage) {\n    var exportChart = new ExportUtils(this.chart);\n    controls = controls ? controls : [this.chart];\n    var argsData = {\n      cancel: false,\n      width: width,\n      height: height\n    };\n    this.chart.trigger(beforeExport, argsData);\n    if (!argsData.cancel) {\n      exportChart.export('PDF', fileName, orientation, controls, width = argsData.width, height = argsData.height, isVertical, header, footer, exportToMultiplePage);\n    }\n  };\n  /**\n   * Gets a data URL for the rendered 3D chart as an HTML canvas element, including data URL and blob URL if available.\n   *\n   * @param {Chart3D} chart - The 3D chart for which the data URL is requested.\n   * @returns {{ element: HTMLCanvasElement, dataUrl?: string, blobUrl?: string }} An object containing the HTML canvas element, data URL, and blob URL.\n   */\n  Export3D.prototype.getDataUrl = function (chart) {\n    var exportUtil = new ExportUtils(chart);\n    return exportUtil.getDataUrl(chart);\n  };\n  /**\n   * Gets the module name for the current component.\n   *\n   * @returns {string} The module name.\n   */\n  Export3D.prototype.getModuleName = function () {\n    // Returns the module name\n    return 'Export3D';\n  };\n  /**\n   * To destroy the export modules.\n   *\n   * @returns {void}\n   * @private\n   */\n  Export3D.prototype.destroy = function () {\n    // Destroy method performed here\n  };\n  return Export3D;\n}();\nexport { Export3D };","map":{"version":3,"names":["ExportUtils","beforeExport","Export3D","chart","prototype","export","type","fileName","exportChart","argsData","cancel","width","height","trigger","undefined","pdfExport","orientation","controls","isVertical","header","footer","exportToMultiplePage","getDataUrl","exportUtil","getModuleName","destroy"],"sources":["C:/Users/mkfun/Desktop/ct assignment/admin/node_modules/@syncfusion/ej2-charts/src/chart3d/print-export/export.js"],"sourcesContent":["import { ExportUtils } from '../../common/utils/export';\nimport { beforeExport } from '../../common/model/constants';\n/**\n * The `Export3DModule` module is used to print and export the rendered chart.\n */\nvar Export3D = /** @class */ (function () {\n    /**\n     * Constructor for export module.\n     *\n     * @private\n     */\n    function Export3D(chart) {\n        this.chart = chart;\n    }\n    /**\n     * Export the chart on the page to PNG, JPEG, or SVG format.\n     *\n     * @param {number} type - The format in which the chart will be exported.\n     * @param {string} fileName - The name of the exported file.\n     * @returns {void}\n     */\n    Export3D.prototype.export = function (type, fileName) {\n        var exportChart = new ExportUtils(this.chart);\n        var argsData = {\n            cancel: false, width: null, height: null\n        };\n        this.chart.trigger(beforeExport, argsData);\n        if (!argsData.cancel) {\n            exportChart.export(type, fileName, undefined, [this.chart]);\n        }\n    };\n    /**\n     * Export the chart on the page to a PDF document.\n     *\n     * @param {string} fileName - The name of the exported file.\n     * @param {PdfPageOrientation} orientation - Page orientation (portrait or landscape).\n     * @param {Chart3D[]} controls - Array of controls to be exported.\n     * @param {number} width - The width of the exported chart.\n     * @param {number} height - The height of the exported chart.\n     * @param {boolean} isVertical - Export the chart vertically or horizontally.\n     * @param {string} header - Text to appear at the top of the exported PDF document.\n     * @param {string} footer - Text to appear at the bottom of the exported PDF document.\n     * @param {boolean} exportToMultiplePage - Export the chart to multiple PDF pages.\n     * @returns {void}\n     */\n    Export3D.prototype.pdfExport = function (fileName, orientation, controls, width, height, isVertical, header, footer, exportToMultiplePage) {\n        var exportChart = new ExportUtils(this.chart);\n        controls = controls ? controls : [this.chart];\n        var argsData = {\n            cancel: false, width: width, height: height\n        };\n        this.chart.trigger(beforeExport, argsData);\n        if (!argsData.cancel) {\n            exportChart.export('PDF', fileName, orientation, controls, width = argsData.width, height = argsData.height, isVertical, header, footer, exportToMultiplePage);\n        }\n    };\n    /**\n     * Gets a data URL for the rendered 3D chart as an HTML canvas element, including data URL and blob URL if available.\n     *\n     * @param {Chart3D} chart - The 3D chart for which the data URL is requested.\n     * @returns {{ element: HTMLCanvasElement, dataUrl?: string, blobUrl?: string }} An object containing the HTML canvas element, data URL, and blob URL.\n     */\n    Export3D.prototype.getDataUrl = function (chart) {\n        var exportUtil = new ExportUtils(chart);\n        return exportUtil.getDataUrl(chart);\n    };\n    /**\n     * Gets the module name for the current component.\n     *\n     * @returns {string} The module name.\n     */\n    Export3D.prototype.getModuleName = function () {\n        // Returns the module name\n        return 'Export3D';\n    };\n    /**\n     * To destroy the export modules.\n     *\n     * @returns {void}\n     * @private\n     */\n    Export3D.prototype.destroy = function () {\n        // Destroy method performed here\n    };\n    return Export3D;\n}());\nexport { Export3D };\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,2BAA2B;AACvD,SAASC,YAAY,QAAQ,8BAA8B;AAC3D;AACA;AACA;AACA,IAAIC,QAAQ,GAAG,aAAe,YAAY;EACtC;AACJ;AACA;AACA;AACA;EACI,SAASA,QAAQA,CAACC,KAAK,EAAE;IACrB,IAAI,CAACA,KAAK,GAAGA,KAAK;EACtB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACID,QAAQ,CAACE,SAAS,CAACC,MAAM,GAAG,UAAUC,IAAI,EAAEC,QAAQ,EAAE;IAClD,IAAIC,WAAW,GAAG,IAAIR,WAAW,CAAC,IAAI,CAACG,KAAK,CAAC;IAC7C,IAAIM,QAAQ,GAAG;MACXC,MAAM,EAAE,KAAK;MAAEC,KAAK,EAAE,IAAI;MAAEC,MAAM,EAAE;IACxC,CAAC;IACD,IAAI,CAACT,KAAK,CAACU,OAAO,CAACZ,YAAY,EAAEQ,QAAQ,CAAC;IAC1C,IAAI,CAACA,QAAQ,CAACC,MAAM,EAAE;MAClBF,WAAW,CAACH,MAAM,CAACC,IAAI,EAAEC,QAAQ,EAAEO,SAAS,EAAE,CAAC,IAAI,CAACX,KAAK,CAAC,CAAC;IAC/D;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACID,QAAQ,CAACE,SAAS,CAACW,SAAS,GAAG,UAAUR,QAAQ,EAAES,WAAW,EAAEC,QAAQ,EAAEN,KAAK,EAAEC,MAAM,EAAEM,UAAU,EAAEC,MAAM,EAAEC,MAAM,EAAEC,oBAAoB,EAAE;IACvI,IAAIb,WAAW,GAAG,IAAIR,WAAW,CAAC,IAAI,CAACG,KAAK,CAAC;IAC7Cc,QAAQ,GAAGA,QAAQ,GAAGA,QAAQ,GAAG,CAAC,IAAI,CAACd,KAAK,CAAC;IAC7C,IAAIM,QAAQ,GAAG;MACXC,MAAM,EAAE,KAAK;MAAEC,KAAK,EAAEA,KAAK;MAAEC,MAAM,EAAEA;IACzC,CAAC;IACD,IAAI,CAACT,KAAK,CAACU,OAAO,CAACZ,YAAY,EAAEQ,QAAQ,CAAC;IAC1C,IAAI,CAACA,QAAQ,CAACC,MAAM,EAAE;MAClBF,WAAW,CAACH,MAAM,CAAC,KAAK,EAAEE,QAAQ,EAAES,WAAW,EAAEC,QAAQ,EAAEN,KAAK,GAAGF,QAAQ,CAACE,KAAK,EAAEC,MAAM,GAAGH,QAAQ,CAACG,MAAM,EAAEM,UAAU,EAAEC,MAAM,EAAEC,MAAM,EAAEC,oBAAoB,CAAC;IAClK;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACInB,QAAQ,CAACE,SAAS,CAACkB,UAAU,GAAG,UAAUnB,KAAK,EAAE;IAC7C,IAAIoB,UAAU,GAAG,IAAIvB,WAAW,CAACG,KAAK,CAAC;IACvC,OAAOoB,UAAU,CAACD,UAAU,CAACnB,KAAK,CAAC;EACvC,CAAC;EACD;AACJ;AACA;AACA;AACA;EACID,QAAQ,CAACE,SAAS,CAACoB,aAAa,GAAG,YAAY;IAC3C;IACA,OAAO,UAAU;EACrB,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACItB,QAAQ,CAACE,SAAS,CAACqB,OAAO,GAAG,YAAY;IACrC;EAAA,CACH;EACD,OAAOvB,QAAQ;AACnB,CAAC,CAAC,CAAE;AACJ,SAASA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}