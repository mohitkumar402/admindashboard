{"ast":null,"code":"/**\n * Defines the common behavior of funnel and pyramid series\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { Rect, Size } from '@syncfusion/ej2-svg-base';\nimport { stringToNumber } from '../../common/utils/helper';\nimport { AccumulationBase } from './accumulation-base';\n/**\n * The `TriangularBase` module is used to calculate base functions for funnel and pyramid series.\n *\n * @private\n */\nvar TriangularBase = /** @class */function (_super) {\n  __extends(TriangularBase, _super);\n  function TriangularBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Initializes the properties of funnel/pyramid series.\n   *\n   * @private\n   * @param {AccumulationChart} chart - The accumulation chart control.\n   * @param {AccumulationSeries} series - The series for which to initialize properties.\n   * @returns {void}\n   */\n  TriangularBase.prototype.initProperties = function (chart, series) {\n    var actualChartArea = chart.initialClipRect;\n    series.triangleSize = new Size(stringToNumber(series.width, actualChartArea.width), stringToNumber(series.height, actualChartArea.height));\n    series.neckSize = new Size(stringToNumber(series.neckWidth, actualChartArea.width), stringToNumber(series.neckHeight, actualChartArea.height));\n    this.defaultLabelBound(series, series.dataLabel.visible, series.dataLabel.position, chart);\n    if (series.explodeOffset === '30%') {\n      series.explodeOffset = '25px';\n    }\n    chart.explodeDistance = stringToNumber(series.explodeOffset, actualChartArea.width);\n    var points = series.points;\n    this.initializeSizeRatio(points, series);\n  };\n  /**\n   * Initializes the size of the pyramid/funnel segments.\n   *\n   * @private\n   * @param {AccPoints[]} points - The points to initialize the segment size.\n   * @param {AccumulationSeries} series - The series for which to initialize properties.\n   * @param {boolean} reverse - Indicates whether the pyramid/funnel segments should be reversed.\n   * @returns {void}\n   */\n  TriangularBase.prototype.initializeSizeRatio = function (points, series, reverse) {\n    if (reverse === void 0) {\n      reverse = false;\n    }\n    var sumOfPoints = series.sumOfPoints;\n    //Limiting the ratio within the range of 0 to 1\n    var gapRatio = Math.min(Math.max(series.gapRatio, 0), 1);\n    //% equivalence of a value 1\n    var coEff = sumOfPoints !== 0 ? 1 / (sumOfPoints * (1 + gapRatio / (1 - gapRatio))) : 0;\n    var spacing = gapRatio / (points.length - 1);\n    var y = 0;\n    //starting from bottom\n    for (var i = points.length - 1; i >= 0; i--) {\n      var index = reverse ? points.length - 1 - i : i;\n      if (points[index].visible) {\n        var height = coEff * points[index].y;\n        points[index].yRatio = y;\n        points[index].heightRatio = height;\n        y += height + spacing;\n      }\n    }\n  };\n  /**\n   * Marks the label location from the set of points that forms a pyramid/funnel segment.\n   *\n   * @private\n   * @param {AccumulationSeries} series - The series for which to mark label locations.\n   * @param {AccPoints} point - The point to mark the label location.\n   * @param {ChartLocation[]} points - The set of points that forms a pyramid/funnel segment.\n   * @returns {void}\n   */\n  TriangularBase.prototype.setLabelLocation = function (series, point, points) {\n    var last = points.length - 1;\n    var bottom = series.type === 'Funnel' ? points.length - 2 : points.length - 1;\n    var x = (points[0].x + points[bottom].x) / 2;\n    var right = (points[1].x + points[bottom - 1].x) / 2;\n    point.region = new Rect(x, points[0].y, right - x, points[bottom].y - points[0].y);\n    point.symbolLocation = {\n      x: point.region.x + point.region.width / 2,\n      y: point.region.y + point.region.height / 2\n    };\n    point.labelOffset = {\n      x: point.symbolLocation.x - (points[0].x + points[last].x) / 2,\n      y: point.symbolLocation.y - (points[0].y + points[last].y) / 2\n    };\n  };\n  /**\n   * Finds the path to connect the list of points.\n   *\n   * @param {ChartLocation[]} locations - An array of ChartLocation objects representing the points to connect.\n   * @param {AccPoints} point - The current AccPoints object containing the data point information.\n   * @param {string} path - The initial path string to be modified.\n   * @param {number} firstIndex - The index of the first point in the path.\n   * @param {number} lastIndex - The index of the last point in the path.\n   * @param {AccumulationSeries} series - The series object of the Accumulation.\n   * @returns {string} - This string represent the path value of the D attribute.\n   * @Private\n   */\n  TriangularBase.prototype.getPath = function (locations, point, path, firstIndex, lastIndex, series) {\n    var length = series.points.length;\n    var borderRadius = series.borderRadius;\n    var min = Math.min(point.region.width, point.region.height);\n    var funnelMinimum = Math.min(series.neckSize.height, series.neckSize.width);\n    if (funnelMinimum === 0) {\n      funnelMinimum = series.neckSize.height === 0 && series.neckSize.width === 0 ? point.region.height : series.neckSize.width === 0 ? series.neckSize.height : series.neckSize.width;\n    }\n    borderRadius = borderRadius > min / 2 ? min / 2 : borderRadius;\n    if (series.type === 'Funnel') {\n      borderRadius = borderRadius > funnelMinimum / 2 ? funnelMinimum / 2 : borderRadius;\n    }\n    var angle = Math.atan2(locations[1].x - locations[2].x, locations[1].y - locations[2].y);\n    var temp = borderRadius;\n    if (series.type === 'Pyramid') {\n      borderRadius = point.index === lastIndex && length !== 1 && firstIndex !== lastIndex ? 0 : borderRadius;\n      path += locations[0].x - temp * Math.sin(-angle) + ' ' + (locations[0].y + -temp * Math.cos(angle)) + ' Q' + locations[0].x + ' ' + locations[0].y + ' ' + (locations[0].x + borderRadius * Math.sin(-angle)) + ' ' + (locations[0].y + -borderRadius * Math.cos(-angle));\n      path += ' L' + (locations[1].x + borderRadius * Math.sin(-angle)) + ' ' + (locations[1].y + -borderRadius * Math.cos(angle));\n      borderRadius = point.index === lastIndex ? temp : 0;\n      path += ' L' + (locations[2].x - temp * Math.sin(-angle)) + ' ' + (locations[2].y - -temp * Math.cos(angle)) + ' Q' + locations[2].x + ' ' + locations[2].y + ' ' + (locations[2].x - borderRadius) + ' ' + locations[2].y;\n      path += ' L' + (locations[3].x + borderRadius) + ' ' + locations[3].y + ' Q' + locations[3].x + ' ' + locations[3].y + ' ' + (locations[3].x + temp * Math.sin(-angle)) + ' ' + (locations[3].y - -temp * Math.cos(angle));\n    }\n    if (series.type === 'Funnel') {\n      borderRadius = point.index === firstIndex && length !== 1 && firstIndex !== lastIndex ? 0 : borderRadius;\n      path += locations[0].x + -(borderRadius * Math.sin(-angle)) + ' ' + (locations[0].y + -borderRadius * Math.cos(angle)) + ' Q' + locations[0].x + ' ' + locations[0].y + ' ' + (locations[0].x + borderRadius) + ' ' + locations[0].y;\n      path += ' L' + (locations[1].x - borderRadius) + ' ' + locations[1].y + ' Q' + locations[1].x + ' ' + locations[1].y + ' ' + (locations[1].x - borderRadius * Math.sin(angle)) + ' ' + (locations[1].y + -borderRadius * Math.cos(angle));\n      borderRadius = point.index === firstIndex ? temp : 0;\n      if (series.neckWidth === '0%') {\n        var middle = locations[5].x + (locations[3].x - locations[5].x) / 2;\n        path += ' L' + (locations[2].x + -borderRadius * Math.sin(-angle)) + ' ' + (locations[2].y - -borderRadius * Math.cos(angle)) + ' Q' + middle + ' ' + locations[2].y + ' ' + (locations[5].x - -borderRadius * Math.sin(-angle)) + ' ' + (locations[2].y - -borderRadius * Math.cos(angle));\n      } else {\n        path = series.neckHeight !== '0%' && locations[2].y !== locations[3].y ? path += ' L' + locations[2].x + ' ' + locations[2].y : path;\n        var tempX = series.neckHeight === '0%' ? borderRadius * Math.sin(-angle) : 0;\n        var tempY = series.neckHeight === '0%' ? -borderRadius * Math.cos(angle) : borderRadius;\n        path += ' L' + (locations[3].x - tempX) + ' ' + (locations[3].y - tempY) + ' Q' + locations[3].x + ' ' + locations[3].y + ' ' + (locations[3].x - tempY) + ' ' + locations[3].y;\n        path += ' L' + (locations[4].x + tempY) + ' ' + locations[4].y + ' Q' + locations[4].x + ' ' + locations[4].y + ' ' + (locations[4 + 1].x + tempX) + ' ' + (locations[4].y - tempY);\n        path = series.neckHeight !== '0%' && locations[4].y !== locations[5].y ? path += ' L' + locations[5].x + ' ' + locations[5].y : path;\n      }\n    }\n    return path;\n  };\n  /**\n   * Creates a path to connect a list of points.\n   *\n   * @param {ChartLocation[]} locations - An array of ChartLocation objects representing the points to connect.\n   * @param {AccPoints} point - The current AccPoints object containing the data point information.\n   * @param {AccumulationSeries} series - The series object of the Accumulation.\n   * @returns {string} - This string represent the path value of the D attribute.\n   * @Private\n   */\n  TriangularBase.prototype.findPath = function (locations, point, series) {\n    var path = 'M ';\n    var firstIndex = -1;\n    var lastIndex = -1;\n    for (var index = 0; index < series.points.length; index++) {\n      if (series.points[index].visible) {\n        if (firstIndex === -1) {\n          firstIndex = index;\n        }\n        lastIndex = index;\n      }\n    }\n    if (series.borderRadius && (point.index === lastIndex || point.index === firstIndex)) {\n      path = this.getPath(locations, point, path, firstIndex, lastIndex, series);\n    } else {\n      for (var i = 0; i < locations.length; i++) {\n        path += locations[i].x + ' ' + locations[i].y;\n        if (i !== locations.length - 1) {\n          path += ' L ';\n        }\n      }\n    }\n    return path + ' Z ';\n  };\n  /**\n   * To calculate data-label bounds.\n   *\n   * @private\n   * @param {AccumulationSeries} series - The series for which to calculate data-label bounds.\n   * @param {boolean} visible - Specifies whether the data-labels are visible.\n   * @param {AccumulationLabelPosition} position - The position of the data-labels.\n   * @param {AccumulationChart} chart - The accumulation chart control.\n   * @returns {void}\n   */\n  TriangularBase.prototype.defaultLabelBound = function (series, visible, position, chart) {\n    var x = (chart.initialClipRect.width - series.triangleSize.width) / 2;\n    var y = (chart.initialClipRect.height - series.triangleSize.height) / 2;\n    var accumulationBound = new Rect(x, y, series.triangleSize.width, series.triangleSize.height);\n    series.labelBound = new Rect(accumulationBound.x, accumulationBound.y, accumulationBound.width + accumulationBound.x, accumulationBound.height + accumulationBound.y);\n    series.accumulationBound = accumulationBound;\n    if (visible && position === 'Outside') {\n      series.labelBound = new Rect(Infinity, Infinity, -Infinity, -Infinity);\n    }\n  };\n  return TriangularBase;\n}(AccumulationBase);\nexport { TriangularBase };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","Rect","Size","stringToNumber","AccumulationBase","TriangularBase","_super","apply","arguments","initProperties","chart","series","actualChartArea","initialClipRect","triangleSize","width","height","neckSize","neckWidth","neckHeight","defaultLabelBound","dataLabel","visible","position","explodeOffset","explodeDistance","points","initializeSizeRatio","reverse","sumOfPoints","gapRatio","Math","min","max","coEff","spacing","length","y","i","index","yRatio","heightRatio","setLabelLocation","point","last","bottom","type","x","right","region","symbolLocation","labelOffset","getPath","locations","path","firstIndex","lastIndex","borderRadius","funnelMinimum","angle","atan2","temp","sin","cos","middle","tempX","tempY","findPath","accumulationBound","labelBound","Infinity"],"sources":["C:/Users/mkfun/Desktop/ct assignment/admin/node_modules/@syncfusion/ej2-charts/src/accumulation-chart/renderer/triangular-base.js"],"sourcesContent":["/**\n * Defines the common behavior of funnel and pyramid series\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { Rect, Size } from '@syncfusion/ej2-svg-base';\nimport { stringToNumber } from '../../common/utils/helper';\nimport { AccumulationBase } from './accumulation-base';\n/**\n * The `TriangularBase` module is used to calculate base functions for funnel and pyramid series.\n *\n * @private\n */\nvar TriangularBase = /** @class */ (function (_super) {\n    __extends(TriangularBase, _super);\n    function TriangularBase() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Initializes the properties of funnel/pyramid series.\n     *\n     * @private\n     * @param {AccumulationChart} chart - The accumulation chart control.\n     * @param {AccumulationSeries} series - The series for which to initialize properties.\n     * @returns {void}\n     */\n    TriangularBase.prototype.initProperties = function (chart, series) {\n        var actualChartArea = chart.initialClipRect;\n        series.triangleSize = new Size(stringToNumber(series.width, actualChartArea.width), stringToNumber(series.height, actualChartArea.height));\n        series.neckSize = new Size(stringToNumber(series.neckWidth, actualChartArea.width), stringToNumber(series.neckHeight, actualChartArea.height));\n        this.defaultLabelBound(series, series.dataLabel.visible, series.dataLabel.position, chart);\n        if (series.explodeOffset === '30%') {\n            series.explodeOffset = '25px';\n        }\n        chart.explodeDistance = stringToNumber(series.explodeOffset, actualChartArea.width);\n        var points = series.points;\n        this.initializeSizeRatio(points, series);\n    };\n    /**\n     * Initializes the size of the pyramid/funnel segments.\n     *\n     * @private\n     * @param {AccPoints[]} points - The points to initialize the segment size.\n     * @param {AccumulationSeries} series - The series for which to initialize properties.\n     * @param {boolean} reverse - Indicates whether the pyramid/funnel segments should be reversed.\n     * @returns {void}\n     */\n    TriangularBase.prototype.initializeSizeRatio = function (points, series, reverse) {\n        if (reverse === void 0) { reverse = false; }\n        var sumOfPoints = series.sumOfPoints;\n        //Limiting the ratio within the range of 0 to 1\n        var gapRatio = Math.min(Math.max(series.gapRatio, 0), 1);\n        //% equivalence of a value 1\n        var coEff = (sumOfPoints !== 0) ? 1 / (sumOfPoints * (1 + gapRatio / (1 - gapRatio))) : 0;\n        var spacing = gapRatio / (points.length - 1);\n        var y = 0;\n        //starting from bottom\n        for (var i = points.length - 1; i >= 0; i--) {\n            var index = reverse ? points.length - 1 - i : i;\n            if (points[index].visible) {\n                var height = coEff * points[index].y;\n                points[index].yRatio = y;\n                points[index].heightRatio = height;\n                y += height + spacing;\n            }\n        }\n    };\n    /**\n     * Marks the label location from the set of points that forms a pyramid/funnel segment.\n     *\n     * @private\n     * @param {AccumulationSeries} series - The series for which to mark label locations.\n     * @param {AccPoints} point - The point to mark the label location.\n     * @param {ChartLocation[]} points - The set of points that forms a pyramid/funnel segment.\n     * @returns {void}\n     */\n    TriangularBase.prototype.setLabelLocation = function (series, point, points) {\n        var last = points.length - 1;\n        var bottom = series.type === 'Funnel' ? points.length - 2 : points.length - 1;\n        var x = (points[0].x + points[bottom].x) / 2;\n        var right = (points[1].x + points[bottom - 1].x) / 2;\n        point.region = new Rect(x, points[0].y, right - x, points[bottom].y - points[0].y);\n        point.symbolLocation = {\n            x: point.region.x + point.region.width / 2,\n            y: point.region.y + point.region.height / 2\n        };\n        point.labelOffset = {\n            x: point.symbolLocation.x - (points[0].x + points[last].x) / 2,\n            y: point.symbolLocation.y - (points[0].y + points[last].y) / 2\n        };\n    };\n    /**\n     * Finds the path to connect the list of points.\n     *\n     * @param {ChartLocation[]} locations - An array of ChartLocation objects representing the points to connect.\n     * @param {AccPoints} point - The current AccPoints object containing the data point information.\n     * @param {string} path - The initial path string to be modified.\n     * @param {number} firstIndex - The index of the first point in the path.\n     * @param {number} lastIndex - The index of the last point in the path.\n     * @param {AccumulationSeries} series - The series object of the Accumulation.\n     * @returns {string} - This string represent the path value of the D attribute.\n     * @Private\n     */\n    TriangularBase.prototype.getPath = function (locations, point, path, firstIndex, lastIndex, series) {\n        var length = series.points.length;\n        var borderRadius = series.borderRadius;\n        var min = Math.min(point.region.width, point.region.height);\n        var funnelMinimum = Math.min(series.neckSize.height, series.neckSize.width);\n        if (funnelMinimum === 0) {\n            funnelMinimum = series.neckSize.height === 0 && series.neckSize.width === 0 ?\n                point.region.height : (series.neckSize.width === 0 ? series.neckSize.height : series.neckSize.width);\n        }\n        borderRadius = borderRadius > min / 2 ? min / 2 : borderRadius;\n        if (series.type === 'Funnel') {\n            borderRadius = (borderRadius > funnelMinimum / 2) ? funnelMinimum / 2 : borderRadius;\n        }\n        var angle = Math.atan2(locations[1].x - locations[2].x, locations[1].y - locations[2].y);\n        var temp = borderRadius;\n        if (series.type === 'Pyramid') {\n            borderRadius = (point.index === lastIndex && length !== 1 && firstIndex !== lastIndex) ? 0 : borderRadius;\n            path += (locations[0].x - (temp * Math.sin(-angle))) + ' ' + (locations[0].y + (-temp * Math.cos(angle))) + ' Q' + locations[0].x + ' ' + locations[0].y + ' '\n                + (locations[0].x + (borderRadius * Math.sin(-angle))) + ' ' + (locations[0].y + (-borderRadius * Math.cos(-angle)));\n            path += ' L' + (locations[1].x + (borderRadius * Math.sin(-angle))) + ' ' + (locations[1].y + (-borderRadius * Math.cos(angle)));\n            borderRadius = point.index === lastIndex ? temp : 0;\n            path += ' L' + (locations[2].x - (temp * Math.sin(-angle))) + ' ' + (locations[2].y - (-temp * Math.cos(angle))) + ' Q' + locations[2].x + ' ' + locations[2].y\n                + ' ' + (locations[2].x - borderRadius) + ' ' + locations[2].y;\n            path += ' L' + (locations[3].x + borderRadius) + ' ' + locations[3].y + ' Q' + locations[3].x + ' ' + locations[3].y + ' '\n                + (locations[3].x + (temp * Math.sin(-angle))) + ' ' + (locations[3].y - (-temp * Math.cos(angle)));\n        }\n        if (series.type === 'Funnel') {\n            borderRadius = (point.index === firstIndex && length !== 1 && firstIndex !== lastIndex) ? 0 : borderRadius;\n            path += locations[0].x + (-(borderRadius * Math.sin(-angle))) + ' ' + (locations[0].y + (-borderRadius * Math.cos(angle))) + ' Q' + locations[0].x\n                + ' ' + locations[0].y + ' ' + (locations[0].x + borderRadius) + ' ' + locations[0].y;\n            path += ' L' + (locations[1].x - borderRadius) + ' ' + locations[1].y + ' Q' + locations[1].x + ' '\n                + locations[1].y + ' ' + (locations[1].x - ((borderRadius * Math.sin(angle)))) + ' ' + (locations[1].y + (-borderRadius * Math.cos(angle)));\n            borderRadius = point.index === firstIndex ? temp : 0;\n            if (series.neckWidth === '0%') {\n                var middle = (locations[5].x + (locations[3].x - locations[5].x) / 2);\n                path += ' L' + (locations[2].x + (-borderRadius * Math.sin(-angle))) + ' ' + (locations[2].y - (-borderRadius * Math.cos(angle)))\n                    + ' Q' + middle + ' ' + locations[2].y + ' ' + (locations[5].x - (-borderRadius * Math.sin(-angle))) + ' ' + (locations[2].y - (-borderRadius * Math.cos(angle)));\n            }\n            else {\n                path = series.neckHeight !== '0%' && locations[2].y !== locations[3].y ? path += ' L' + locations[2].x + ' ' + (locations[2].y) : path;\n                var tempX = series.neckHeight === '0%' ? ((borderRadius * Math.sin(-angle))) : 0;\n                var tempY = series.neckHeight === '0%' ? (-borderRadius * Math.cos(angle)) : borderRadius;\n                path += ' L' + (locations[3].x - (tempX)) + ' ' + (locations[3].y - (tempY)) + ' Q' + locations[3].x + ' ' + locations[3].y + ' '\n                    + (locations[3].x - tempY) + ' ' + locations[3].y;\n                path += ' L' + (locations[4].x + tempY) + ' ' + locations[4].y + ' Q' + locations[4].x + ' ' + locations[4].y + ' '\n                    + (locations[4 + 1].x + tempX) + ' ' + (locations[4].y - tempY);\n                path = series.neckHeight !== '0%' && locations[4].y !== locations[5].y ? path += ' L' + locations[5].x + ' ' + (locations[5].y) : path;\n            }\n        }\n        return path;\n    };\n    /**\n     * Creates a path to connect a list of points.\n     *\n     * @param {ChartLocation[]} locations - An array of ChartLocation objects representing the points to connect.\n     * @param {AccPoints} point - The current AccPoints object containing the data point information.\n     * @param {AccumulationSeries} series - The series object of the Accumulation.\n     * @returns {string} - This string represent the path value of the D attribute.\n     * @Private\n     */\n    TriangularBase.prototype.findPath = function (locations, point, series) {\n        var path = 'M ';\n        var firstIndex = -1;\n        var lastIndex = -1;\n        for (var index = 0; index < series.points.length; index++) {\n            if (series.points[index].visible) {\n                if (firstIndex === -1) {\n                    firstIndex = index;\n                }\n                lastIndex = index;\n            }\n        }\n        if (series.borderRadius && (point.index === lastIndex || point.index === firstIndex)) {\n            path = this.getPath(locations, point, path, firstIndex, lastIndex, series);\n        }\n        else {\n            for (var i = 0; i < locations.length; i++) {\n                path += locations[i].x + ' ' + locations[i].y;\n                if (i !== locations.length - 1) {\n                    path += ' L ';\n                }\n            }\n        }\n        return path + ' Z ';\n    };\n    /**\n     * To calculate data-label bounds.\n     *\n     * @private\n     * @param {AccumulationSeries} series - The series for which to calculate data-label bounds.\n     * @param {boolean} visible - Specifies whether the data-labels are visible.\n     * @param {AccumulationLabelPosition} position - The position of the data-labels.\n     * @param {AccumulationChart} chart - The accumulation chart control.\n     * @returns {void}\n     */\n    TriangularBase.prototype.defaultLabelBound = function (series, visible, position, chart) {\n        var x = (chart.initialClipRect.width - series.triangleSize.width) / 2;\n        var y = (chart.initialClipRect.height - series.triangleSize.height) / 2;\n        var accumulationBound = new Rect(x, y, series.triangleSize.width, series.triangleSize.height);\n        series.labelBound = new Rect(accumulationBound.x, accumulationBound.y, accumulationBound.width + accumulationBound.x, accumulationBound.height + accumulationBound.y);\n        series.accumulationBound = accumulationBound;\n        if (visible && position === 'Outside') {\n            series.labelBound = new Rect(Infinity, Infinity, -Infinity, -Infinity);\n        }\n    };\n    return TriangularBase;\n}(AccumulationBase));\nexport { TriangularBase };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}