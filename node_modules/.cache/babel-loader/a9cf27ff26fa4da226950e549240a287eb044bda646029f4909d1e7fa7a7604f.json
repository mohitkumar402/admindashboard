{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * Circular 3D chart series.\n */\nimport { Browser, ChildProperty, Complex, Property, getValue, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { Animation } from '../../common/model/base';\nimport { appendChildElement, stringToNumber } from '../../common/utils/helper';\nimport { Rect, Size } from '@syncfusion/ej2-svg-base';\nimport { DataManager } from '@syncfusion/ej2-data';\nimport { pointRender, seriesRender } from '../../common/model/constants';\nimport { getCircular3DSeriesColor } from '../model/theme';\nimport { CircularChart3DDataLabelSettings } from './dataLabel';\n/**\n * Model representing data points for the circular 3D series.\n *\n * @public\n */\nvar CircularChart3DPoints = /** @class */function () {\n  function CircularChart3DPoints() {\n    /**Circular 3D point visibility. */\n    this.visible = true;\n    /** @private */\n    this.isExplode = false;\n    /** @private  */\n    this.argsData = null;\n  }\n  return CircularChart3DPoints;\n}();\nexport { CircularChart3DPoints };\n/**\n * Configures settings for empty points in the circular 3D series.\n */\nvar CircularChart3DEmptyPointSettings = /** @class */function (_super) {\n  __extends(CircularChart3DEmptyPointSettings, _super);\n  function CircularChart3DEmptyPointSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  __decorate([Property(null)], CircularChart3DEmptyPointSettings.prototype, \"fill\", void 0);\n  __decorate([Property('Gap')], CircularChart3DEmptyPointSettings.prototype, \"mode\", void 0);\n  return CircularChart3DEmptyPointSettings;\n}(ChildProperty);\nexport { CircularChart3DEmptyPointSettings };\n/**\n *  Configures the series in a circular 3D chart.\n */\nvar CircularChart3DSeries = /** @class */function (_super) {\n  __extends(CircularChart3DSeries, _super);\n  function CircularChart3DSeries() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /** @private */\n    _this.points = [];\n    /** @private */\n    _this.sumOfPoints = 0;\n    /** @private */\n    _this.isRectSeries = true;\n    /** @private */\n    _this.clipRect = new Rect(0, 0, 0, 0);\n    /** @private */\n    _this.category = 'Series';\n    /** @private */\n    _this.rightSidePoints = [];\n    /** @private */\n    _this.leftSidePoints = [];\n    /** @private */\n    _this.segments = [];\n    /** @private */\n    _this.isExploded = false;\n    return _this;\n  }\n  /**\n   * Refreshes the DataManager for the circular 3D series.\n   *\n   * @private\n   * @param {CircularChart3D} chart - The instance of the circular 3D chart.\n   * @param {boolean} render - A boolean value indicating whether rendering is required.\n   * @returns {void}\n   */\n  CircularChart3DSeries.prototype.refreshDataManager = function (chart, render) {\n    var _this = this;\n    var dateSource = this.dataSource || chart.dataSource;\n    if (!(dateSource instanceof DataManager) && isNullOrUndefined(this.query)) {\n      this.dataManagerSuccess({\n        result: dateSource,\n        count: dateSource.length\n      }, chart, render);\n      return;\n    }\n    var dataManager = this.dataModule.getData(this.dataModule.generateQuery().requiresCount());\n    dataManager.then(function (e) {\n      return _this.dataManagerSuccess(e, chart);\n    });\n  };\n  /**\n   * Handles the success event when the DataManager fetches data for the circular 3D series.\n   *\n   * @private\n   * @param {Object} dataObject - Specifies the series data object.\n   * @param {Object} dataObject.result - The actual data.\n   * @param {number} dataObject.count - The count of data.\n   * @param {CircularChart3D} chart - The instance of the circular 3D chart.\n   * @param {boolean} [render=true] - A boolean value indicating whether rendering is required. Default is true.\n   * @returns {void}\n   */\n  CircularChart3DSeries.prototype.dataManagerSuccess = function (dataObject, chart, render) {\n    if (render === void 0) {\n      render = true;\n    }\n    var argsData = {\n      name: seriesRender,\n      series: this,\n      data: dataObject.result\n    };\n    chart.allowServerDataBinding = false;\n    chart.trigger(seriesRender, argsData);\n    this.resultData = dataObject.result !== '' ? dataObject.result : [];\n    if (!render) {\n      this.getPoints(this.resultData, chart);\n    }\n    if (++chart.seriesCounts === chart.visibleSeries.length && render) {\n      this.getPoints(this.resultData, chart);\n      chart.refreshChart();\n    }\n  };\n  /**\n   * Retrieves and processes data points for rendering on a circular 3D chart.\n   *\n   * @param {Object} result - An object containing the data points for the chart.\n   * @param {CircularChart3D}chart - The instance of the circular 3D chart.\n   * @returns {void}\n   */\n  CircularChart3DSeries.prototype.getPoints = function (result, chart) {\n    var length = Object.keys(result).length;\n    this.sumOfPoints = 0;\n    if (length === 0) {\n      this.points = [];\n      return null;\n    }\n    this.findSumOfPoints(result);\n    this.points = [];\n    var point;\n    var colors = this.palettes.length ? this.palettes : getCircular3DSeriesColor(chart.theme);\n    for (var i = 0; i < length; i++) {\n      point = this.setPoints(result, i, chart);\n      if (isNullOrUndefined(point.y)) {\n        point.visible = false;\n      }\n      this.pushPoints(point, colors, chart);\n    }\n  };\n  /**\n   * Sets point index and color for a circular 3D data point.\n   *\n   * @param {CircularChart3DPoints} point - The CircularChart3DPoints object representing the data point.\n   * @param {string[]} colors - An array specifying the point colors.\n   * @param {CircularChart3D} chart - The instance of the circular 3D chart.\n   * @returns {void}\n   */\n  CircularChart3DSeries.prototype.pushPoints = function (point, colors, chart) {\n    point.index = this.points.length;\n    point.isExplode = this.explodeAll || point.index === this.explodeIndex;\n    point.color = point.color || colors[point.index % colors.length];\n    var argsData = {\n      cancel: false,\n      name: pointRender,\n      series: this,\n      point: point,\n      fill: point.color\n    };\n    chart.trigger(pointRender, argsData);\n    point.color = argsData.fill;\n    point.visible = !argsData.cancel;\n    this.points.push(point);\n  };\n  /**\n   * Calculates the sum of points in the circular 3D series.\n   *\n   * @param {Object} result - The result object containing data points.\n   * @returns {void}\n   */\n  CircularChart3DSeries.prototype.findSumOfPoints = function (result) {\n    var length = Object.keys(result).length;\n    for (var i = 0; i < length; i++) {\n      if (!isNullOrUndefined(result[i]) && !isNullOrUndefined(result[i][this.yName]) && !isNaN(result[i][this.yName])) {\n        this.sumOfPoints += Math.abs(result[i][this.yName]);\n      }\n    }\n  };\n  /**\n   * Sets x, y, and text points from the specified data source.\n   *\n   * @param {Object} data - The data source containing information for the point.\n   * @param {number} index - The index specifying the position in the data array.\n   * @param {CircularChart3D} chart - Specifies the circular 3D chart instance.\n   * @returns {CircularChart3DPoints} - Returns the CircularChart3DPoints object representing the data point.\n   */\n  CircularChart3DSeries.prototype.setPoints = function (data, index, chart) {\n    var point = new CircularChart3DPoints();\n    point.x = getValue(this.xName, data[index]);\n    point.y = getValue(this.yName, data[index]);\n    point.percentage = +(point.y / this.sumOfPoints * 100).toFixed(2);\n    point.legendImageUrl = getValue(this.legendImageUrl, data[index]);\n    point.color = getValue(this.pointColorMapping, data[index]);\n    point.text = point.originalText = getValue(this.dataLabel.name || '', data[index]);\n    point.tooltip = getValue(this.tooltipMappingName || '', data[index]);\n    point.sliceRadius = getValue(this.radius ? this.radius : '80%', data[index]);\n    point.sliceRadius = isNullOrUndefined(point.sliceRadius) ? '80%' : point.sliceRadius;\n    point.separatorY = chart.intl.formatNumber(point.y, {\n      useGrouping: chart.useGroupingSeparator\n    });\n    this.setEmptyPoint(point, index, data, chart);\n    return point;\n  };\n  /**\n   * Draws the circular 3D series on the chart.\n   *\n   * @param {CircularChart3DSeries} series - The series to be drawn.\n   * @param {CircularChart3D} chart - The circular 3D chart instance.\n   * @returns {void}\n   * @private\n   */\n  CircularChart3DSeries.prototype.draw = function (series, chart) {\n    var marginRatio = 0.03;\n    var seriesIndex = chart.visibleSeries.indexOf(series);\n    this.calculateSize(chart, series);\n    var seriesRadius = series.radius ? series.radius : Browser.isDevice && series.dataLabel.position === 'Outside' ? '40%' : '80%';\n    var radius = parseInt(seriesRadius, 10);\n    if (!((seriesRadius.indexOf('%') !== -1 || typeof radius === 'number') && !isNaN(radius))) {\n      this.isRadiusMapped = true;\n    }\n    series.size = this.isRadiusMapped ? 0.8 : parseInt(seriesRadius, 10) / 100;\n    series.coefficient = parseInt(series.innerRadius, 10) / 100;\n    chart.circularRadius[seriesIndex] = (1 - marginRatio) * Math.min(series.actualWidth / 2 - (chart.legendSettings.visible && chart.circularChartLegend3DModule && (chart.legendSettings.position === 'Right' || chart.legendSettings.position === 'Left') ? chart.circularChartLegend3DModule.legendBounds.width : 0), series.actualHeight / 2) * series.size;\n    chart.innerRadius[seriesIndex] = series.coefficient * chart.circularRadius[seriesIndex];\n    this.createPolygons(series, chart);\n    if (this.dataLabel.visible) {\n      chart.circularChartDataLabel3DModule.renderDataLabel(series, chart);\n    }\n    appendChildElement(false, chart.svgObject, chart.groupElement, chart.redraw);\n    var size = new Size(chart.availableSize.width, chart.availableSize.height);\n    chart.graphics.prepareView(0, chart.depth, chart.rotation, chart.tilt, size, chart);\n    chart.graphics.view(chart.svgObject, chart);\n  };\n  /**\n   * Calculates the size of the series based on the chart settings.\n   *\n   * @param {CircularChart3D} chart - The circular 3D chart instance.\n   * @param {CircularChart3DSeries} series - The series for which to calculate the size.\n   * @returns {{ centerX: number, centerY: number }} - The calculated center coordinates.\n   */\n  CircularChart3DSeries.prototype.calculateSize = function (chart, series) {\n    var legend = chart.legendSettings;\n    var legXSpace = 0;\n    var legYSpace = 0;\n    var legendPosition = chart.circularChartLegend3DModule ? chart.circularChartLegend3DModule.position : 'Auto';\n    var title = chart.title;\n    var subTitle = chart.subTitle;\n    var titleLocation = chart.titleLocation;\n    var subTitleLocation = chart.subTitleLocation;\n    var titleTextOverflow = chart.titleStyle.textOverflow;\n    var subTitleTextOverflow = chart.subTitleStyle.textOverflow;\n    var titleEnable = title && titleTextOverflow === 'Wrap' ? true : false;\n    var subTitleEnable = subTitle && subTitleTextOverflow === 'Wrap' ? true : false;\n    if (legend.visible && chart.circularChartLegend3DModule && legendPosition !== 'Custom') {\n      if (legendPosition === 'Right' || legendPosition === 'Left') {\n        legXSpace = legendPosition.toLowerCase() === 'right' ? chart.margin.right : chart.margin.left + chart.circularChartLegend3DModule.legendBounds.width;\n      } else {\n        legYSpace = legendPosition === 'Top' ? chart.margin.top : legendPosition === 'Bottom' ? chart.margin.bottom + chart.circularChartLegend3DModule.legendBounds.height : 0;\n      }\n    }\n    series.actualWidth = chart.availableSize.width - legXSpace;\n    var centerx = series.actualWidth * 0.5 + (legendPosition === 'Left' ? legXSpace : 0);\n    if (titleEnable || subTitleEnable) {\n      var yOffset = titleLocation.size.height + (subTitleEnable ? subTitleLocation.size.height : 0) + legYSpace;\n      series.actualHeight = chart.svgObject.height.baseVal.value - yOffset;\n      var centery = series.actualHeight * 0.5 + (titleLocation.size.height + (subTitleEnable ? subTitleLocation.size.height : 0));\n      return {\n        centerX: centerx,\n        centerY: centery\n      };\n    } else {\n      var yOffset = (title ? titleLocation.y : 0) + legYSpace;\n      series.actualHeight = chart.svgObject.height.baseVal.value - yOffset;\n      var centery = series.actualHeight * 0.5 + (legendPosition === 'Top' ? yOffset : title ? titleLocation.y : 0);\n      return {\n        centerX: centerx,\n        centerY: centery\n      };\n    }\n  };\n  /**\n   * Creates polygons for a 3D circular chart series.\n   *\n   * @param {CircularChart3DSeries} series - The CircularChart3D series for which to create polygons.\n   * @param {CircularChart3D} chart - The circular 3D chart instance.\n   * @returns {CircularChart3DPolygon[][]} - The array of created polygons.\n   */\n  CircularChart3DSeries.prototype.createPolygons = function (series, chart) {\n    var segments = [];\n    var polygons = [];\n    var seg;\n    var style;\n    var pointIndex;\n    var polygonCollection = [];\n    if (series.segments.length === 0) {\n      segments = this.createPoints(series, chart);\n    } else {\n      segments = series.segments;\n    }\n    var segmentsLength = segments.length;\n    for (var i = 0; i < segmentsLength; i++) {\n      seg = segments[i];\n      if (seg.visible) {\n        pointIndex = segments[i].pointIndex;\n        style = {\n          opacity: series.opacity,\n          interior: series.points[pointIndex].color\n        };\n        polygonCollection = this.createSector(seg, chart, style, series.index);\n        if (polygonCollection !== null) {\n          for (var k = 0; k < polygonCollection.length; k++) {\n            if (!polygons[k]) {\n              polygons[k] = [];\n            }\n            if (polygonCollection[k] !== null) {\n              for (var j = 0; j < polygonCollection[k].length; j++) {\n                polygons[k].push(polygonCollection[k][j]);\n              }\n            }\n          }\n        }\n      }\n    }\n    for (var i = 0; i < polygons.length; i++) {\n      for (var k = 0; k < polygons[i].length; k++) {\n        var polygone = polygons[i][k];\n        chart.circular3DPolygon.push(polygone);\n      }\n    }\n    return null;\n  };\n  /**\n   * Creates sectors for a circular 3D chart based on the specified parameters.\n   *\n   * @param {CircularChart3DSegments} segment - The CircularChart3DSegments instance defining the segment.\n   * @param {CircularChart3D} chart - The circular 3D chart instance.\n   * @param {CircularChart3DSeriesStyle} style - The CircularChart3DSeriesStyle defining the style of the sectors.\n   * @param {number} seriesIndex - The index of the series to which the sectors belong.\n   * @returns {CircularChart3DPolygon[][]} - An array of CircularChart3DPolygon arrays representing the created sectors.\n   */\n  CircularChart3DSeries.prototype.createSector = function (segment, chart, style, seriesIndex) {\n    var count = Math.ceil(segment.actualEndValue / 6);\n    var degreesToRadians = Math.PI / 180;\n    var index = 0;\n    var depth = chart.depth;\n    if (count < 1) {\n      return null;\n    }\n    var polygonCollection = [];\n    var endValue = segment.actualEndValue / count;\n    var outputPoints = [];\n    var inputPoints = [];\n    for (var i = 0; i < count + 1; i++) {\n      var ox = segment.center.x + segment.radius * Math.cos((segment.actualStartValue + i * endValue) * degreesToRadians);\n      var oy = segment.center.y + segment.radius * Math.sin((segment.actualStartValue + i * endValue) * degreesToRadians);\n      outputPoints[i] = {\n        x: ox,\n        y: oy\n      };\n      var ix = segment.center.x + segment.inSideRadius * Math.cos((segment.actualStartValue + i * endValue) * degreesToRadians);\n      var iy = segment.center.y + segment.inSideRadius * Math.sin((segment.actualStartValue + i * endValue) * degreesToRadians);\n      inputPoints[i] = {\n        x: ix,\n        y: iy\n      };\n    }\n    var originPolygon = [];\n    var vts = [];\n    for (var i = 0; i < count; i++) {\n      vts = [this.vector(outputPoints[i].x, outputPoints[i].y, 0), this.vector(outputPoints[i].x, outputPoints[i].y, depth), this.vector(outputPoints[i + 1].x, outputPoints[i + 1].y, depth), this.vector(outputPoints[i + 1].x, outputPoints[i + 1].y, 0)];\n      originPolygon[i] = chart.polygon.polygon3D(vts, null, segment.index, null, null, style.opacity, style.interior, index.toString() + '-region' + '-series-' + seriesIndex + '-point-' + segment.index, chart.groupElement, segment.accessibilityText);\n      index++;\n    }\n    polygonCollection[1] = originPolygon;\n    if (segment.inSideRadius > 0) {\n      var iPlgs = [];\n      for (var i = 0; i < count; i++) {\n        vts = [this.vector(inputPoints[i].x, inputPoints[i].y, 0), this.vector(inputPoints[i].x, inputPoints[i].y, depth), this.vector(inputPoints[i + 1].x, inputPoints[i + 1].y, depth), this.vector(inputPoints[i + 1].x, inputPoints[i + 1].y, 0)];\n        iPlgs[i] = chart.polygon.polygon3D(vts, null, segment.index, null, null, style.opacity, style.interior, index.toString() + '-region' + '-series-' + seriesIndex + '-point-' + segment.index, chart.groupElement, segment.accessibilityText);\n        index++;\n      }\n      polygonCollection[3] = iPlgs;\n    }\n    var tVtxs = [];\n    var bVtxs = [];\n    for (var i = 0; i < count + 1; i++) {\n      tVtxs.push(this.vector(outputPoints[i].x, outputPoints[i].y, 0));\n      bVtxs.push(this.vector(outputPoints[i].x, outputPoints[i].y, depth));\n    }\n    if (segment.inSideRadius > 0) {\n      for (var i = count; i > -1; i--) {\n        tVtxs.push(this.vector(inputPoints[i].x, inputPoints[i].y, 0));\n        bVtxs.push(this.vector(inputPoints[i].x, inputPoints[i].y, depth));\n      }\n    } else {\n      tVtxs.push(segment.center);\n      bVtxs.push(this.vector(segment.center.x, segment.center.y, depth));\n    }\n    polygonCollection[0] = [];\n    polygonCollection[0].push(chart.polygon.polygon3D(tVtxs, null, segment.index, null, null, style.opacity, style.interior, index.toString() + '-region' + '-series-' + seriesIndex + '-point-' + segment.index, chart.groupElement, segment.accessibilityText));\n    index++;\n    polygonCollection[0].push(chart.polygon.polygon3D(bVtxs, null, segment.index, null, null, style.opacity, style.interior, index.toString() + '-region' + '-series-' + seriesIndex + '-point-' + segment.index, chart.groupElement, segment.accessibilityText));\n    index++;\n    if (segment.inSideRadius > 0) {\n      var rvts = [this.vector(outputPoints[0].x, outputPoints[0].y, 0), this.vector(outputPoints[0].x, outputPoints[0].y, depth), this.vector(inputPoints[0].x, inputPoints[0].y, depth), this.vector(inputPoints[0].x, inputPoints[0].y, 0)];\n      var lvts = [this.vector(outputPoints[count].x, outputPoints[count].y, 0), this.vector(outputPoints[count].x, outputPoints[count].y, depth), this.vector(inputPoints[count].x, inputPoints[count].y, depth), this.vector(inputPoints[count].x, inputPoints[count].y, 0)];\n      polygonCollection[2] = [];\n      polygonCollection[2].push(chart.polygon.polygon3D(rvts, null, segment.index, null, null, style.opacity, style.interior, index.toString() + '-region' + '-series-' + seriesIndex + '-point-' + segment.index, chart.groupElement, segment.accessibilityText));\n      index++;\n      polygonCollection[2].push(chart.polygon.polygon3D(lvts, null, segment.index, null, null, style.opacity, style.interior, index.toString() + '-region' + '-series-' + seriesIndex + '-point-' + segment.index, chart.groupElement, segment.accessibilityText));\n      index++;\n    } else {\n      var rvts = [this.vector(outputPoints[0].x, outputPoints[0].y, 0), this.vector(outputPoints[0].x, outputPoints[0].y, depth), this.vector(segment.center.x, segment.center.y, depth), this.vector(segment.center.x, segment.center.y, 0)];\n      var lvts = [this.vector(outputPoints[count].x, outputPoints[count].y, 0), this.vector(outputPoints[count].x, outputPoints[count].y, depth), this.vector(segment.center.x, segment.center.y, depth), this.vector(segment.center.x, segment.center.y, 0)];\n      polygonCollection[2] = [];\n      polygonCollection[2].push(chart.polygon.polygon3D(rvts, null, segment.index, null, null, style.opacity, style.interior, index.toString() + '-region' + '-series-' + seriesIndex + '-point-' + segment.index, chart.groupElement, segment.accessibilityText));\n      index++;\n      polygonCollection[2].push(chart.polygon.polygon3D(lvts, null, segment.index, null, null, style.opacity, style.interior, index.toString() + '-region' + '-series-' + seriesIndex + '-point-' + segment.index, chart.groupElement, segment.accessibilityText));\n      index++;\n    }\n    return polygonCollection;\n  };\n  /**\n   * Creates CircularChart3DSegments based on the provided CircularChart3D series and circular 3D chart.\n   *\n   * @param {CircularChart3DSeries} series - The circular 3D series for which to generate points.\n   * @param {CircularChart3D} chart - The circular 3D chart instance.\n   * @returns {CircularChart3DSegments[]} - An array of CircularChart3DSegments created for the series.\n   */\n  CircularChart3DSeries.prototype.createPoints = function (series, chart) {\n    series.segments = [];\n    var size = this.calculateSize(chart, series);\n    var all = 0;\n    var visiblePoints = series.points;\n    var count = visiblePoints.length;\n    for (var j = 0; j < count; j++) {\n      if (visiblePoints[j].visible && !isNullOrUndefined(visiblePoints[j].y)) {\n        all += visiblePoints[j].y;\n      }\n    }\n    all = all !== 0 ? all : 1;\n    var coefficient = 360 / all;\n    var seriesIndex = series.index;\n    var insideRadius = chart.innerRadius[seriesIndex];\n    var yValues = this.getYValues(series.points);\n    var pieHeight = chart.depth;\n    var center;\n    var arcStartAngle = 0;\n    var arcEndAngle = 0;\n    var current = 0;\n    var pointIndex;\n    var value;\n    var rect = new Rect(0, 0, 0, 0);\n    var offset = {\n      X: 0,\n      Y: 0\n    };\n    var segment;\n    var segIndex = 0;\n    var radius = chart.circularRadius[seriesIndex];\n    for (var i = 0; i < count; i++) {\n      if (series.points[i].visible && !isNullOrUndefined(yValues[i])) {\n        pointIndex = series.points[i].index;\n        value = Math.abs(yValues[i]);\n        arcEndAngle = Math.abs(value) * (Math.PI * 2 / all);\n        rect.x = 0;\n        rect.y = 0;\n        var point = series.points[i];\n        if (series.isRadiusMapped) {\n          if (series.points[i].sliceRadius.indexOf('%') !== -1) {\n            point.radius = stringToNumber(series.points[i].sliceRadius, this.size / 2);\n          } else {\n            point.radius = parseInt(series.points[i].sliceRadius, 10);\n          }\n        } else {\n          point.radius = radius;\n        }\n        var accessibilityText = point.x + ':' + point.y + ', ' + series.name;\n        if (!isNullOrUndefined(value)) {\n          if (series.explode && (series.explodeIndex === point.index || !series.isExploded && series.explodeAll)) {\n            offset.X = Math.cos(2 * Math.PI * (current + value / 2) / all);\n            offset.Y = Math.sin(2 * Math.PI * (current + value / 2) / all);\n            rect.x = 0.01 * point.radius * offset.X * stringToNumber(series.explodeOffset, 100);\n            rect.y = 0.01 * point.radius * offset.Y * stringToNumber(series.explodeOffset, 100);\n          }\n          center = this.vector(rect.x + size.centerX, rect.y + size.centerY, 0);\n          segment = this.createSegment(center, coefficient * current, coefficient * value, pieHeight, point.radius, i, value, insideRadius, pointIndex, series, accessibilityText);\n          series.segments.push(segment);\n        }\n        this.addPieDataLabel(segIndex, yValues[i], arcStartAngle, arcStartAngle + arcEndAngle, point.radius, this.isChartRotated(chart) ? chart.depth + 5 : 0, center, series.points[i]);\n        segIndex++;\n        arcStartAngle += arcEndAngle;\n        current += value;\n      }\n    }\n    return series.segments;\n  };\n  /**\n   * Adds a data label to a circular 3D chart at the specified position and orientation.\n   *\n   * @param {number} x - The x-coordinate of the data label position.\n   * @param {number} y - The y-coordinate of the data label position.\n   * @param {number} startAngle - The starting angle of the pie slice in degrees.\n   * @param {number} endAngle - The ending angle of the pie slice in degrees.\n   * @param {number} radius - The radius of the pie slice.\n   * @param {number} startDepth - The depth at which the pie slice starts in the 3D space.\n   * @param {CircularChart3DVector} center - The center point of the pie chart in 3D space.\n   * @param {CircularChart3DPoints} point - The specific data point associated with the data label.\n   * @returns {void}\n   */\n  CircularChart3DSeries.prototype.addPieDataLabel = function (x, y, startAngle, endAngle, radius, startDepth, center, point) {\n    var angle = (startAngle + endAngle) / 2;\n    point.symbolLocation = {\n      x: 0,\n      y: 0,\n      radius: 0,\n      angle: 0\n    };\n    point.symbolLocation.x = x;\n    point.symbolLocation.y = y;\n    point.symbolLocation.radius = radius;\n    point.symbolLocation.angle = angle;\n    point.symbolLocation.center = center;\n    point.startDepth = startDepth;\n  };\n  /**\n   * Checks if the circular 3D chart is rotated.\n   *\n   * @param {CircularChart3D} chart - The circular 3D chart instance.\n   * @returns {boolean} - A boolean indicating whether the chart is rotated.\n   */\n  CircularChart3DSeries.prototype.isChartRotated = function (chart) {\n    var actualTiltView = Math.abs(chart.tilt % 360);\n    var actualRotateView = Math.abs(chart.rotation % 360);\n    if ((actualTiltView > 90 && actualTiltView < 270) !== (actualRotateView > 90 && actualRotateView < 270)) {\n      return true;\n    }\n    return false;\n  };\n  /**\n   * Creates a segment based on the provided parameters.\n   *\n   * @param {CircularChart3DVector} center - The center point of the segment.\n   * @param {number} start - The starting angle of the segment in radians.\n   * @param {number} end - The ending angle of the segment in radians.\n   * @param {number} height - The height of the segment.\n   * @param {number} radius - The radial distance from the center to the segment.\n   * @param {number} index - The index value of the segment.\n   * @param {number} yValue - The y value associated with the segment.\n   * @param {number} insideRadius - The inside radius of the segment.\n   * @param {number} pointIndex - The index of the point associated with the segment.\n   * @param {CircularChart3DSeries} series - The CircularChart3DSeries to which the segment belongs.\n   * @param {string} accessibilityText - The accessibility text of the segment.\n   * @returns {CircularChart3DSegments} - The created segment.\n   */\n  CircularChart3DSeries.prototype.createSegment = function (center, start, end, height, radius, index, yValue, insideRadius, pointIndex, series, accessibilityText) {\n    return {\n      startValue: start,\n      endValue: end,\n      depth: height,\n      radius: radius,\n      index: index,\n      yData: yValue,\n      center: center,\n      inSideRadius: insideRadius,\n      actualEndValue: end,\n      actualStartValue: start,\n      pointIndex: pointIndex,\n      series: series,\n      visible: true,\n      accessibilityText: accessibilityText\n    };\n  };\n  /**\n   * Creates a new Vector3D instance from provided coordinates.\n   *\n   * @param {number | { x: number, y: number }} vx - Either an object with x and y properties or the x-coordinate.\n   * @param {number} vy - The y-coordinate.\n   * @param {number} vz - The z-coordinate.\n   * @returns {CircularChart3DVector} - The new Vector3D instance.\n   */\n  CircularChart3DSeries.prototype.vector = function (vx, vy, vz) {\n    return {\n      x: vx,\n      y: vy,\n      z: vz\n    };\n  };\n  /**\n   * Gets the `Y` values from an array of circular 3D series points.\n   *\n   * @param {CircularChart3DPoints[]} points - An array of CircularChart3DPoints.\n   * @returns {number[]} - An array containing the Y values extracted from the CircularChart3DPoints.\n   */\n  CircularChart3DSeries.prototype.getYValues = function (points) {\n    var values = [];\n    var length = points.length;\n    for (var i = 0; i < length; i++) {\n      values.push(points[i].y);\n    }\n    return values;\n  };\n  /**\n   * Updates the total bounds to encompass the maximum area covered by the specified bound and the current total bounds.\n   *\n   * @param {Rect} totalBound - The current total bounds to be updated.\n   * @param {Rect} bound - The new bound to compare and update the total bounds.\n   * @returns {void}\n   * @private\n   */\n  CircularChart3DSeries.prototype.findMaxBounds = function (totalBound, bound) {\n    totalBound.x = bound.x < totalBound.x ? bound.x : totalBound.x;\n    totalBound.y = bound.y < totalBound.y ? bound.y : totalBound.y;\n    totalBound.height = bound.y + bound.height > totalBound.height ? bound.y + bound.height : totalBound.height;\n    totalBound.width = bound.x + bound.width > totalBound.width ? bound.x + bound.width : totalBound.width;\n  };\n  /**\n   * Sets the empty point value for null points in the circular 3D chart series.\n   *\n   * @param {CircularChart3DPoints} point - The data point to be checked and modified.\n   * @param {number} index - The index of the data point.\n   * @param {Object} data - The data object containing information about the data point.\n   * @param {CircularChart3D} chart - The circular 3D chart instance.\n   * @returns {void}\n   */\n  CircularChart3DSeries.prototype.setEmptyPoint = function (point, index, data, chart) {\n    if (!(isNullOrUndefined(point.y) || isNaN(point.y))) {\n      return null;\n    }\n    point.color = this.emptyPointSettings.fill || point.color;\n    var previous;\n    var next;\n    switch (this.emptyPointSettings.mode) {\n      case 'Zero':\n        point.y = 0;\n        point.visible = true;\n        break;\n      case 'Average':\n        previous = data[index - 1] ? data[index - 1][this.yName] || 0 : 0;\n        next = data[index + 1] ? data[index + 1][this.yName] || 0 : 0;\n        point.y = (Math.abs(previous) + Math.abs(next)) / 2;\n        point.separatorY = chart.intl.formatNumber(point.y, {\n          useGrouping: chart.useGroupingSeparator\n        });\n        this.sumOfPoints += point.y;\n        point.visible = true;\n        break;\n      default:\n        point.visible = false;\n        break;\n    }\n  };\n  __decorate([Property('')], CircularChart3DSeries.prototype, \"dataSource\", void 0);\n  __decorate([Property()], CircularChart3DSeries.prototype, \"query\", void 0);\n  __decorate([Property('')], CircularChart3DSeries.prototype, \"xName\", void 0);\n  __decorate([Property('')], CircularChart3DSeries.prototype, \"name\", void 0);\n  __decorate([Property('')], CircularChart3DSeries.prototype, \"tooltipMappingName\", void 0);\n  __decorate([Property('')], CircularChart3DSeries.prototype, \"yName\", void 0);\n  __decorate([Property(true)], CircularChart3DSeries.prototype, \"visible\", void 0);\n  __decorate([Complex(null, Animation)], CircularChart3DSeries.prototype, \"animation\", void 0);\n  __decorate([Property('SeriesType')], CircularChart3DSeries.prototype, \"legendShape\", void 0);\n  __decorate([Property('')], CircularChart3DSeries.prototype, \"legendImageUrl\", void 0);\n  __decorate([Property('')], CircularChart3DSeries.prototype, \"pointColorMapping\", void 0);\n  __decorate([Complex({}, CircularChart3DDataLabelSettings)], CircularChart3DSeries.prototype, \"dataLabel\", void 0);\n  __decorate([Property([])], CircularChart3DSeries.prototype, \"palettes\", void 0);\n  __decorate([Property(null)], CircularChart3DSeries.prototype, \"radius\", void 0);\n  __decorate([Property('0')], CircularChart3DSeries.prototype, \"innerRadius\", void 0);\n  __decorate([Property(true)], CircularChart3DSeries.prototype, \"enableTooltip\", void 0);\n  __decorate([Property(false)], CircularChart3DSeries.prototype, \"explode\", void 0);\n  __decorate([Property('30%')], CircularChart3DSeries.prototype, \"explodeOffset\", void 0);\n  __decorate([Property(false)], CircularChart3DSeries.prototype, \"explodeAll\", void 0);\n  __decorate([Property(null)], CircularChart3DSeries.prototype, \"explodeIndex\", void 0);\n  __decorate([Complex({\n    mode: 'Drop'\n  }, CircularChart3DEmptyPointSettings)], CircularChart3DSeries.prototype, \"emptyPointSettings\", void 0);\n  __decorate([Property(1)], CircularChart3DSeries.prototype, \"opacity\", void 0);\n  return CircularChart3DSeries;\n}(ChildProperty);\nexport { CircularChart3DSeries };\n/**\n * The `PieSeries3D` module is used to render circular 3D `Pie` and `Donut` series.\n */\nvar PieSeries3D = /** @class */function (_super) {\n  __extends(PieSeries3D, _super);\n  function PieSeries3D() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * To get the module name of the circular 3D chart pie series.\n   *\n   * @returns {string} - Returns the module name of the Pie series.\n   */\n  PieSeries3D.prototype.getModuleName = function () {\n    return 'PieSeries3D';\n  };\n  /**\n   * Destroys the circular 3D chart series.\n   *\n   * @returns {void}\n   * @private\n   */\n  PieSeries3D.prototype.destroy = function () {\n    /**\n     * Calling the destroy method here.\n     */\n  };\n  return PieSeries3D;\n}(CircularChart3DSeries);\nexport { PieSeries3D };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","Browser","ChildProperty","Complex","Property","getValue","isNullOrUndefined","Animation","appendChildElement","stringToNumber","Rect","Size","DataManager","pointRender","seriesRender","getCircular3DSeriesColor","CircularChart3DDataLabelSettings","CircularChart3DPoints","visible","isExplode","argsData","CircularChart3DEmptyPointSettings","_super","apply","CircularChart3DSeries","_this","points","sumOfPoints","isRectSeries","clipRect","category","rightSidePoints","leftSidePoints","segments","isExploded","refreshDataManager","chart","render","dateSource","dataSource","query","dataManagerSuccess","result","count","dataManager","dataModule","getData","generateQuery","requiresCount","then","e","dataObject","name","series","data","allowServerDataBinding","trigger","resultData","getPoints","seriesCounts","visibleSeries","refreshChart","keys","findSumOfPoints","point","colors","palettes","theme","setPoints","y","pushPoints","index","explodeAll","explodeIndex","color","cancel","fill","push","yName","isNaN","Math","abs","x","xName","percentage","toFixed","legendImageUrl","pointColorMapping","text","originalText","dataLabel","tooltip","tooltipMappingName","sliceRadius","radius","separatorY","intl","formatNumber","useGrouping","useGroupingSeparator","setEmptyPoint","draw","marginRatio","seriesIndex","indexOf","calculateSize","seriesRadius","isDevice","position","parseInt","isRadiusMapped","size","coefficient","innerRadius","circularRadius","min","actualWidth","legendSettings","circularChartLegend3DModule","legendBounds","width","actualHeight","createPolygons","circularChartDataLabel3DModule","renderDataLabel","svgObject","groupElement","redraw","availableSize","height","graphics","prepareView","depth","rotation","tilt","view","legend","legXSpace","legYSpace","legendPosition","title","subTitle","titleLocation","subTitleLocation","titleTextOverflow","titleStyle","textOverflow","subTitleTextOverflow","subTitleStyle","titleEnable","subTitleEnable","toLowerCase","margin","right","left","top","bottom","centerx","yOffset","baseVal","value","centery","centerX","centerY","polygons","seg","style","pointIndex","polygonCollection","createPoints","segmentsLength","opacity","interior","createSector","k","j","polygone","circular3DPolygon","segment","ceil","actualEndValue","degreesToRadians","PI","endValue","outputPoints","inputPoints","ox","center","cos","actualStartValue","oy","sin","ix","inSideRadius","iy","originPolygon","vts","vector","polygon","polygon3D","toString","accessibilityText","iPlgs","tVtxs","bVtxs","rvts","lvts","all","visiblePoints","insideRadius","yValues","getYValues","pieHeight","arcStartAngle","arcEndAngle","current","rect","offset","X","Y","segIndex","explode","explodeOffset","createSegment","addPieDataLabel","isChartRotated","startAngle","endAngle","startDepth","angle","symbolLocation","actualTiltView","actualRotateView","start","end","yValue","startValue","yData","vx","vy","vz","z","values","findMaxBounds","totalBound","bound","emptyPointSettings","previous","next","mode","PieSeries3D","getModuleName","destroy"],"sources":["C:/Users/mkfun/Desktop/ct assignment/admin/node_modules/@syncfusion/ej2-charts/src/circularchart3d/renderer/series.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * Circular 3D chart series.\n */\nimport { Browser, ChildProperty, Complex, Property, getValue, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { Animation } from '../../common/model/base';\nimport { appendChildElement, stringToNumber } from '../../common/utils/helper';\nimport { Rect, Size } from '@syncfusion/ej2-svg-base';\nimport { DataManager } from '@syncfusion/ej2-data';\nimport { pointRender, seriesRender } from '../../common/model/constants';\nimport { getCircular3DSeriesColor } from '../model/theme';\nimport { CircularChart3DDataLabelSettings } from './dataLabel';\n/**\n * Model representing data points for the circular 3D series.\n *\n * @public\n */\nvar CircularChart3DPoints = /** @class */ (function () {\n    function CircularChart3DPoints() {\n        /**Circular 3D point visibility. */\n        this.visible = true;\n        /** @private */\n        this.isExplode = false;\n        /** @private  */\n        this.argsData = null;\n    }\n    return CircularChart3DPoints;\n}());\nexport { CircularChart3DPoints };\n/**\n * Configures settings for empty points in the circular 3D series.\n */\nvar CircularChart3DEmptyPointSettings = /** @class */ (function (_super) {\n    __extends(CircularChart3DEmptyPointSettings, _super);\n    function CircularChart3DEmptyPointSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property(null)\n    ], CircularChart3DEmptyPointSettings.prototype, \"fill\", void 0);\n    __decorate([\n        Property('Gap')\n    ], CircularChart3DEmptyPointSettings.prototype, \"mode\", void 0);\n    return CircularChart3DEmptyPointSettings;\n}(ChildProperty));\nexport { CircularChart3DEmptyPointSettings };\n/**\n *  Configures the series in a circular 3D chart.\n */\nvar CircularChart3DSeries = /** @class */ (function (_super) {\n    __extends(CircularChart3DSeries, _super);\n    function CircularChart3DSeries() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /** @private */\n        _this.points = [];\n        /** @private */\n        _this.sumOfPoints = 0;\n        /** @private */\n        _this.isRectSeries = true;\n        /** @private */\n        _this.clipRect = new Rect(0, 0, 0, 0);\n        /** @private */\n        _this.category = 'Series';\n        /** @private */\n        _this.rightSidePoints = [];\n        /** @private */\n        _this.leftSidePoints = [];\n        /** @private */\n        _this.segments = [];\n        /** @private */\n        _this.isExploded = false;\n        return _this;\n    }\n    /**\n     * Refreshes the DataManager for the circular 3D series.\n     *\n     * @private\n     * @param {CircularChart3D} chart - The instance of the circular 3D chart.\n     * @param {boolean} render - A boolean value indicating whether rendering is required.\n     * @returns {void}\n     */\n    CircularChart3DSeries.prototype.refreshDataManager = function (chart, render) {\n        var _this = this;\n        var dateSource = this.dataSource || chart.dataSource;\n        if (!(dateSource instanceof DataManager) && isNullOrUndefined(this.query)) {\n            this.dataManagerSuccess({ result: dateSource, count: dateSource.length }, chart, render);\n            return;\n        }\n        var dataManager = this.dataModule.getData(this.dataModule.generateQuery().requiresCount());\n        dataManager.then(function (e) { return _this.dataManagerSuccess(e, chart); });\n    };\n    /**\n     * Handles the success event when the DataManager fetches data for the circular 3D series.\n     *\n     * @private\n     * @param {Object} dataObject - Specifies the series data object.\n     * @param {Object} dataObject.result - The actual data.\n     * @param {number} dataObject.count - The count of data.\n     * @param {CircularChart3D} chart - The instance of the circular 3D chart.\n     * @param {boolean} [render=true] - A boolean value indicating whether rendering is required. Default is true.\n     * @returns {void}\n     */\n    CircularChart3DSeries.prototype.dataManagerSuccess = function (dataObject, chart, render) {\n        if (render === void 0) { render = true; }\n        var argsData = {\n            name: seriesRender, series: this, data: dataObject.result\n        };\n        chart.allowServerDataBinding = false;\n        chart.trigger(seriesRender, argsData);\n        this.resultData = dataObject.result !== '' ? dataObject.result : [];\n        if (!render) {\n            this.getPoints(this.resultData, chart);\n        }\n        if ((++chart.seriesCounts === chart.visibleSeries.length && render)) {\n            this.getPoints(this.resultData, chart);\n            chart.refreshChart();\n        }\n    };\n    /**\n     * Retrieves and processes data points for rendering on a circular 3D chart.\n     *\n     * @param {Object} result - An object containing the data points for the chart.\n     * @param {CircularChart3D}chart - The instance of the circular 3D chart.\n     * @returns {void}\n     */\n    CircularChart3DSeries.prototype.getPoints = function (result, chart) {\n        var length = Object.keys(result).length;\n        this.sumOfPoints = 0;\n        if (length === 0) {\n            this.points = [];\n            return null;\n        }\n        this.findSumOfPoints(result);\n        this.points = [];\n        var point;\n        var colors = this.palettes.length ? this.palettes : getCircular3DSeriesColor(chart.theme);\n        for (var i = 0; i < length; i++) {\n            point = this.setPoints(result, i, chart);\n            if (isNullOrUndefined(point.y)) {\n                point.visible = false;\n            }\n            this.pushPoints(point, colors, chart);\n        }\n    };\n    /**\n     * Sets point index and color for a circular 3D data point.\n     *\n     * @param {CircularChart3DPoints} point - The CircularChart3DPoints object representing the data point.\n     * @param {string[]} colors - An array specifying the point colors.\n     * @param {CircularChart3D} chart - The instance of the circular 3D chart.\n     * @returns {void}\n     */\n    CircularChart3DSeries.prototype.pushPoints = function (point, colors, chart) {\n        point.index = this.points.length;\n        point.isExplode = this.explodeAll || (point.index === this.explodeIndex);\n        point.color = point.color || colors[point.index % colors.length];\n        var argsData = {\n            cancel: false, name: pointRender, series: this, point: point,\n            fill: point.color\n        };\n        chart.trigger(pointRender, argsData);\n        point.color = argsData.fill;\n        point.visible = !argsData.cancel;\n        this.points.push(point);\n    };\n    /**\n     * Calculates the sum of points in the circular 3D series.\n     *\n     * @param {Object} result - The result object containing data points.\n     * @returns {void}\n     */\n    CircularChart3DSeries.prototype.findSumOfPoints = function (result) {\n        var length = Object.keys(result).length;\n        for (var i = 0; i < length; i++) {\n            if (!isNullOrUndefined(result[i]) &&\n                !isNullOrUndefined(result[i][this.yName]) && !isNaN(result[i][this.yName])) {\n                this.sumOfPoints += Math.abs(result[i][this.yName]);\n            }\n        }\n    };\n    /**\n     * Sets x, y, and text points from the specified data source.\n     *\n     * @param {Object} data - The data source containing information for the point.\n     * @param {number} index - The index specifying the position in the data array.\n     * @param {CircularChart3D} chart - Specifies the circular 3D chart instance.\n     * @returns {CircularChart3DPoints} - Returns the CircularChart3DPoints object representing the data point.\n     */\n    CircularChart3DSeries.prototype.setPoints = function (data, index, chart) {\n        var point = new CircularChart3DPoints();\n        point.x = getValue(this.xName, data[index]);\n        point.y = getValue(this.yName, data[index]);\n        point.percentage = (+(point.y / this.sumOfPoints * 100).toFixed(2));\n        point.legendImageUrl = getValue(this.legendImageUrl, data[index]);\n        point.color = getValue(this.pointColorMapping, data[index]);\n        point.text = point.originalText = getValue(this.dataLabel.name || '', data[index]);\n        point.tooltip = getValue(this.tooltipMappingName || '', data[index]);\n        point.sliceRadius = getValue(this.radius ? this.radius : '80%', data[index]);\n        point.sliceRadius = isNullOrUndefined(point.sliceRadius) ? '80%' : point.sliceRadius;\n        point.separatorY = chart.intl.formatNumber(point.y, { useGrouping: chart.useGroupingSeparator });\n        this.setEmptyPoint(point, index, data, chart);\n        return point;\n    };\n    /**\n     * Draws the circular 3D series on the chart.\n     *\n     * @param {CircularChart3DSeries} series - The series to be drawn.\n     * @param {CircularChart3D} chart - The circular 3D chart instance.\n     * @returns {void}\n     * @private\n     */\n    CircularChart3DSeries.prototype.draw = function (series, chart) {\n        var marginRatio = 0.03;\n        var seriesIndex = chart.visibleSeries.indexOf(series);\n        this.calculateSize(chart, series);\n        var seriesRadius = series.radius ? series.radius : (Browser.isDevice && series.dataLabel.position === 'Outside') ? '40%' : '80%';\n        var radius = parseInt(seriesRadius, 10);\n        if (!((seriesRadius.indexOf('%') !== -1 || typeof radius === 'number') && !isNaN(radius))) {\n            this.isRadiusMapped = true;\n        }\n        series.size = this.isRadiusMapped ? 0.8 : parseInt(seriesRadius, 10) / 100;\n        series.coefficient = parseInt(series.innerRadius, 10) / 100;\n        chart.circularRadius[seriesIndex] =\n            (((1 - marginRatio) * Math.min(series.actualWidth / 2 - ((chart.legendSettings.visible && chart.circularChartLegend3DModule && (chart.legendSettings.position === 'Right' ||\n                chart.legendSettings.position === 'Left')) ? chart.circularChartLegend3DModule.legendBounds.width : 0), series.actualHeight / 2)) * series.size);\n        chart.innerRadius[seriesIndex] =\n            series.coefficient * chart.circularRadius[seriesIndex];\n        this.createPolygons(series, chart);\n        if (this.dataLabel.visible) {\n            chart.circularChartDataLabel3DModule.renderDataLabel(series, chart);\n        }\n        appendChildElement(false, chart.svgObject, chart.groupElement, chart.redraw);\n        var size = new Size(chart.availableSize.width, chart.availableSize.height);\n        chart.graphics.prepareView(0, chart.depth, chart.rotation, chart.tilt, size, chart);\n        chart.graphics.view(chart.svgObject, chart);\n    };\n    /**\n     * Calculates the size of the series based on the chart settings.\n     *\n     * @param {CircularChart3D} chart - The circular 3D chart instance.\n     * @param {CircularChart3DSeries} series - The series for which to calculate the size.\n     * @returns {{ centerX: number, centerY: number }} - The calculated center coordinates.\n     */\n    CircularChart3DSeries.prototype.calculateSize = function (chart, series) {\n        var legend = chart.legendSettings;\n        var legXSpace = 0;\n        var legYSpace = 0;\n        var legendPosition = chart.circularChartLegend3DModule ? chart.circularChartLegend3DModule.position : 'Auto';\n        var title = chart.title;\n        var subTitle = chart.subTitle;\n        var titleLocation = chart.titleLocation;\n        var subTitleLocation = chart.subTitleLocation;\n        var titleTextOverflow = chart.titleStyle.textOverflow;\n        var subTitleTextOverflow = chart.subTitleStyle.textOverflow;\n        var titleEnable = (title &&\n            (titleTextOverflow === 'Wrap')) ? true : false;\n        var subTitleEnable = (subTitle &&\n            (subTitleTextOverflow === 'Wrap')) ? true : false;\n        if (legend.visible && chart.circularChartLegend3DModule && legendPosition !== 'Custom') {\n            if (legendPosition === 'Right' || legendPosition === 'Left') {\n                legXSpace = (legendPosition.toLowerCase() === 'right') ?\n                    chart.margin.right : chart.margin.left + chart.circularChartLegend3DModule.legendBounds.width;\n            }\n            else {\n                legYSpace = (legendPosition === 'Top') ? chart.margin.top :\n                    ((legendPosition === 'Bottom') ? chart.margin.bottom + chart.circularChartLegend3DModule.legendBounds.height : 0);\n            }\n        }\n        series.actualWidth = chart.availableSize.width - legXSpace;\n        var centerx = (series.actualWidth * 0.5) + ((legendPosition === 'Left') ? legXSpace : 0);\n        if (titleEnable || subTitleEnable) {\n            var yOffset = titleLocation.size.height + (subTitleEnable ? subTitleLocation.size.height : 0) + legYSpace;\n            series.actualHeight = chart.svgObject.height.baseVal.value - yOffset;\n            var centery = series.actualHeight * 0.5 + (titleLocation.size.height + (subTitleEnable ? subTitleLocation.size.height : 0));\n            return { centerX: centerx, centerY: centery };\n        }\n        else {\n            var yOffset = ((title) ? titleLocation.y : 0) + legYSpace;\n            series.actualHeight = chart.svgObject.height.baseVal.value - yOffset;\n            var centery = series.actualHeight * 0.5 + ((legendPosition === 'Top') ?\n                yOffset : ((title) ? (titleLocation.y) : 0));\n            return { centerX: centerx, centerY: centery };\n        }\n    };\n    /**\n     * Creates polygons for a 3D circular chart series.\n     *\n     * @param {CircularChart3DSeries} series - The CircularChart3D series for which to create polygons.\n     * @param {CircularChart3D} chart - The circular 3D chart instance.\n     * @returns {CircularChart3DPolygon[][]} - The array of created polygons.\n     */\n    CircularChart3DSeries.prototype.createPolygons = function (series, chart) {\n        var segments = [];\n        var polygons = [];\n        var seg;\n        var style;\n        var pointIndex;\n        var polygonCollection = [];\n        if (series.segments.length === 0) {\n            segments = this.createPoints(series, chart);\n        }\n        else {\n            segments = series.segments;\n        }\n        var segmentsLength = segments.length;\n        for (var i = 0; i < segmentsLength; i++) {\n            seg = segments[i];\n            if (seg.visible) {\n                pointIndex = segments[i].pointIndex;\n                style = {\n                    opacity: series.opacity,\n                    interior: series.points[pointIndex].color\n                };\n                polygonCollection = this.createSector(seg, chart, style, series.index);\n                if (polygonCollection !== null) {\n                    for (var k = 0; k < polygonCollection.length; k++) {\n                        if (!polygons[k]) {\n                            polygons[k] = [];\n                        }\n                        if (polygonCollection[k] !== null) {\n                            for (var j = 0; j < polygonCollection[k].length; j++) {\n                                polygons[k].push(polygonCollection[k][j]);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        for (var i = 0; i < polygons.length; i++) {\n            for (var k = 0; k < polygons[i].length; k++) {\n                var polygone = (polygons[i][k]);\n                chart.circular3DPolygon.push(polygone);\n            }\n        }\n        return null;\n    };\n    /**\n     * Creates sectors for a circular 3D chart based on the specified parameters.\n     *\n     * @param {CircularChart3DSegments} segment - The CircularChart3DSegments instance defining the segment.\n     * @param {CircularChart3D} chart - The circular 3D chart instance.\n     * @param {CircularChart3DSeriesStyle} style - The CircularChart3DSeriesStyle defining the style of the sectors.\n     * @param {number} seriesIndex - The index of the series to which the sectors belong.\n     * @returns {CircularChart3DPolygon[][]} - An array of CircularChart3DPolygon arrays representing the created sectors.\n     */\n    CircularChart3DSeries.prototype.createSector = function (segment, chart, style, seriesIndex) {\n        var count = Math.ceil(segment.actualEndValue / 6);\n        var degreesToRadians = Math.PI / 180;\n        var index = 0;\n        var depth = chart.depth;\n        if (count < 1) {\n            return null;\n        }\n        var polygonCollection = [];\n        var endValue = segment.actualEndValue / count;\n        var outputPoints = [];\n        var inputPoints = [];\n        for (var i = 0; i < count + 1; i++) {\n            var ox = segment.center.x + segment.radius * Math.cos((segment.actualStartValue + i * endValue) * degreesToRadians);\n            var oy = segment.center.y + segment.radius * Math.sin((segment.actualStartValue + i * endValue) * degreesToRadians);\n            outputPoints[i] = { x: ox, y: oy };\n            var ix = segment.center.x +\n                segment.inSideRadius * Math.cos((segment.actualStartValue + i * endValue) * degreesToRadians);\n            var iy = segment.center.y +\n                segment.inSideRadius * Math.sin((segment.actualStartValue + i * endValue) * degreesToRadians);\n            inputPoints[i] = { x: ix, y: iy };\n        }\n        var originPolygon = [];\n        var vts = [];\n        for (var i = 0; i < count; i++) {\n            vts = [\n                this.vector(outputPoints[i].x, outputPoints[i].y, 0),\n                this.vector(outputPoints[i].x, outputPoints[i].y, depth),\n                this.vector(outputPoints[i + 1].x, outputPoints[i + 1].y, depth),\n                this.vector(outputPoints[i + 1].x, outputPoints[i + 1].y, 0)\n            ];\n            originPolygon[i] = chart.polygon.polygon3D(vts, null, segment.index, null, null, style.opacity, style.interior, index.toString() + '-region' + '-series-' + seriesIndex + '-point-' + segment.index, chart.groupElement, segment.accessibilityText);\n            index++;\n        }\n        polygonCollection[1] = originPolygon;\n        if (segment.inSideRadius > 0) {\n            var iPlgs = [];\n            for (var i = 0; i < count; i++) {\n                vts = [\n                    this.vector(inputPoints[i].x, inputPoints[i].y, 0),\n                    this.vector(inputPoints[i].x, inputPoints[i].y, depth),\n                    this.vector(inputPoints[i + 1].x, inputPoints[i + 1].y, depth),\n                    this.vector(inputPoints[i + 1].x, inputPoints[i + 1].y, 0)\n                ];\n                iPlgs[i] = chart.polygon.polygon3D(vts, null, segment.index, null, null, style.opacity, style.interior, index.toString() + '-region' + '-series-' + seriesIndex + '-point-' + segment.index, chart.groupElement, segment.accessibilityText);\n                index++;\n            }\n            polygonCollection[3] = iPlgs;\n        }\n        var tVtxs = [];\n        var bVtxs = [];\n        for (var i = 0; i < count + 1; i++) {\n            tVtxs.push(this.vector(outputPoints[i].x, outputPoints[i].y, 0));\n            bVtxs.push(this.vector(outputPoints[i].x, outputPoints[i].y, depth));\n        }\n        if (segment.inSideRadius > 0) {\n            for (var i = count; i > -1; i--) {\n                tVtxs.push(this.vector(inputPoints[i].x, inputPoints[i].y, 0));\n                bVtxs.push(this.vector(inputPoints[i].x, inputPoints[i].y, depth));\n            }\n        }\n        else {\n            tVtxs.push(segment.center);\n            bVtxs.push(this.vector(segment.center.x, segment.center.y, depth));\n        }\n        polygonCollection[0] = [];\n        polygonCollection[0].push(chart.polygon.polygon3D(tVtxs, null, segment.index, null, null, style.opacity, style.interior, index.toString() + '-region' + '-series-' + seriesIndex + '-point-' + segment.index, chart.groupElement, segment.accessibilityText));\n        index++;\n        polygonCollection[0].push(chart.polygon.polygon3D(bVtxs, null, segment.index, null, null, style.opacity, style.interior, index.toString() + '-region' + '-series-' + seriesIndex + '-point-' + segment.index, chart.groupElement, segment.accessibilityText));\n        index++;\n        if (segment.inSideRadius > 0) {\n            var rvts = [\n                this.vector(outputPoints[0].x, outputPoints[0].y, 0),\n                this.vector(outputPoints[0].x, outputPoints[0].y, depth),\n                this.vector(inputPoints[0].x, inputPoints[0].y, depth),\n                this.vector(inputPoints[0].x, inputPoints[0].y, 0)\n            ];\n            var lvts = [\n                this.vector(outputPoints[count].x, outputPoints[count].y, 0),\n                this.vector(outputPoints[count].x, outputPoints[count].y, depth),\n                this.vector(inputPoints[count].x, inputPoints[count].y, depth),\n                this.vector(inputPoints[count].x, inputPoints[count].y, 0)\n            ];\n            polygonCollection[2] = [];\n            polygonCollection[2].push(chart.polygon.polygon3D(rvts, null, segment.index, null, null, style.opacity, style.interior, index.toString() + '-region' + '-series-' + seriesIndex + '-point-' + segment.index, chart.groupElement, segment.accessibilityText));\n            index++;\n            polygonCollection[2].push(chart.polygon.polygon3D(lvts, null, segment.index, null, null, style.opacity, style.interior, index.toString() + '-region' + '-series-' + seriesIndex + '-point-' + segment.index, chart.groupElement, segment.accessibilityText));\n            index++;\n        }\n        else {\n            var rvts = [\n                this.vector(outputPoints[0].x, outputPoints[0].y, 0),\n                this.vector(outputPoints[0].x, outputPoints[0].y, depth),\n                this.vector(segment.center.x, segment.center.y, depth),\n                this.vector(segment.center.x, segment.center.y, 0)\n            ];\n            var lvts = [\n                this.vector(outputPoints[count].x, outputPoints[count].y, 0),\n                this.vector(outputPoints[count].x, outputPoints[count].y, depth),\n                this.vector(segment.center.x, segment.center.y, depth),\n                this.vector(segment.center.x, segment.center.y, 0)\n            ];\n            polygonCollection[2] = [];\n            polygonCollection[2].push(chart.polygon.polygon3D(rvts, null, segment.index, null, null, style.opacity, style.interior, index.toString() + '-region' + '-series-' + seriesIndex + '-point-' + segment.index, chart.groupElement, segment.accessibilityText));\n            index++;\n            polygonCollection[2].push(chart.polygon.polygon3D(lvts, null, segment.index, null, null, style.opacity, style.interior, index.toString() + '-region' + '-series-' + seriesIndex + '-point-' + segment.index, chart.groupElement, segment.accessibilityText));\n            index++;\n        }\n        return polygonCollection;\n    };\n    /**\n     * Creates CircularChart3DSegments based on the provided CircularChart3D series and circular 3D chart.\n     *\n     * @param {CircularChart3DSeries} series - The circular 3D series for which to generate points.\n     * @param {CircularChart3D} chart - The circular 3D chart instance.\n     * @returns {CircularChart3DSegments[]} - An array of CircularChart3DSegments created for the series.\n     */\n    CircularChart3DSeries.prototype.createPoints = function (series, chart) {\n        series.segments = [];\n        var size = this.calculateSize(chart, series);\n        var all = 0;\n        var visiblePoints = series.points;\n        var count = visiblePoints.length;\n        for (var j = 0; j < count; j++) {\n            if (visiblePoints[j].visible && !isNullOrUndefined(visiblePoints[j].y)) {\n                all += visiblePoints[j].y;\n            }\n        }\n        all = all !== 0 ? all : 1;\n        var coefficient = 360 / all;\n        var seriesIndex = series.index;\n        var insideRadius = chart.innerRadius[seriesIndex];\n        var yValues = this.getYValues(series.points);\n        var pieHeight = chart.depth;\n        var center;\n        var arcStartAngle = 0;\n        var arcEndAngle = 0;\n        var current = 0;\n        var pointIndex;\n        var value;\n        var rect = new Rect(0, 0, 0, 0);\n        var offset = { X: 0, Y: 0 };\n        var segment;\n        var segIndex = 0;\n        var radius = chart.circularRadius[seriesIndex];\n        for (var i = 0; i < count; i++) {\n            if (series.points[i].visible && !isNullOrUndefined(yValues[i])) {\n                pointIndex = series.points[i].index;\n                value = Math.abs(yValues[i]);\n                arcEndAngle = Math.abs(value) * ((Math.PI * 2) / all);\n                rect.x = 0;\n                rect.y = 0;\n                var point = series.points[i];\n                if (series.isRadiusMapped) {\n                    if (series.points[i].sliceRadius.indexOf('%') !== -1) {\n                        point.radius = stringToNumber(series.points[i].sliceRadius, this.size / 2);\n                    }\n                    else {\n                        point.radius = parseInt(series.points[i].sliceRadius, 10);\n                    }\n                }\n                else {\n                    point.radius = radius;\n                }\n                var accessibilityText = point.x + ':' + point.y + ', ' + series.name;\n                if (!isNullOrUndefined(value)) {\n                    if (series.explode && (series.explodeIndex === point.index ||\n                        !series.isExploded && series.explodeAll)) {\n                        offset.X = Math.cos(2 * Math.PI * (current + value / 2) / all);\n                        offset.Y = Math.sin(2 * Math.PI * (current + value / 2) / all);\n                        rect.x = 0.01 * point.radius * offset.X * stringToNumber(series.explodeOffset, 100);\n                        rect.y = 0.01 * point.radius * offset.Y * stringToNumber(series.explodeOffset, 100);\n                    }\n                    center = this.vector(rect.x + size.centerX, rect.y + size.centerY, 0);\n                    segment = this.createSegment(center, (coefficient * current), (coefficient * value), pieHeight, point.radius, i, value, insideRadius, pointIndex, series, accessibilityText);\n                    series.segments.push(segment);\n                }\n                this.addPieDataLabel(segIndex, yValues[i], arcStartAngle, arcStartAngle + arcEndAngle, point.radius, this.isChartRotated(chart) ? chart.depth + 5 : 0, center, series.points[i]);\n                segIndex++;\n                arcStartAngle += arcEndAngle;\n                current += value;\n            }\n        }\n        return series.segments;\n    };\n    /**\n     * Adds a data label to a circular 3D chart at the specified position and orientation.\n     *\n     * @param {number} x - The x-coordinate of the data label position.\n     * @param {number} y - The y-coordinate of the data label position.\n     * @param {number} startAngle - The starting angle of the pie slice in degrees.\n     * @param {number} endAngle - The ending angle of the pie slice in degrees.\n     * @param {number} radius - The radius of the pie slice.\n     * @param {number} startDepth - The depth at which the pie slice starts in the 3D space.\n     * @param {CircularChart3DVector} center - The center point of the pie chart in 3D space.\n     * @param {CircularChart3DPoints} point - The specific data point associated with the data label.\n     * @returns {void}\n     */\n    CircularChart3DSeries.prototype.addPieDataLabel = function (x, y, startAngle, endAngle, radius, startDepth, center, point) {\n        var angle = (startAngle + endAngle) / 2;\n        point.symbolLocation = { x: 0, y: 0, radius: 0, angle: 0 };\n        point.symbolLocation.x = x;\n        point.symbolLocation.y = y;\n        point.symbolLocation.radius = radius;\n        point.symbolLocation.angle = angle;\n        point.symbolLocation.center = center;\n        point.startDepth = startDepth;\n    };\n    /**\n     * Checks if the circular 3D chart is rotated.\n     *\n     * @param {CircularChart3D} chart - The circular 3D chart instance.\n     * @returns {boolean} - A boolean indicating whether the chart is rotated.\n     */\n    CircularChart3DSeries.prototype.isChartRotated = function (chart) {\n        var actualTiltView = Math.abs(chart.tilt % 360);\n        var actualRotateView = Math.abs(chart.rotation % 360);\n        if ((actualTiltView > 90 && actualTiltView < 270) !== (actualRotateView > 90 && actualRotateView < 270)) {\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Creates a segment based on the provided parameters.\n     *\n     * @param {CircularChart3DVector} center - The center point of the segment.\n     * @param {number} start - The starting angle of the segment in radians.\n     * @param {number} end - The ending angle of the segment in radians.\n     * @param {number} height - The height of the segment.\n     * @param {number} radius - The radial distance from the center to the segment.\n     * @param {number} index - The index value of the segment.\n     * @param {number} yValue - The y value associated with the segment.\n     * @param {number} insideRadius - The inside radius of the segment.\n     * @param {number} pointIndex - The index of the point associated with the segment.\n     * @param {CircularChart3DSeries} series - The CircularChart3DSeries to which the segment belongs.\n     * @param {string} accessibilityText - The accessibility text of the segment.\n     * @returns {CircularChart3DSegments} - The created segment.\n     */\n    CircularChart3DSeries.prototype.createSegment = function (center, start, end, height, radius, index, yValue, insideRadius, pointIndex, series, accessibilityText) {\n        return {\n            startValue: start,\n            endValue: end,\n            depth: height,\n            radius: radius,\n            index: index,\n            yData: yValue,\n            center: center,\n            inSideRadius: insideRadius,\n            actualEndValue: end,\n            actualStartValue: start,\n            pointIndex: pointIndex,\n            series: series,\n            visible: true,\n            accessibilityText: accessibilityText\n        };\n    };\n    /**\n     * Creates a new Vector3D instance from provided coordinates.\n     *\n     * @param {number | { x: number, y: number }} vx - Either an object with x and y properties or the x-coordinate.\n     * @param {number} vy - The y-coordinate.\n     * @param {number} vz - The z-coordinate.\n     * @returns {CircularChart3DVector} - The new Vector3D instance.\n     */\n    CircularChart3DSeries.prototype.vector = function (vx, vy, vz) {\n        return { x: vx, y: vy, z: vz };\n    };\n    /**\n     * Gets the `Y` values from an array of circular 3D series points.\n     *\n     * @param {CircularChart3DPoints[]} points - An array of CircularChart3DPoints.\n     * @returns {number[]} - An array containing the Y values extracted from the CircularChart3DPoints.\n     */\n    CircularChart3DSeries.prototype.getYValues = function (points) {\n        var values = [];\n        var length = points.length;\n        for (var i = 0; i < length; i++) {\n            values.push(points[i].y);\n        }\n        return values;\n    };\n    /**\n     * Updates the total bounds to encompass the maximum area covered by the specified bound and the current total bounds.\n     *\n     * @param {Rect} totalBound - The current total bounds to be updated.\n     * @param {Rect} bound - The new bound to compare and update the total bounds.\n     * @returns {void}\n     * @private\n     */\n    CircularChart3DSeries.prototype.findMaxBounds = function (totalBound, bound) {\n        totalBound.x = bound.x < totalBound.x ? bound.x : totalBound.x;\n        totalBound.y = bound.y < totalBound.y ? bound.y : totalBound.y;\n        totalBound.height = (bound.y + bound.height) > totalBound.height ? (bound.y + bound.height) : totalBound.height;\n        totalBound.width = (bound.x + bound.width) > totalBound.width ? (bound.x + bound.width) : totalBound.width;\n    };\n    /**\n     * Sets the empty point value for null points in the circular 3D chart series.\n     *\n     * @param {CircularChart3DPoints} point - The data point to be checked and modified.\n     * @param {number} index - The index of the data point.\n     * @param {Object} data - The data object containing information about the data point.\n     * @param {CircularChart3D} chart - The circular 3D chart instance.\n     * @returns {void}\n     */\n    CircularChart3DSeries.prototype.setEmptyPoint = function (point, index, data, chart) {\n        if (!(isNullOrUndefined(point.y) || isNaN(point.y))) {\n            return null;\n        }\n        point.color = this.emptyPointSettings.fill || point.color;\n        var previous;\n        var next;\n        switch (this.emptyPointSettings.mode) {\n            case 'Zero':\n                point.y = 0;\n                point.visible = true;\n                break;\n            case 'Average':\n                previous = data[index - 1] ? (data[index - 1][this.yName] || 0) : 0;\n                next = data[index + 1] ? (data[index + 1][this.yName] || 0) : 0;\n                point.y = (Math.abs(previous) + Math.abs(next)) / 2;\n                point.separatorY = chart.intl.formatNumber(point.y, { useGrouping: chart.useGroupingSeparator });\n                this.sumOfPoints += point.y;\n                point.visible = true;\n                break;\n            default:\n                point.visible = false;\n                break;\n        }\n    };\n    __decorate([\n        Property('')\n    ], CircularChart3DSeries.prototype, \"dataSource\", void 0);\n    __decorate([\n        Property()\n    ], CircularChart3DSeries.prototype, \"query\", void 0);\n    __decorate([\n        Property('')\n    ], CircularChart3DSeries.prototype, \"xName\", void 0);\n    __decorate([\n        Property('')\n    ], CircularChart3DSeries.prototype, \"name\", void 0);\n    __decorate([\n        Property('')\n    ], CircularChart3DSeries.prototype, \"tooltipMappingName\", void 0);\n    __decorate([\n        Property('')\n    ], CircularChart3DSeries.prototype, \"yName\", void 0);\n    __decorate([\n        Property(true)\n    ], CircularChart3DSeries.prototype, \"visible\", void 0);\n    __decorate([\n        Complex(null, Animation)\n    ], CircularChart3DSeries.prototype, \"animation\", void 0);\n    __decorate([\n        Property('SeriesType')\n    ], CircularChart3DSeries.prototype, \"legendShape\", void 0);\n    __decorate([\n        Property('')\n    ], CircularChart3DSeries.prototype, \"legendImageUrl\", void 0);\n    __decorate([\n        Property('')\n    ], CircularChart3DSeries.prototype, \"pointColorMapping\", void 0);\n    __decorate([\n        Complex({}, CircularChart3DDataLabelSettings)\n    ], CircularChart3DSeries.prototype, \"dataLabel\", void 0);\n    __decorate([\n        Property([])\n    ], CircularChart3DSeries.prototype, \"palettes\", void 0);\n    __decorate([\n        Property(null)\n    ], CircularChart3DSeries.prototype, \"radius\", void 0);\n    __decorate([\n        Property('0')\n    ], CircularChart3DSeries.prototype, \"innerRadius\", void 0);\n    __decorate([\n        Property(true)\n    ], CircularChart3DSeries.prototype, \"enableTooltip\", void 0);\n    __decorate([\n        Property(false)\n    ], CircularChart3DSeries.prototype, \"explode\", void 0);\n    __decorate([\n        Property('30%')\n    ], CircularChart3DSeries.prototype, \"explodeOffset\", void 0);\n    __decorate([\n        Property(false)\n    ], CircularChart3DSeries.prototype, \"explodeAll\", void 0);\n    __decorate([\n        Property(null)\n    ], CircularChart3DSeries.prototype, \"explodeIndex\", void 0);\n    __decorate([\n        Complex({ mode: 'Drop' }, CircularChart3DEmptyPointSettings)\n    ], CircularChart3DSeries.prototype, \"emptyPointSettings\", void 0);\n    __decorate([\n        Property(1)\n    ], CircularChart3DSeries.prototype, \"opacity\", void 0);\n    return CircularChart3DSeries;\n}(ChildProperty));\nexport { CircularChart3DSeries };\n/**\n * The `PieSeries3D` module is used to render circular 3D `Pie` and `Donut` series.\n */\nvar PieSeries3D = /** @class */ (function (_super) {\n    __extends(PieSeries3D, _super);\n    function PieSeries3D() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * To get the module name of the circular 3D chart pie series.\n     *\n     * @returns {string} - Returns the module name of the Pie series.\n     */\n    PieSeries3D.prototype.getModuleName = function () {\n        return 'PieSeries3D';\n    };\n    /**\n     * Destroys the circular 3D chart series.\n     *\n     * @returns {void}\n     * @private\n     */\n    PieSeries3D.prototype.destroy = function () {\n        /**\n         * Calling the destroy method here.\n         */\n    };\n    return PieSeries3D;\n}(CircularChart3DSeries));\nexport { PieSeries3D };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}