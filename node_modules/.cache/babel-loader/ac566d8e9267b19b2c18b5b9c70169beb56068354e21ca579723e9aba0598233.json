{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { Double3D } from '../axis/double-axis';\n/**\n * Common axis classes\n *\n * @private\n */\nvar NiceIntervals = /** @class */function (_super) {\n  __extends(NiceIntervals, _super);\n  function NiceIntervals() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Calculates a nice interval for a date-time axis based on the given size and data range.\n   *\n   * @param {Chart3DAxis} axis - The date-time axis for which the nice interval is calculated.\n   * @param {Size} size - The size of the chart area.\n   * @param {number} start - The start value of the data range.\n   * @param {number} end - The end value of the data range.\n   * @returns {number} - The calculated nice interval for the date-time axis.\n   */\n  NiceIntervals.prototype.calculateDateTimeNiceInterval = function (axis, size, start, end) {\n    var oneDay = 24 * 60 * 60 * 1000;\n    var startDate = new Date(start);\n    var endDate = new Date(end);\n    var totalDays = Math.abs((startDate.getTime() - endDate.getTime()) / oneDay);\n    var interval;\n    axis.actualIntervalType = axis.intervalType;\n    var type = axis.intervalType;\n    switch (type) {\n      case 'Years':\n        interval = this.calculateNumericNiceInterval(axis, totalDays / 365, size);\n        break;\n      case 'Months':\n        interval = this.calculateNumericNiceInterval(axis, totalDays / 30, size);\n        break;\n      case 'Days':\n        interval = this.calculateNumericNiceInterval(axis, totalDays, size);\n        break;\n      case 'Hours':\n        interval = this.calculateNumericNiceInterval(axis, totalDays * 24, size);\n        break;\n      case 'Minutes':\n        interval = this.calculateNumericNiceInterval(axis, totalDays * 24 * 60, size);\n        break;\n      case 'Seconds':\n        interval = this.calculateNumericNiceInterval(axis, totalDays * 24 * 60 * 60, size);\n        break;\n      case 'Auto':\n        interval = this.calculateNumericNiceInterval(axis, totalDays / 365, size);\n        if (interval >= 1) {\n          axis.actualIntervalType = 'Years';\n          return interval;\n        }\n        interval = this.calculateNumericNiceInterval(axis, totalDays / 30, size);\n        if (interval >= 1) {\n          axis.actualIntervalType = 'Months';\n          return interval;\n        }\n        interval = this.calculateNumericNiceInterval(axis, totalDays, size);\n        if (interval >= 1) {\n          axis.actualIntervalType = 'Days';\n          return interval;\n        }\n        interval = this.calculateNumericNiceInterval(axis, totalDays * 24, size);\n        if (interval >= 1) {\n          axis.actualIntervalType = 'Hours';\n          return interval;\n        }\n        interval = this.calculateNumericNiceInterval(axis, totalDays * 24 * 60, size);\n        if (interval >= 1) {\n          axis.actualIntervalType = 'Minutes';\n          return interval;\n        }\n        interval = this.calculateNumericNiceInterval(axis, totalDays * 24 * 60 * 60, size);\n        axis.actualIntervalType = 'Seconds';\n        return interval;\n    }\n    return interval;\n  };\n  /**\n   * To get the skeleton for the DateTime axis.\n   *\n   * @param {Chart3DAxis} axis - The date-time axis for which the skeleton is calculated.\n   * @returns {string} - Skeleton format.\n   * @private\n   */\n  NiceIntervals.prototype.getSkeleton = function (axis) {\n    var skeleton;\n    var intervalType = axis.actualIntervalType;\n    if (axis.skeleton) {\n      return axis.skeleton;\n    }\n    if (intervalType === 'Years') {\n      skeleton = axis.valueType === 'DateTime' && axis.isIntervalInDecimal ? 'y' : 'yMMM';\n    } else if (intervalType === 'Months') {\n      skeleton = 'MMMd';\n    } else if (intervalType === 'Days') {\n      skeleton = axis.valueType === 'DateTime' ? 'MMMd' : 'yMd';\n    } else if (intervalType === 'Hours') {\n      skeleton = axis.valueType === 'DateTime' ? 'Hm' : 'EHm';\n    } else if (intervalType === 'Minutes') {\n      skeleton = 'Hms';\n    } else {\n      skeleton = 'Hms';\n    }\n    return skeleton;\n  };\n  /**\n   * Find label format for axis\n   *\n   * @param {Chart3DAxis} axis - The  axis for which the label format is calculated.\n   * @returns {string} - The axis label format.\n   * @private\n   */\n  NiceIntervals.prototype.findCustomFormats = function (axis) {\n    var labelFormat = axis.labelFormat ? axis.labelFormat : '';\n    if (!axis.skeleton && axis.actualIntervalType === 'Months' && !labelFormat) {\n      labelFormat = axis.valueType === 'DateTime' ? 'MMM yyyy' : 'yMMM';\n    }\n    return labelFormat;\n  };\n  return NiceIntervals;\n}(Double3D);\nexport { NiceIntervals };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","Double3D","NiceIntervals","_super","apply","arguments","calculateDateTimeNiceInterval","axis","size","start","end","oneDay","startDate","Date","endDate","totalDays","Math","abs","getTime","interval","actualIntervalType","intervalType","type","calculateNumericNiceInterval","getSkeleton","skeleton","valueType","isIntervalInDecimal","findCustomFormats","labelFormat"],"sources":["C:/Users/mkfun/Desktop/ct assignment/admin/node_modules/@syncfusion/ej2-charts/src/chart3d/axis/axis-helper.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { Double3D } from '../axis/double-axis';\n/**\n * Common axis classes\n *\n * @private\n */\nvar NiceIntervals = /** @class */ (function (_super) {\n    __extends(NiceIntervals, _super);\n    function NiceIntervals() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Calculates a nice interval for a date-time axis based on the given size and data range.\n     *\n     * @param {Chart3DAxis} axis - The date-time axis for which the nice interval is calculated.\n     * @param {Size} size - The size of the chart area.\n     * @param {number} start - The start value of the data range.\n     * @param {number} end - The end value of the data range.\n     * @returns {number} - The calculated nice interval for the date-time axis.\n     */\n    NiceIntervals.prototype.calculateDateTimeNiceInterval = function (axis, size, start, end) {\n        var oneDay = 24 * 60 * 60 * 1000;\n        var startDate = new Date(start);\n        var endDate = new Date(end);\n        var totalDays = (Math.abs((startDate.getTime() - endDate.getTime()) / (oneDay)));\n        var interval;\n        axis.actualIntervalType = axis.intervalType;\n        var type = axis.intervalType;\n        switch (type) {\n            case 'Years':\n                interval = this.calculateNumericNiceInterval(axis, totalDays / 365, size);\n                break;\n            case 'Months':\n                interval = this.calculateNumericNiceInterval(axis, totalDays / 30, size);\n                break;\n            case 'Days':\n                interval = this.calculateNumericNiceInterval(axis, totalDays, size);\n                break;\n            case 'Hours':\n                interval = this.calculateNumericNiceInterval(axis, totalDays * 24, size);\n                break;\n            case 'Minutes':\n                interval = this.calculateNumericNiceInterval(axis, totalDays * 24 * 60, size);\n                break;\n            case 'Seconds':\n                interval = this.calculateNumericNiceInterval(axis, totalDays * 24 * 60 * 60, size);\n                break;\n            case 'Auto':\n                interval = this.calculateNumericNiceInterval(axis, totalDays / 365, size);\n                if (interval >= 1) {\n                    axis.actualIntervalType = 'Years';\n                    return interval;\n                }\n                interval = this.calculateNumericNiceInterval(axis, totalDays / 30, size);\n                if (interval >= 1) {\n                    axis.actualIntervalType = 'Months';\n                    return interval;\n                }\n                interval = this.calculateNumericNiceInterval(axis, totalDays, size);\n                if (interval >= 1) {\n                    axis.actualIntervalType = 'Days';\n                    return interval;\n                }\n                interval = this.calculateNumericNiceInterval(axis, totalDays * 24, size);\n                if (interval >= 1) {\n                    axis.actualIntervalType = 'Hours';\n                    return interval;\n                }\n                interval = this.calculateNumericNiceInterval(axis, totalDays * 24 * 60, size);\n                if (interval >= 1) {\n                    axis.actualIntervalType = 'Minutes';\n                    return interval;\n                }\n                interval = this.calculateNumericNiceInterval(axis, totalDays * 24 * 60 * 60, size);\n                axis.actualIntervalType = 'Seconds';\n                return interval;\n        }\n        return interval;\n    };\n    /**\n     * To get the skeleton for the DateTime axis.\n     *\n     * @param {Chart3DAxis} axis - The date-time axis for which the skeleton is calculated.\n     * @returns {string} - Skeleton format.\n     * @private\n     */\n    NiceIntervals.prototype.getSkeleton = function (axis) {\n        var skeleton;\n        var intervalType = axis.actualIntervalType;\n        if (axis.skeleton) {\n            return axis.skeleton;\n        }\n        if (intervalType === 'Years') {\n            skeleton = ((axis.valueType === 'DateTime' && axis.isIntervalInDecimal) ? 'y' : 'yMMM');\n        }\n        else if (intervalType === 'Months') {\n            skeleton = 'MMMd';\n        }\n        else if (intervalType === 'Days') {\n            skeleton = (axis.valueType === 'DateTime' ? 'MMMd' : 'yMd');\n        }\n        else if (intervalType === 'Hours') {\n            skeleton = (axis.valueType === 'DateTime' ? 'Hm' : 'EHm');\n        }\n        else if (intervalType === 'Minutes') {\n            skeleton = 'Hms';\n        }\n        else {\n            skeleton = 'Hms';\n        }\n        return skeleton;\n    };\n    /**\n     * Find label format for axis\n     *\n     * @param {Chart3DAxis} axis - The  axis for which the label format is calculated.\n     * @returns {string} - The axis label format.\n     * @private\n     */\n    NiceIntervals.prototype.findCustomFormats = function (axis) {\n        var labelFormat = axis.labelFormat ? axis.labelFormat : '';\n        if (!axis.skeleton && axis.actualIntervalType === 'Months' && !labelFormat) {\n            labelFormat = axis.valueType === 'DateTime' ? 'MMM yyyy' : 'yMMM';\n        }\n        return labelFormat;\n    };\n    return NiceIntervals;\n}(Double3D));\nexport { NiceIntervals };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}