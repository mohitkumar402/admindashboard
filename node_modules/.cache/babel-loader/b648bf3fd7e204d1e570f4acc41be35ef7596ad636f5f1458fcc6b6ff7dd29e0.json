{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { getActualDesiredIntervalsCount, triggerLabelRender } from '../../common/utils/helper';\nimport { DoubleRange } from '../utils/doubleRange';\nimport { withIn } from '../../common/utils/helper';\nimport { extend, getValue } from '@syncfusion/ej2-base';\nimport { NiceIntervals } from '../axis/axis-helper';\n/**\n * The `Category` module is used to render category axis.\n */\nvar Category3D = /** @class */function (_super) {\n  __extends(Category3D, _super);\n  /**\n   * Constructor for the category module.\n   *\n   * @param {Chart3D} chart - Chart instance.\n   * @private\n   */\n  function Category3D(chart) {\n    return _super.call(this, chart) || this;\n  }\n  /**\n   * Calculates the range and interval for the specified axis based on the provided size.\n   *\n   * @param {Size} size - The size of the chart area used for range and interval calculation.\n   * @param {Chart3DAxis} axis - The axis for which the range and interval are calculated.\n   * @returns {void}\n   * @private\n   */\n  Category3D.prototype.calculateRangeAndInterval = function (size, axis) {\n    this.calculateRange(axis);\n    this.getActualRange(axis, size);\n    this.applyRangePadding(axis, size);\n    this.calculateVisibleLabels(axis);\n  };\n  /**\n   * Retrieves the actual range for the specified axis based on the provided size.\n   *\n   * @param {Chart3DAxis} axis - The axis for which the actual range is calculated.\n   * @param {Size} size - The size of the chart area used in the range calculation.\n   * @returns {void}\n   */\n  Category3D.prototype.getActualRange = function (axis, size) {\n    this.initializeDoubleRange(axis);\n    axis.actualRange = {};\n    if (!axis.interval) {\n      axis.actualRange.interval = Math.max(1, Math.floor(axis.doubleRange.delta / getActualDesiredIntervalsCount(size, axis)));\n    } else {\n      axis.actualRange.interval = Math.ceil(axis.interval);\n    }\n    axis.actualRange.min = axis.doubleRange.start;\n    axis.actualRange.max = axis.doubleRange.end;\n    axis.actualRange.delta = axis.doubleRange.delta;\n  };\n  /**\n   * Applies range padding to the specified axis based on the provided size.\n   *\n   * @param {Chart3DAxis} axis - The axis to which range padding is applied.\n   * @param {Size} size - The size of the chart area used in the padding calculation.\n   * @returns {void}\n   */\n  Category3D.prototype.applyRangePadding = function (axis, size) {\n    var ticks = 0.5;\n    axis.actualRange.min -= ticks;\n    axis.actualRange.max += ticks;\n    axis.doubleRange = new DoubleRange(axis.actualRange.min, axis.actualRange.max);\n    axis.actualRange.delta = axis.doubleRange.delta;\n    this.calculateVisibleRange(size, axis);\n  };\n  /**\n   * Calculate visible labels for the axis based on the range calculated.\n   *\n   * @param {Chart3DAxis} axis - The axis for which the labels are calculated.\n   * @returns {void}\n   * @private\n   */\n  Category3D.prototype.calculateVisibleLabels = function (axis) {\n    /** Generate axis labels */\n    axis.visibleLabels = [];\n    axis.visibleRange.interval = axis.visibleRange.interval < 1 ? 1 : axis.visibleRange.interval;\n    var tempInterval = Math.ceil(axis.visibleRange.min);\n    var labelStyle;\n    var position;\n    axis.startLabel = axis.labels[Math.round(axis.visibleRange.min)];\n    axis.endLabel = axis.labels[Math.floor(axis.visibleRange.max)];\n    for (; tempInterval <= axis.visibleRange.max; tempInterval += axis.visibleRange.interval) {\n      labelStyle = extend({}, getValue('properties', axis.labelStyle), null, true);\n      if (withIn(tempInterval, axis.visibleRange) && axis.labels.length > 0) {\n        position = Math.round(tempInterval);\n        triggerLabelRender(this.chart, position, axis.labels[position] ? axis.labels[position].toString() : position.toString(), labelStyle, axis);\n      }\n    }\n    if (axis.getMaxLabelWidth) {\n      axis.getMaxLabelWidth(this.chart);\n    }\n  };\n  /**\n   * Get module name\n   *\n   * @returns {string} - Returns the module name\n   */\n  Category3D.prototype.getModuleName = function () {\n    /**\n     * Returns the module name\n     */\n    return 'Category3D';\n  };\n  /**\n   * To destroy the category axis.\n   *\n   * @returns {void}\n   * @private\n   */\n  Category3D.prototype.destroy = function () {\n    /**\n     * Destroy method performed here\n     */\n  };\n  return Category3D;\n}(NiceIntervals);\nexport { Category3D };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","getActualDesiredIntervalsCount","triggerLabelRender","DoubleRange","withIn","extend","getValue","NiceIntervals","Category3D","_super","chart","call","calculateRangeAndInterval","size","axis","calculateRange","getActualRange","applyRangePadding","calculateVisibleLabels","initializeDoubleRange","actualRange","interval","Math","max","floor","doubleRange","delta","ceil","min","start","end","ticks","calculateVisibleRange","visibleLabels","visibleRange","tempInterval","labelStyle","position","startLabel","labels","round","endLabel","length","toString","getMaxLabelWidth","getModuleName","destroy"],"sources":["C:/Users/mkfun/Desktop/ct assignment/admin/node_modules/@syncfusion/ej2-charts/src/chart3d/axis/category-axis.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { getActualDesiredIntervalsCount, triggerLabelRender } from '../../common/utils/helper';\nimport { DoubleRange } from '../utils/doubleRange';\nimport { withIn } from '../../common/utils/helper';\nimport { extend, getValue } from '@syncfusion/ej2-base';\nimport { NiceIntervals } from '../axis/axis-helper';\n/**\n * The `Category` module is used to render category axis.\n */\nvar Category3D = /** @class */ (function (_super) {\n    __extends(Category3D, _super);\n    /**\n     * Constructor for the category module.\n     *\n     * @param {Chart3D} chart - Chart instance.\n     * @private\n     */\n    function Category3D(chart) {\n        return _super.call(this, chart) || this;\n    }\n    /**\n     * Calculates the range and interval for the specified axis based on the provided size.\n     *\n     * @param {Size} size - The size of the chart area used for range and interval calculation.\n     * @param {Chart3DAxis} axis - The axis for which the range and interval are calculated.\n     * @returns {void}\n     * @private\n     */\n    Category3D.prototype.calculateRangeAndInterval = function (size, axis) {\n        this.calculateRange(axis);\n        this.getActualRange(axis, size);\n        this.applyRangePadding(axis, size);\n        this.calculateVisibleLabels(axis);\n    };\n    /**\n     * Retrieves the actual range for the specified axis based on the provided size.\n     *\n     * @param {Chart3DAxis} axis - The axis for which the actual range is calculated.\n     * @param {Size} size - The size of the chart area used in the range calculation.\n     * @returns {void}\n     */\n    Category3D.prototype.getActualRange = function (axis, size) {\n        this.initializeDoubleRange(axis);\n        axis.actualRange = {};\n        if (!axis.interval) {\n            axis.actualRange.interval = Math.max(1, Math.floor(axis.doubleRange.delta / getActualDesiredIntervalsCount(size, axis)));\n        }\n        else {\n            axis.actualRange.interval = Math.ceil(axis.interval);\n        }\n        axis.actualRange.min = axis.doubleRange.start;\n        axis.actualRange.max = axis.doubleRange.end;\n        axis.actualRange.delta = axis.doubleRange.delta;\n    };\n    /**\n     * Applies range padding to the specified axis based on the provided size.\n     *\n     * @param {Chart3DAxis} axis - The axis to which range padding is applied.\n     * @param {Size} size - The size of the chart area used in the padding calculation.\n     * @returns {void}\n     */\n    Category3D.prototype.applyRangePadding = function (axis, size) {\n        var ticks = 0.5;\n        axis.actualRange.min -= ticks;\n        axis.actualRange.max += ticks;\n        axis.doubleRange = new DoubleRange(axis.actualRange.min, axis.actualRange.max);\n        axis.actualRange.delta = axis.doubleRange.delta;\n        this.calculateVisibleRange(size, axis);\n    };\n    /**\n     * Calculate visible labels for the axis based on the range calculated.\n     *\n     * @param {Chart3DAxis} axis - The axis for which the labels are calculated.\n     * @returns {void}\n     * @private\n     */\n    Category3D.prototype.calculateVisibleLabels = function (axis) {\n        /** Generate axis labels */\n        axis.visibleLabels = [];\n        axis.visibleRange.interval = axis.visibleRange.interval < 1 ? 1 : axis.visibleRange.interval;\n        var tempInterval = Math.ceil(axis.visibleRange.min);\n        var labelStyle;\n        var position;\n        axis.startLabel = axis.labels[Math.round(axis.visibleRange.min)];\n        axis.endLabel = axis.labels[Math.floor(axis.visibleRange.max)];\n        for (; tempInterval <= axis.visibleRange.max; tempInterval += axis.visibleRange.interval) {\n            labelStyle = (extend({}, getValue('properties', axis.labelStyle), null, true));\n            if (withIn(tempInterval, axis.visibleRange) && axis.labels.length > 0) {\n                position = Math.round(tempInterval);\n                triggerLabelRender(this.chart, position, axis.labels[position] ? axis.labels[position].toString() : position.toString(), labelStyle, axis);\n            }\n        }\n        if (axis.getMaxLabelWidth) {\n            axis.getMaxLabelWidth(this.chart);\n        }\n    };\n    /**\n     * Get module name\n     *\n     * @returns {string} - Returns the module name\n     */\n    Category3D.prototype.getModuleName = function () {\n        /**\n         * Returns the module name\n         */\n        return 'Category3D';\n    };\n    /**\n     * To destroy the category axis.\n     *\n     * @returns {void}\n     * @private\n     */\n    Category3D.prototype.destroy = function () {\n        /**\n         * Destroy method performed here\n         */\n    };\n    return Category3D;\n}(NiceIntervals));\nexport { Category3D };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}