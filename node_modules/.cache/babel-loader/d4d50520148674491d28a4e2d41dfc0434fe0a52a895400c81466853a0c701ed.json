{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * Chart legend\n */\nimport { Browser, ChildProperty, Complex, Property, extend, remove } from '@syncfusion/ej2-base';\nimport { Border, ContainerPadding, Font, Margin } from '../../common/model/base';\nimport { LegendOptions, BaseLegend } from '../../common/legend/legend';\nimport { textTrim, removeElement } from '../../common/utils/helper';\nimport { getUnicodeText } from '../../common/utils/helper';\nimport { measureText, getElement } from '@syncfusion/ej2-svg-base';\nimport { legendRender, legendClick, regSub, regSup } from '../../common/model/constants';\nimport { textWrap } from '../../common/utils/helper';\nimport { Location } from '../../common/model/base';\n/**\n * Configures the legends in charts.\n */\nvar Chart3DLegendSettings = /** @class */function (_super) {\n  __extends(Chart3DLegendSettings, _super);\n  function Chart3DLegendSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  __decorate([Property(true)], Chart3DLegendSettings.prototype, \"visible\", void 0);\n  __decorate([Property(null)], Chart3DLegendSettings.prototype, \"height\", void 0);\n  __decorate([Property(null)], Chart3DLegendSettings.prototype, \"width\", void 0);\n  __decorate([Complex({\n    x: 0,\n    y: 0\n  }, Location)], Chart3DLegendSettings.prototype, \"location\", void 0);\n  __decorate([Property('Auto')], Chart3DLegendSettings.prototype, \"position\", void 0);\n  __decorate([Property('Series')], Chart3DLegendSettings.prototype, \"mode\", void 0);\n  __decorate([Property(8)], Chart3DLegendSettings.prototype, \"padding\", void 0);\n  __decorate([Property(null)], Chart3DLegendSettings.prototype, \"itemPadding\", void 0);\n  __decorate([Property('Center')], Chart3DLegendSettings.prototype, \"alignment\", void 0);\n  __decorate([Complex({\n    fontFamily: null,\n    size: null,\n    fontStyle: null,\n    fontWeight: null,\n    color: null\n  }, Font)], Chart3DLegendSettings.prototype, \"textStyle\", void 0);\n  __decorate([Property(10)], Chart3DLegendSettings.prototype, \"shapeHeight\", void 0);\n  __decorate([Property(10)], Chart3DLegendSettings.prototype, \"shapeWidth\", void 0);\n  __decorate([Complex({}, Border)], Chart3DLegendSettings.prototype, \"border\", void 0);\n  __decorate([Complex({\n    left: 0,\n    right: 0,\n    top: 0,\n    bottom: 0\n  }, Margin)], Chart3DLegendSettings.prototype, \"margin\", void 0);\n  __decorate([Complex({\n    left: 0,\n    right: 0,\n    top: 0,\n    bottom: 0\n  }, ContainerPadding)], Chart3DLegendSettings.prototype, \"containerPadding\", void 0);\n  __decorate([Property(8)], Chart3DLegendSettings.prototype, \"shapePadding\", void 0);\n  __decorate([Property('transparent')], Chart3DLegendSettings.prototype, \"background\", void 0);\n  __decorate([Property(1)], Chart3DLegendSettings.prototype, \"opacity\", void 0);\n  __decorate([Property(true)], Chart3DLegendSettings.prototype, \"toggleVisibility\", void 0);\n  __decorate([Property(false)], Chart3DLegendSettings.prototype, \"enableHighlight\", void 0);\n  __decorate([Property(null)], Chart3DLegendSettings.prototype, \"description\", void 0);\n  __decorate([Property(3)], Chart3DLegendSettings.prototype, \"tabIndex\", void 0);\n  __decorate([Property(null)], Chart3DLegendSettings.prototype, \"title\", void 0);\n  __decorate([Complex({\n    fontFamily: null,\n    size: null,\n    fontStyle: null,\n    fontWeight: null,\n    color: null\n  }, Font)], Chart3DLegendSettings.prototype, \"titleStyle\", void 0);\n  __decorate([Property('Top')], Chart3DLegendSettings.prototype, \"titlePosition\", void 0);\n  __decorate([Property('Normal')], Chart3DLegendSettings.prototype, \"textWrap\", void 0);\n  __decorate([Property('Ellipsis')], Chart3DLegendSettings.prototype, \"textOverflow\", void 0);\n  __decorate([Property(100)], Chart3DLegendSettings.prototype, \"maximumTitleWidth\", void 0);\n  __decorate([Property(null)], Chart3DLegendSettings.prototype, \"maximumLabelWidth\", void 0);\n  __decorate([Property(true)], Chart3DLegendSettings.prototype, \"enablePages\", void 0);\n  __decorate([Property(false)], Chart3DLegendSettings.prototype, \"isInversed\", void 0);\n  __decorate([Property(false)], Chart3DLegendSettings.prototype, \"reverse\", void 0);\n  return Chart3DLegendSettings;\n}(ChildProperty);\nexport { Chart3DLegendSettings };\n/**\n * The `Legend` module is used to render legend for the chart.\n */\nvar Legend3D = /** @class */function (_super) {\n  __extends(Legend3D, _super);\n  function Legend3D(chart) {\n    var _this = _super.call(this, chart) || this;\n    _this.library = _this;\n    _this.addEventListener();\n    return _this;\n  }\n  /**\n   * Binding events for legend module.\n   *\n   * @returns {void}\n   */\n  Legend3D.prototype.addEventListener = function () {\n    if (this.chart.isDestroyed) {\n      return;\n    }\n    this.chart.on(Browser.touchMoveEvent, this.mouseMove, this);\n    this.chart.on('click', this.click, this);\n    this.chart.on(Browser.touchEndEvent, this.mouseEnd, this);\n  };\n  /**\n   * Unbinding events for legend module.\n   *\n   * @returns {void}\n   */\n  Legend3D.prototype.removeEventListener = function () {\n    if (this.chart.isDestroyed) {\n      return;\n    }\n    this.chart.off(Browser.touchMoveEvent, this.mouseMove);\n    this.chart.off('click', this.click);\n    this.chart.off(Browser.touchEndEvent, this.mouseEnd);\n  };\n  /**\n   * To handle mosue move for legend module\n   *\n   * @param {MouseEvent} e - Specifies the mouse event.\n   * @returns {void}\n   */\n  Legend3D.prototype.mouseMove = function (e) {\n    if (this.chart.legendSettings.visible && !this.chart.isTouch) {\n      this.move(e);\n      if (this.chart.highlight3DModule && (this.chart.highlightMode !== 'None' || this.chart.legendSettings.enableHighlight)) {\n        var legendItemsId = [this.legendID + '_text_', this.legendID + '_shape_marker_', this.legendID + '_shape_', this.legendID + '_g_'];\n        var targetId = e.target.id;\n        var index = void 0;\n        for (var _i = 0, legendItemsId_1 = legendItemsId; _i < legendItemsId_1.length; _i++) {\n          var id = legendItemsId_1[_i];\n          if (targetId.indexOf(id) > -1) {\n            index = parseInt(targetId.split(id)[1], 10);\n            this.chart.highlight3DModule.legendSelection(this.chart, index, e.target, e.type);\n            break;\n          }\n        }\n      }\n    }\n  };\n  /**\n   * To handle mouse end for legend module\n   *\n   * @param {MouseEvent} e - Specifies the mouse event.\n   * @returns {void}\n   */\n  Legend3D.prototype.mouseEnd = function (e) {\n    if (this.chart.legendSettings.visible && this.chart.isTouch) {\n      this.move(e);\n    }\n  };\n  /**\n   * Retrieves and returns legend options for the visible series within a 3D chart.\n   *\n   * @param {Chart3DSeries[]} visibleSeriesCollection - The collection of visible series to extract legend options from.\n   * @param {Chart3D} chart - The 3D chart containing the series and legend.\n   * @returns {void}\n   */\n  Legend3D.prototype.getLegendOptions = function (visibleSeriesCollection, chart) {\n    this.legendCollections = [];\n    var seriesType;\n    var fill;\n    this.isRtlEnable = chart.enableRtl;\n    this.isReverse = !this.isRtlEnable && chart.legendSettings.reverse;\n    if (visibleSeriesCollection.length > 1) {\n      this.legend.mode = 'Series';\n    }\n    for (var _i = 0, visibleSeriesCollection_1 = visibleSeriesCollection; _i < visibleSeriesCollection_1.length; _i++) {\n      var series = visibleSeriesCollection_1[_i];\n      if (this.legend.mode === 'Series') {\n        seriesType = series.type;\n        // To set legend color when use pointColorMapping\n        fill = series.pointColorMapping && series.points.length > 0 ? series.points[0].interior ? series.points[0].interior : series.interior : series.interior;\n        this.legendCollections.push(new LegendOptions(series.name, fill, series.legendShape, series.visible, seriesType, series.legendImageUrl ? series.legendImageUrl : '', 'None', false, null, null));\n      } else if (this.legend.mode === 'Point') {\n        var _loop_1 = function (points) {\n          seriesType = series.type;\n          fill = points.interior ? points.interior : series.interior;\n          if (this_1.legendCollections.filter(function (i) {\n            return i.text === points.x.toString();\n          }).length === 0) {\n            this_1.legendCollections.push(new LegendOptions(points.x.toString(), fill, series.legendShape, points.visible, seriesType, '', 'None', false));\n          }\n        };\n        var this_1 = this;\n        for (var _a = 0, _b = series.points; _a < _b.length; _a++) {\n          var points = _b[_a];\n          _loop_1(points);\n        }\n      }\n    }\n    if (this.isReverse) {\n      this.legendCollections.reverse();\n    }\n  };\n  /**\n   * Calculates and retrieves the legend bounds within the available size for the provided legend settings.\n   *\n   * @param {Size} availableSize - The available size for positioning the legend.\n   * @param {Rect} legendBounds - The initial bounds of the legend.\n   * @param {Chart3DLegendSettingsModel} legend - The customization option for the legend.\n   * @returns {void}\n   */\n  Legend3D.prototype.get3DLegendBounds = function (availableSize, legendBounds, legend) {\n    this.calculateLegendTitle(legend, legendBounds);\n    this.isTitle = legend.title ? true : false;\n    this.chartRowCount = 1;\n    this.rowHeights = [];\n    this.columnHeights = [];\n    this.pageHeights = [];\n    var padding = legend.padding;\n    var titlePosition = legend.titlePosition;\n    var extraHeight = 0;\n    var legendOption;\n    var extraWidth = 0;\n    var arrowWidth = this.arrowWidth;\n    var arrowHeight = this.arrowHeight;\n    var verticalArrowSpace = this.isVertical && !legend.enablePages ? arrowHeight : 0;\n    var titleSpace = this.isTitle && titlePosition === 'Top' ? this.legendTitleSize.height + this.fivePixel : 0;\n    titleSpace = this.isTitle && this.isVertical && titlePosition !== 'Top' ? this.legendTitleSize.height + this.fivePixel : titleSpace;\n    if (!this.isVertical) {\n      extraHeight = !legend.height ? availableSize.height / 100 * 5 : 0;\n    } else {\n      extraWidth = !legend.width ? availableSize.width / 100 * 5 : 0;\n    }\n    legendBounds.height += extraHeight;\n    legendBounds.width += extraWidth;\n    var shapeWidth = legend.shapeWidth;\n    var shapePadding = legend.shapePadding;\n    var maximumWidth = 0;\n    var rowWidth = 0;\n    var legendWidth = 0;\n    var columnHeight = 0;\n    var columnCount = 0;\n    var rowCount = 0;\n    var titlePlusArrowSpace = 0;\n    var legendEventArgs;\n    var render = false;\n    this.maxItemHeight = Math.max(measureText('MeasureText', legend.textStyle, this.chart.themeStyle.legendLabelFont).height, legend.shapeHeight);\n    for (var i = 0; i < this.legendCollections.length; i++) {\n      legendOption = this.legendCollections[i];\n      if (regSub.test(legendOption.text)) {\n        legendOption.text = getUnicodeText(legendOption.text, regSub);\n      }\n      if (regSup.test(legendOption.text)) {\n        legendOption.text = getUnicodeText(legendOption.text, regSup);\n      }\n      legendEventArgs = {\n        fill: legendOption.fill,\n        text: legendOption.text,\n        shape: legendOption.shape,\n        cancel: false\n      };\n      this.chart.trigger(legendRender, legendEventArgs);\n      legendOption.render = !legendEventArgs.cancel;\n      legendOption.text = legendEventArgs.text;\n      legendOption.fill = legendEventArgs.fill;\n      legendOption.shape = legendEventArgs.shape;\n      legendOption.markerShape = 'None';\n      legendOption.textSize = measureText(legendOption.text, legend.textStyle, this.chart.themeStyle.legendLabelFont);\n      shapeWidth = legendOption.text ? legend.shapeWidth : 0;\n      shapePadding = legendOption.text ? legend.shapePadding : 0;\n      if (legendOption.render && legendOption.text) {\n        render = true;\n        legendWidth = shapeWidth + shapePadding + (legend.maximumLabelWidth ? legend.maximumLabelWidth : legendOption.textSize.width) + (!this.isVertical ? i === 0 ? padding : this.itemPadding : padding);\n        rowWidth = rowWidth + legendWidth;\n        if (!legend.enablePages && !this.isVertical) {\n          titlePlusArrowSpace = this.isTitle && titlePosition !== 'Top' ? this.legendTitleSize.width + this.fivePixel : 0;\n          titlePlusArrowSpace += arrowWidth;\n        }\n        this.getLegendHeight(legendOption, legend, legendBounds, rowWidth, this.maxItemHeight, padding);\n        if (legendBounds.width < padding + rowWidth + titlePlusArrowSpace || this.isVertical) {\n          maximumWidth = Math.max(maximumWidth, rowWidth + padding + titlePlusArrowSpace - (this.isVertical ? 0 : legendWidth));\n          if (rowCount === 0 && legendWidth !== rowWidth) {\n            rowCount = 1;\n          }\n          rowWidth = this.isVertical ? 0 : legendWidth;\n          rowCount++;\n          columnCount = 0;\n          columnHeight = verticalArrowSpace;\n        }\n        var len = rowCount > 0 ? rowCount - 1 : 0;\n        this.rowHeights[len] = Math.max(this.rowHeights[len] ? this.rowHeights[len] : 0, legendOption.textSize.height);\n        this.columnHeights[columnCount] = (this.columnHeights[columnCount] ? this.columnHeights[columnCount] : 0) + legendOption.textSize.height + (this.isVertical ? i === 0 ? padding : this.itemPadding : padding);\n        columnCount++;\n      }\n    }\n    columnHeight = Math.max.apply(null, this.columnHeights) + padding + titleSpace;\n    columnHeight = Math.max(columnHeight, this.maxItemHeight + padding + padding + titleSpace);\n    this.isPaging = legendBounds.height < columnHeight;\n    if (this.isPaging && !legend.enablePages) {\n      if (this.isVertical) {\n        columnHeight += columnHeight;\n      } else {\n        columnHeight = this.maxItemHeight + padding + padding + (titlePosition === 'Top' ? titleSpace : 0);\n      }\n    }\n    this.totalPages = rowCount;\n    if (!this.isPaging && !this.isVertical) {\n      rowWidth += this.isTitle && titlePosition !== 'Top' ? this.fivePixel + this.legendTitleSize.width + this.fivePixel : 0;\n    }\n    if (render) {\n      this.setBounds(Math.max(rowWidth + padding, maximumWidth), columnHeight, legend, legendBounds);\n    } else {\n      this.setBounds(0, 0, legend, legendBounds);\n    }\n  };\n  /**\n   * Calculates and retrieves the height of the legend within the specified legend bounds and based on the provided options and settings.\n   *\n   * @param {LegendOptions} legendOption - The options and data for the legend.\n   * @param {Chart3DLegendSettingsModel} legend - The customization options for the legend.\n   * @param {Rect} legendBounds - The bounds of the legend.\n   * @param {number} rowWidth - The width of a row within the legend.\n   * @param {number} legendHeight - The initial height of the legend.\n   * @param {number} padding - The padding applied to the legend.\n   * @returns {void}\n   * @private\n   */\n  Legend3D.prototype.getLegendHeight = function (legendOption, legend, legendBounds, rowWidth, legendHeight, padding) {\n    var legendWidth = legendOption.textSize.width;\n    var textPadding = legend.shapePadding + padding * 2 + legend.shapeWidth;\n    switch (legend.textWrap) {\n      case 'Wrap':\n      case 'AnyWhere':\n        if (legendWidth > legend.maximumLabelWidth || legendWidth + rowWidth > legendBounds.width) {\n          legendOption.textCollection = textWrap(legendOption.text, legend.maximumLabelWidth ? Math.min(legend.maximumLabelWidth, legendBounds.width - textPadding) : legendBounds.width - textPadding, legend.textStyle, this.chart.enableRtl, null, null, this.chart.themeStyle.legendLabelFont);\n        } else {\n          legendOption.textCollection.push(legendOption.text);\n        }\n        legendOption.textSize.height = legendHeight * legendOption.textCollection.length;\n        break;\n    }\n  };\n  /**\n   * Calculates and retrieves the render point (position) for the legend item within the legend area.\n   *\n   * @param {LegendOptions} legendOption - The options and data for the legend item.\n   * @param {ChartLocation} start - The starting point for positioning the legend item.\n   * @param {number} textPadding - The padding applied to the legend text.\n   * @param {LegendOptions} prevLegend - The previous legend item for reference.\n   * @param {Rect} rect - The bounding rectangle of the legend area.\n   * @param {number} count - The index of the legend item within the legend.\n   * @param {number} firstLegend - The index of the first legend item.\n   * @returns {void}\n   * @private\n   */\n  Legend3D.prototype.getRenderPoint = function (legendOption, start, textPadding, prevLegend, rect, count, firstLegend) {\n    var padding = this.legend.padding;\n    var textWidth = textPadding + (this.legend.maximumLabelWidth ? this.legend.maximumLabelWidth : prevLegend.textSize.width);\n    var previousBound = prevLegend.location.x + (!this.isRtlEnable ? textWidth : -textWidth);\n    if (this.isWithinBounds(previousBound, (this.legend.maximumLabelWidth ? this.legend.maximumLabelWidth : legendOption.textSize.width) + textPadding - this.itemPadding, rect) || this.isVertical) {\n      legendOption.location.x = start.x;\n      if (count !== firstLegend) {\n        this.chartRowCount++;\n      }\n      legendOption.location.y = count === firstLegend ? prevLegend.location.y : prevLegend.location.y + (this.isVertical ? prevLegend.textSize.height : this.rowHeights[this.chartRowCount - 2]) + (this.isVertical ? this.itemPadding : padding);\n    } else {\n      legendOption.location.x = count === firstLegend ? prevLegend.location.x : previousBound;\n      legendOption.location.y = prevLegend.location.y;\n    }\n    var availwidth = !this.isRtlEnable ? this.legendBounds.x + this.legendBounds.width - (legendOption.location.x + textPadding - this.itemPadding - this.legend.shapeWidth / 2) : legendOption.location.x - textPadding + this.itemPadding + this.legend.shapeWidth / 2 - this.legendBounds.x;\n    if (!this.isVertical && this.isPaging && !this.legend.enablePages) {\n      availwidth = this.legendBounds.width - legendOption.location.x - this.fivePixel;\n    }\n    availwidth = this.legend.maximumLabelWidth ? Math.min(this.legend.maximumLabelWidth, availwidth) : availwidth;\n    if (this.legend.textOverflow === 'Ellipsis' && this.legend.textWrap === 'Normal') {\n      legendOption.text = textTrim(+availwidth.toFixed(4), legendOption.text, this.legend.textStyle, this.chart.enableRtl, this.chart.themeStyle.legendLabelFont);\n    }\n  };\n  /**\n   * Checks whether the previous bound  width is within the given rectangular bounds.\n   *\n   * @param {number} previousBound - The previous bound (position) of an element.\n   * @param {number} textWidth - The width of the text or element to be positioned.\n   * @param {Rect} rect - The rectangular bounds to check against.\n   * @returns {boolean} - True if the element is within the bounds; otherwise, false.\n   * @private\n   */\n  Legend3D.prototype.isWithinBounds = function (previousBound, textWidth, rect) {\n    if (!this.isRtlEnable) {\n      return previousBound + textWidth > rect.x + rect.width + this.legend.shapeWidth / 2;\n    } else {\n      return previousBound - textWidth < rect.x - this.legend.shapeWidth / 2;\n    }\n  };\n  /**\n   * Handles the click event on a legend item at the specified index.\n   *\n   * @param {number} index - The index of the legend item clicked.\n   * @param {Event | PointerEvent} event - The click or pointer event.\n   * @returns {void}\n   * @private\n   */\n  Legend3D.prototype.LegendClick = function (index, event) {\n    var chart = this.chart;\n    var seriesIndex = chart.legendSettings.mode === 'Series' ? index : 0;\n    var legendIndex = !this.isReverse ? index : this.legendCollections.length - 1 - index;\n    var series = chart.visibleSeries[seriesIndex];\n    var legend = this.legendCollections[legendIndex];\n    var changeDetection = 'isProtectedOnChange';\n    if (chart.legendSettings.mode === 'Series') {\n      var legendClickArgs = {\n        legendText: legend.text,\n        legendShape: legend.shape,\n        series: series,\n        cancel: false\n      };\n      this.chart.trigger(legendClick, legendClickArgs);\n      series.legendShape = legendClickArgs.legendShape;\n      if (!legendClickArgs.cancel) {\n        if (series.fill !== null) {\n          chart.visibleSeries[index].interior = series.fill;\n        }\n        if (chart.legendSettings.toggleVisibility) {\n          series.chart[changeDetection] = true;\n          this.changeSeriesVisiblity(series, series.visible);\n          legend.visible = series.visible;\n          this.refreshLegendToggle(chart, series);\n        } else if (chart.highlight3DModule) {\n          chart.highlight3DModule.legendSelection(chart, index, event.target, event.type);\n        } else if (chart.selection3DModule) {\n          chart.selection3DModule.legendSelection(chart, index, event.target, event.type);\n        }\n        series.chart[changeDetection] = false;\n      }\n    } else if (chart.legendSettings.mode === 'Point') {\n      var point = series.points[index];\n      var legendClickArgs = {\n        legendText: legend.text,\n        legendShape: legend.shape,\n        series: series,\n        cancel: false\n      };\n      this.chart.trigger(legendClick, legendClickArgs);\n      if (chart.legendSettings.toggleVisibility && !legendClickArgs.cancel) {\n        point.visible = !point.visible;\n        var legendOption = this.legendCollections[index];\n        legendOption.visible = point.visible;\n        this.refreshLegendToggle(chart, series);\n      }\n    }\n  };\n  /**\n   * Refreshes the legend toggle behavior for the specified series in a 3D chart.\n   *\n   * @param {Chart3D} chart - The 3D chart containing the legend and series.\n   * @param {Chart3DSeries} series - The series for which the legend toggle behavior is refreshed.\n   * @returns {void}\n   * @private\n   */\n  Legend3D.prototype.refreshLegendToggle = function (chart, series) {\n    var selectedDataIndexes = [];\n    if (chart.selection3DModule) {\n      selectedDataIndexes = extend([], chart.selection3DModule.selectedDataIndexes, null, true);\n    }\n    if (chart.svgObject.childNodes.length > 0) {\n      while (chart.svgObject.lastChild) {\n        chart.svgObject.removeChild(chart.svgObject.lastChild);\n      }\n      remove(chart.svgObject);\n    }\n    chart.animateSeries = false;\n    removeElement(getElement(chart.element.id + '_Secondary_Element').querySelectorAll('.ejSVGTooltip')[0]);\n    this.redrawSeriesElements(series, chart);\n    chart.removeSvg();\n    chart.refreshAxis();\n    series.refreshAxisLabel();\n    this.refreshSeries(chart.visibleSeries);\n    chart.polygons = [];\n    chart.refreshBound();\n    chart.trigger('loaded', {\n      chart: chart\n    });\n    if (selectedDataIndexes.length > 0) {\n      chart.selection3DModule.selectedDataIndexes = selectedDataIndexes;\n      chart.selection3DModule.redrawSelection(chart, chart.selectionMode);\n    }\n    if (chart.highlight3DModule && chart.highlightMode !== 'None' || chart.legendSettings.enableHighlight) {\n      chart.highlight3DModule.redrawSelection(chart, chart.highlightMode);\n    }\n    chart.redraw = false;\n  };\n  /**\n   * Changes the visibility of the specified series in a 3D chart.\n   *\n   * @param {Chart3DSeries} series - The series whose visibility is being changed.\n   * @param {boolean} visibility - The new visibility state for the series (true for visible, false for hidden).\n   * @returns {void}\n   * @private\n   */\n  Legend3D.prototype.changeSeriesVisiblity = function (series, visibility) {\n    series.visible = !visibility;\n    if (this.isSecondaryAxis(series.xAxis)) {\n      series.xAxis.internalVisibility = series.xAxis.series.some(function (value) {\n        return value.visible;\n      });\n    }\n    if (this.isSecondaryAxis(series.yAxis)) {\n      series.yAxis.internalVisibility = series.yAxis.series.some(function (value) {\n        return value.visible;\n      });\n    }\n  };\n  /**\n   * Checks whether the specified axis is a secondary axis within the 3D chart.\n   *\n   * @param {Chart3DAxis} axis - The axis to be checked.\n   * @returns {boolean} - True if the axis is a secondary axis, otherwise, false.\n   * @private\n   */\n  Legend3D.prototype.isSecondaryAxis = function (axis) {\n    return this.chart.axes.indexOf(axis) > -1;\n  };\n  /**\n   * Redraws the elements of a 3D series on the chart.\n   *\n   * @param {Chart3DSeries} series - The 3D series to redraw.\n   * @param {Chart3D} chart - The 3D chart instance.\n   * @returns {void}\n   * @private\n   */\n  Legend3D.prototype.redrawSeriesElements = function (series, chart) {\n    if (!chart.redraw) {\n      return null;\n    }\n    removeElement(chart.element.id + '_Series_' + (series.index === undefined ? series.category : series.index) + '_DataLabelCollections');\n  };\n  /**\n   * Refreshes the position information of each series in a collection.\n   *\n   * @param {Chart3DSeries[]} seriesCollection - The collection of 3D series to refresh.\n   * @returns {void}\n   * @private\n   */\n  Legend3D.prototype.refreshSeries = function (seriesCollection) {\n    for (var _i = 0, seriesCollection_1 = seriesCollection; _i < seriesCollection_1.length; _i++) {\n      var series = seriesCollection_1[_i];\n      series.position = undefined;\n    }\n  };\n  /**\n   * To show the tooltip for the trimmed text in legend.\n   *\n   * @param {Event | PointerEvent} event - Specifies the event.\n   * @returns {void}\n   * @private\n   */\n  Legend3D.prototype.click = function (event) {\n    if (!this.chart.legendSettings.visible) {\n      return;\n    }\n    var targetId = event.target.id.indexOf('_chart_legend_g_') > -1 ? event.target.firstChild['id'] : event.target.id;\n    var legendItemsId = [this.legendID + '_text_', this.legendID + '_shape_marker_', this.legendID + '_shape_'];\n    var seriesIndex;\n    for (var _i = 0, legendItemsId_2 = legendItemsId; _i < legendItemsId_2.length; _i++) {\n      var id = legendItemsId_2[_i];\n      if (targetId.indexOf(id) > -1) {\n        seriesIndex = parseInt(targetId.split(id)[1], 10);\n        this.LegendClick(seriesIndex, event);\n        break;\n      }\n    }\n    if (targetId.indexOf(this.legendID + '_pageup') > -1) {\n      this.changePage(event, true);\n    } else if (targetId.indexOf(this.legendID + '_pagedown') > -1) {\n      this.changePage(event, false);\n    }\n  };\n  /**\n   * Get module name\n   *\n   * @returns {string} - Returns the module name\n   */\n  Legend3D.prototype.getModuleName = function () {\n    return 'Legend3D';\n  };\n  /**\n   * To destroy the legend module.\n   *\n   * @returns {void}\n   * @private\n   */\n  Legend3D.prototype.destroy = function () {\n    this.removeEventListener();\n  };\n  return Legend3D;\n}(BaseLegend);\nexport { Legend3D };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","Browser","ChildProperty","Complex","Property","extend","remove","Border","ContainerPadding","Font","Margin","LegendOptions","BaseLegend","textTrim","removeElement","getUnicodeText","measureText","getElement","legendRender","legendClick","regSub","regSup","textWrap","Location","Chart3DLegendSettings","_super","apply","x","y","fontFamily","size","fontStyle","fontWeight","color","left","right","top","bottom","Legend3D","chart","_this","call","library","addEventListener","isDestroyed","on","touchMoveEvent","mouseMove","click","touchEndEvent","mouseEnd","removeEventListener","off","e","legendSettings","visible","isTouch","move","highlight3DModule","highlightMode","enableHighlight","legendItemsId","legendID","targetId","id","index","_i","legendItemsId_1","indexOf","parseInt","split","legendSelection","type","getLegendOptions","visibleSeriesCollection","legendCollections","seriesType","fill","isRtlEnable","enableRtl","isReverse","reverse","legend","mode","visibleSeriesCollection_1","series","pointColorMapping","points","interior","push","name","legendShape","legendImageUrl","_loop_1","this_1","filter","text","toString","_a","_b","get3DLegendBounds","availableSize","legendBounds","calculateLegendTitle","isTitle","title","chartRowCount","rowHeights","columnHeights","pageHeights","padding","titlePosition","extraHeight","legendOption","extraWidth","arrowWidth","arrowHeight","verticalArrowSpace","isVertical","enablePages","titleSpace","legendTitleSize","height","fivePixel","width","shapeWidth","shapePadding","maximumWidth","rowWidth","legendWidth","columnHeight","columnCount","rowCount","titlePlusArrowSpace","legendEventArgs","render","maxItemHeight","Math","max","textStyle","themeStyle","legendLabelFont","shapeHeight","test","shape","cancel","trigger","markerShape","textSize","maximumLabelWidth","itemPadding","getLegendHeight","len","isPaging","totalPages","setBounds","legendHeight","textPadding","textCollection","min","getRenderPoint","start","prevLegend","rect","count","firstLegend","textWidth","previousBound","location","isWithinBounds","availwidth","textOverflow","toFixed","LegendClick","event","seriesIndex","legendIndex","visibleSeries","changeDetection","legendClickArgs","legendText","toggleVisibility","changeSeriesVisiblity","refreshLegendToggle","selection3DModule","point","selectedDataIndexes","svgObject","childNodes","lastChild","removeChild","animateSeries","element","querySelectorAll","redrawSeriesElements","removeSvg","refreshAxis","refreshAxisLabel","refreshSeries","polygons","refreshBound","redrawSelection","selectionMode","redraw","visibility","isSecondaryAxis","xAxis","internalVisibility","some","value","yAxis","axis","axes","undefined","category","seriesCollection","seriesCollection_1","position","firstChild","legendItemsId_2","changePage","getModuleName","destroy"],"sources":["C:/Users/mkfun/Desktop/ct assignment/admin/node_modules/@syncfusion/ej2-charts/src/chart3d/legend/legend.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * Chart legend\n */\nimport { Browser, ChildProperty, Complex, Property, extend, remove } from '@syncfusion/ej2-base';\nimport { Border, ContainerPadding, Font, Margin } from '../../common/model/base';\nimport { LegendOptions, BaseLegend } from '../../common/legend/legend';\nimport { textTrim, removeElement } from '../../common/utils/helper';\nimport { getUnicodeText } from '../../common/utils/helper';\nimport { measureText, getElement } from '@syncfusion/ej2-svg-base';\nimport { legendRender, legendClick, regSub, regSup } from '../../common/model/constants';\nimport { textWrap } from '../../common/utils/helper';\nimport { Location } from '../../common/model/base';\n/**\n * Configures the legends in charts.\n */\nvar Chart3DLegendSettings = /** @class */ (function (_super) {\n    __extends(Chart3DLegendSettings, _super);\n    function Chart3DLegendSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property(true)\n    ], Chart3DLegendSettings.prototype, \"visible\", void 0);\n    __decorate([\n        Property(null)\n    ], Chart3DLegendSettings.prototype, \"height\", void 0);\n    __decorate([\n        Property(null)\n    ], Chart3DLegendSettings.prototype, \"width\", void 0);\n    __decorate([\n        Complex({ x: 0, y: 0 }, Location)\n    ], Chart3DLegendSettings.prototype, \"location\", void 0);\n    __decorate([\n        Property('Auto')\n    ], Chart3DLegendSettings.prototype, \"position\", void 0);\n    __decorate([\n        Property('Series')\n    ], Chart3DLegendSettings.prototype, \"mode\", void 0);\n    __decorate([\n        Property(8)\n    ], Chart3DLegendSettings.prototype, \"padding\", void 0);\n    __decorate([\n        Property(null)\n    ], Chart3DLegendSettings.prototype, \"itemPadding\", void 0);\n    __decorate([\n        Property('Center')\n    ], Chart3DLegendSettings.prototype, \"alignment\", void 0);\n    __decorate([\n        Complex({ fontFamily: null, size: null, fontStyle: null, fontWeight: null, color: null }, Font)\n    ], Chart3DLegendSettings.prototype, \"textStyle\", void 0);\n    __decorate([\n        Property(10)\n    ], Chart3DLegendSettings.prototype, \"shapeHeight\", void 0);\n    __decorate([\n        Property(10)\n    ], Chart3DLegendSettings.prototype, \"shapeWidth\", void 0);\n    __decorate([\n        Complex({}, Border)\n    ], Chart3DLegendSettings.prototype, \"border\", void 0);\n    __decorate([\n        Complex({ left: 0, right: 0, top: 0, bottom: 0 }, Margin)\n    ], Chart3DLegendSettings.prototype, \"margin\", void 0);\n    __decorate([\n        Complex({ left: 0, right: 0, top: 0, bottom: 0 }, ContainerPadding)\n    ], Chart3DLegendSettings.prototype, \"containerPadding\", void 0);\n    __decorate([\n        Property(8)\n    ], Chart3DLegendSettings.prototype, \"shapePadding\", void 0);\n    __decorate([\n        Property('transparent')\n    ], Chart3DLegendSettings.prototype, \"background\", void 0);\n    __decorate([\n        Property(1)\n    ], Chart3DLegendSettings.prototype, \"opacity\", void 0);\n    __decorate([\n        Property(true)\n    ], Chart3DLegendSettings.prototype, \"toggleVisibility\", void 0);\n    __decorate([\n        Property(false)\n    ], Chart3DLegendSettings.prototype, \"enableHighlight\", void 0);\n    __decorate([\n        Property(null)\n    ], Chart3DLegendSettings.prototype, \"description\", void 0);\n    __decorate([\n        Property(3)\n    ], Chart3DLegendSettings.prototype, \"tabIndex\", void 0);\n    __decorate([\n        Property(null)\n    ], Chart3DLegendSettings.prototype, \"title\", void 0);\n    __decorate([\n        Complex({ fontFamily: null, size: null, fontStyle: null, fontWeight: null, color: null }, Font)\n    ], Chart3DLegendSettings.prototype, \"titleStyle\", void 0);\n    __decorate([\n        Property('Top')\n    ], Chart3DLegendSettings.prototype, \"titlePosition\", void 0);\n    __decorate([\n        Property('Normal')\n    ], Chart3DLegendSettings.prototype, \"textWrap\", void 0);\n    __decorate([\n        Property('Ellipsis')\n    ], Chart3DLegendSettings.prototype, \"textOverflow\", void 0);\n    __decorate([\n        Property(100)\n    ], Chart3DLegendSettings.prototype, \"maximumTitleWidth\", void 0);\n    __decorate([\n        Property(null)\n    ], Chart3DLegendSettings.prototype, \"maximumLabelWidth\", void 0);\n    __decorate([\n        Property(true)\n    ], Chart3DLegendSettings.prototype, \"enablePages\", void 0);\n    __decorate([\n        Property(false)\n    ], Chart3DLegendSettings.prototype, \"isInversed\", void 0);\n    __decorate([\n        Property(false)\n    ], Chart3DLegendSettings.prototype, \"reverse\", void 0);\n    return Chart3DLegendSettings;\n}(ChildProperty));\nexport { Chart3DLegendSettings };\n/**\n * The `Legend` module is used to render legend for the chart.\n */\nvar Legend3D = /** @class */ (function (_super) {\n    __extends(Legend3D, _super);\n    function Legend3D(chart) {\n        var _this = _super.call(this, chart) || this;\n        _this.library = _this;\n        _this.addEventListener();\n        return _this;\n    }\n    /**\n     * Binding events for legend module.\n     *\n     * @returns {void}\n     */\n    Legend3D.prototype.addEventListener = function () {\n        if (this.chart.isDestroyed) {\n            return;\n        }\n        this.chart.on(Browser.touchMoveEvent, this.mouseMove, this);\n        this.chart.on('click', this.click, this);\n        this.chart.on(Browser.touchEndEvent, this.mouseEnd, this);\n    };\n    /**\n     * Unbinding events for legend module.\n     *\n     * @returns {void}\n     */\n    Legend3D.prototype.removeEventListener = function () {\n        if (this.chart.isDestroyed) {\n            return;\n        }\n        this.chart.off(Browser.touchMoveEvent, this.mouseMove);\n        this.chart.off('click', this.click);\n        this.chart.off(Browser.touchEndEvent, this.mouseEnd);\n    };\n    /**\n     * To handle mosue move for legend module\n     *\n     * @param {MouseEvent} e - Specifies the mouse event.\n     * @returns {void}\n     */\n    Legend3D.prototype.mouseMove = function (e) {\n        if (this.chart.legendSettings.visible && !this.chart.isTouch) {\n            this.move(e);\n            if (this.chart.highlight3DModule && (this.chart.highlightMode !== 'None' || this.chart.legendSettings.enableHighlight)) {\n                var legendItemsId = [this.legendID + '_text_', this.legendID + '_shape_marker_',\n                    this.legendID + '_shape_', this.legendID + '_g_'];\n                var targetId = e.target.id;\n                var index = void 0;\n                for (var _i = 0, legendItemsId_1 = legendItemsId; _i < legendItemsId_1.length; _i++) {\n                    var id = legendItemsId_1[_i];\n                    if (targetId.indexOf(id) > -1) {\n                        index = parseInt(targetId.split(id)[1], 10);\n                        this.chart.highlight3DModule.legendSelection(this.chart, index, e.target, e.type);\n                        break;\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * To handle mouse end for legend module\n     *\n     * @param {MouseEvent} e - Specifies the mouse event.\n     * @returns {void}\n     */\n    Legend3D.prototype.mouseEnd = function (e) {\n        if (this.chart.legendSettings.visible && this.chart.isTouch) {\n            this.move(e);\n        }\n    };\n    /**\n     * Retrieves and returns legend options for the visible series within a 3D chart.\n     *\n     * @param {Chart3DSeries[]} visibleSeriesCollection - The collection of visible series to extract legend options from.\n     * @param {Chart3D} chart - The 3D chart containing the series and legend.\n     * @returns {void}\n     */\n    Legend3D.prototype.getLegendOptions = function (visibleSeriesCollection, chart) {\n        this.legendCollections = [];\n        var seriesType;\n        var fill;\n        this.isRtlEnable = chart.enableRtl;\n        this.isReverse = !this.isRtlEnable && chart.legendSettings.reverse;\n        if (visibleSeriesCollection.length > 1) {\n            this.legend.mode = 'Series';\n        }\n        for (var _i = 0, visibleSeriesCollection_1 = visibleSeriesCollection; _i < visibleSeriesCollection_1.length; _i++) {\n            var series = visibleSeriesCollection_1[_i];\n            if (this.legend.mode === 'Series') {\n                seriesType = series.type;\n                // To set legend color when use pointColorMapping\n                fill = (series.pointColorMapping && series.points.length > 0) ?\n                    (series.points[0].interior ? series.points[0].interior : series.interior) : series.interior;\n                this.legendCollections.push(new LegendOptions(series.name, fill, series.legendShape, series.visible, seriesType, series.legendImageUrl ? series.legendImageUrl : '', 'None', false, null, null));\n            }\n            else if (this.legend.mode === 'Point') {\n                var _loop_1 = function (points) {\n                    seriesType = series.type;\n                    fill = points.interior ? points.interior : series.interior;\n                    if (this_1.legendCollections.filter(function (i) { return i.text === points.x.toString(); }).length === 0) {\n                        this_1.legendCollections.push(new LegendOptions(points.x.toString(), fill, series.legendShape, points.visible, seriesType, '', 'None', false));\n                    }\n                };\n                var this_1 = this;\n                for (var _a = 0, _b = series.points; _a < _b.length; _a++) {\n                    var points = _b[_a];\n                    _loop_1(points);\n                }\n            }\n        }\n        if (this.isReverse) {\n            this.legendCollections.reverse();\n        }\n    };\n    /**\n     * Calculates and retrieves the legend bounds within the available size for the provided legend settings.\n     *\n     * @param {Size} availableSize - The available size for positioning the legend.\n     * @param {Rect} legendBounds - The initial bounds of the legend.\n     * @param {Chart3DLegendSettingsModel} legend - The customization option for the legend.\n     * @returns {void}\n     */\n    Legend3D.prototype.get3DLegendBounds = function (availableSize, legendBounds, legend) {\n        this.calculateLegendTitle(legend, legendBounds);\n        this.isTitle = legend.title ? true : false;\n        this.chartRowCount = 1;\n        this.rowHeights = [];\n        this.columnHeights = [];\n        this.pageHeights = [];\n        var padding = legend.padding;\n        var titlePosition = legend.titlePosition;\n        var extraHeight = 0;\n        var legendOption;\n        var extraWidth = 0;\n        var arrowWidth = this.arrowWidth;\n        var arrowHeight = this.arrowHeight;\n        var verticalArrowSpace = this.isVertical && !legend.enablePages ? arrowHeight : 0;\n        var titleSpace = this.isTitle && titlePosition === 'Top' ? this.legendTitleSize.height + this.fivePixel : 0;\n        titleSpace = this.isTitle && this.isVertical && titlePosition !== 'Top' ? this.legendTitleSize.height + this.fivePixel : titleSpace;\n        if (!this.isVertical) {\n            extraHeight = !legend.height ? ((availableSize.height / 100) * 5) : 0;\n        }\n        else {\n            extraWidth = !legend.width ? ((availableSize.width / 100) * 5) : 0;\n        }\n        legendBounds.height += (extraHeight);\n        legendBounds.width += extraWidth;\n        var shapeWidth = legend.shapeWidth;\n        var shapePadding = legend.shapePadding;\n        var maximumWidth = 0;\n        var rowWidth = 0;\n        var legendWidth = 0;\n        var columnHeight = 0;\n        var columnCount = 0;\n        var rowCount = 0;\n        var titlePlusArrowSpace = 0;\n        var legendEventArgs;\n        var render = false;\n        this.maxItemHeight = Math.max(measureText('MeasureText', legend.textStyle, this.chart.themeStyle.legendLabelFont).height, legend.shapeHeight);\n        for (var i = 0; i < this.legendCollections.length; i++) {\n            legendOption = this.legendCollections[i];\n            if (regSub.test(legendOption.text)) {\n                legendOption.text = getUnicodeText(legendOption.text, regSub);\n            }\n            if (regSup.test(legendOption.text)) {\n                legendOption.text = getUnicodeText(legendOption.text, regSup);\n            }\n            legendEventArgs = {\n                fill: legendOption.fill, text: legendOption.text, shape: legendOption.shape,\n                cancel: false\n            };\n            this.chart.trigger(legendRender, legendEventArgs);\n            legendOption.render = !legendEventArgs.cancel;\n            legendOption.text = legendEventArgs.text;\n            legendOption.fill = legendEventArgs.fill;\n            legendOption.shape = legendEventArgs.shape;\n            legendOption.markerShape = 'None';\n            legendOption.textSize = measureText(legendOption.text, legend.textStyle, this.chart.themeStyle.legendLabelFont);\n            shapeWidth = legendOption.text ? legend.shapeWidth : 0;\n            shapePadding = legendOption.text ? legend.shapePadding : 0;\n            if (legendOption.render && legendOption.text) {\n                render = true;\n                legendWidth = shapeWidth + shapePadding + (legend.maximumLabelWidth ? legend.maximumLabelWidth :\n                    legendOption.textSize.width) + (!this.isVertical ? (i === 0) ? padding : this.itemPadding : padding);\n                rowWidth = rowWidth + legendWidth;\n                if (!legend.enablePages && !this.isVertical) {\n                    titlePlusArrowSpace = this.isTitle && titlePosition !== 'Top' ? this.legendTitleSize.width + this.fivePixel : 0;\n                    titlePlusArrowSpace += arrowWidth;\n                }\n                this.getLegendHeight(legendOption, legend, legendBounds, rowWidth, this.maxItemHeight, padding);\n                if (legendBounds.width < (padding + rowWidth + titlePlusArrowSpace) || this.isVertical) {\n                    maximumWidth = Math.max(maximumWidth, (rowWidth + padding + titlePlusArrowSpace - (this.isVertical ? 0 : legendWidth)));\n                    if (rowCount === 0 && (legendWidth !== rowWidth)) {\n                        rowCount = 1;\n                    }\n                    rowWidth = this.isVertical ? 0 : legendWidth;\n                    rowCount++;\n                    columnCount = 0;\n                    columnHeight = verticalArrowSpace;\n                }\n                var len = (rowCount > 0 ? (rowCount - 1) : 0);\n                this.rowHeights[len] = Math.max((this.rowHeights[len] ? this.rowHeights[len] : 0), legendOption.textSize.height);\n                this.columnHeights[columnCount] = (this.columnHeights[columnCount] ?\n                    this.columnHeights[columnCount] : 0) +\n                    legendOption.textSize.height + (this.isVertical ? (i === 0) ? padding : this.itemPadding : padding);\n                columnCount++;\n            }\n        }\n        columnHeight = Math.max.apply(null, this.columnHeights) + padding + titleSpace;\n        columnHeight = Math.max(columnHeight, (this.maxItemHeight + padding) + padding + titleSpace);\n        this.isPaging = legendBounds.height < columnHeight;\n        if (this.isPaging && !legend.enablePages) {\n            if (this.isVertical) {\n                columnHeight += columnHeight;\n            }\n            else {\n                columnHeight = (this.maxItemHeight + padding) + padding + (titlePosition === 'Top' ? titleSpace : 0);\n            }\n        }\n        this.totalPages = rowCount;\n        if (!this.isPaging && !this.isVertical) {\n            rowWidth += this.isTitle && titlePosition !== 'Top' ? (this.fivePixel + this.legendTitleSize.width + this.fivePixel) : 0;\n        }\n        if (render) {\n            this.setBounds(Math.max((rowWidth + padding), maximumWidth), columnHeight, legend, legendBounds);\n        }\n        else {\n            this.setBounds(0, 0, legend, legendBounds);\n        }\n    };\n    /**\n     * Calculates and retrieves the height of the legend within the specified legend bounds and based on the provided options and settings.\n     *\n     * @param {LegendOptions} legendOption - The options and data for the legend.\n     * @param {Chart3DLegendSettingsModel} legend - The customization options for the legend.\n     * @param {Rect} legendBounds - The bounds of the legend.\n     * @param {number} rowWidth - The width of a row within the legend.\n     * @param {number} legendHeight - The initial height of the legend.\n     * @param {number} padding - The padding applied to the legend.\n     * @returns {void}\n     * @private\n     */\n    Legend3D.prototype.getLegendHeight = function (legendOption, legend, legendBounds, rowWidth, legendHeight, padding) {\n        var legendWidth = legendOption.textSize.width;\n        var textPadding = legend.shapePadding + (padding * 2) + legend.shapeWidth;\n        switch (legend.textWrap) {\n            case 'Wrap':\n            case 'AnyWhere':\n                if (legendWidth > legend.maximumLabelWidth || legendWidth + rowWidth > legendBounds.width) {\n                    legendOption.textCollection = textWrap(legendOption.text, (legend.maximumLabelWidth ? Math.min(legend.maximumLabelWidth, (legendBounds.width - textPadding)) :\n                        (legendBounds.width - textPadding)), legend.textStyle, this.chart.enableRtl, null, null, this.chart.themeStyle.legendLabelFont);\n                }\n                else {\n                    legendOption.textCollection.push(legendOption.text);\n                }\n                legendOption.textSize.height = (legendHeight * legendOption.textCollection.length);\n                break;\n        }\n    };\n    /**\n     * Calculates and retrieves the render point (position) for the legend item within the legend area.\n     *\n     * @param {LegendOptions} legendOption - The options and data for the legend item.\n     * @param {ChartLocation} start - The starting point for positioning the legend item.\n     * @param {number} textPadding - The padding applied to the legend text.\n     * @param {LegendOptions} prevLegend - The previous legend item for reference.\n     * @param {Rect} rect - The bounding rectangle of the legend area.\n     * @param {number} count - The index of the legend item within the legend.\n     * @param {number} firstLegend - The index of the first legend item.\n     * @returns {void}\n     * @private\n     */\n    Legend3D.prototype.getRenderPoint = function (legendOption, start, textPadding, prevLegend, rect, count, firstLegend) {\n        var padding = this.legend.padding;\n        var textWidth = textPadding + (this.legend.maximumLabelWidth ?\n            this.legend.maximumLabelWidth : prevLegend.textSize.width);\n        var previousBound = prevLegend.location.x + ((!this.isRtlEnable) ? textWidth : -textWidth);\n        if (this.isWithinBounds(previousBound, (this.legend.maximumLabelWidth ?\n            this.legend.maximumLabelWidth : legendOption.textSize.width) + textPadding - this.itemPadding, rect) || this.isVertical) {\n            legendOption.location.x = start.x;\n            if (count !== firstLegend) {\n                this.chartRowCount++;\n            }\n            legendOption.location.y = (count === firstLegend) ? prevLegend.location.y :\n                prevLegend.location.y + (this.isVertical ? prevLegend.textSize.height :\n                    this.rowHeights[(this.chartRowCount - 2)]) + (this.isVertical ? this.itemPadding : padding);\n        }\n        else {\n            legendOption.location.x = (count === firstLegend) ? prevLegend.location.x : previousBound;\n            legendOption.location.y = prevLegend.location.y;\n        }\n        var availwidth = (!this.isRtlEnable) ? (this.legendBounds.x + this.legendBounds.width) - (legendOption.location.x +\n            textPadding - this.itemPadding - this.legend.shapeWidth / 2) :\n            (legendOption.location.x - textPadding + this.itemPadding + (this.legend.shapeWidth / 2)) - this.legendBounds.x;\n        if (!this.isVertical && this.isPaging && !this.legend.enablePages) {\n            availwidth = this.legendBounds.width - legendOption.location.x - this.fivePixel;\n        }\n        availwidth = this.legend.maximumLabelWidth ? Math.min(this.legend.maximumLabelWidth, availwidth) : availwidth;\n        if (this.legend.textOverflow === 'Ellipsis' && this.legend.textWrap === 'Normal') {\n            legendOption.text = textTrim(+availwidth.toFixed(4), legendOption.text, this.legend.textStyle, this.chart.enableRtl, this.chart.themeStyle.legendLabelFont);\n        }\n    };\n    /**\n     * Checks whether the previous bound  width is within the given rectangular bounds.\n     *\n     * @param {number} previousBound - The previous bound (position) of an element.\n     * @param {number} textWidth - The width of the text or element to be positioned.\n     * @param {Rect} rect - The rectangular bounds to check against.\n     * @returns {boolean} - True if the element is within the bounds; otherwise, false.\n     * @private\n     */\n    Legend3D.prototype.isWithinBounds = function (previousBound, textWidth, rect) {\n        if (!this.isRtlEnable) {\n            return (previousBound + textWidth) > (rect.x + rect.width + (this.legend.shapeWidth / 2));\n        }\n        else {\n            return (previousBound - textWidth) < (rect.x - (this.legend.shapeWidth / 2));\n        }\n    };\n    /**\n     * Handles the click event on a legend item at the specified index.\n     *\n     * @param {number} index - The index of the legend item clicked.\n     * @param {Event | PointerEvent} event - The click or pointer event.\n     * @returns {void}\n     * @private\n     */\n    Legend3D.prototype.LegendClick = function (index, event) {\n        var chart = this.chart;\n        var seriesIndex = chart.legendSettings.mode === 'Series' ? index : 0;\n        var legendIndex = !this.isReverse ? index : (this.legendCollections.length - 1) - index;\n        var series = chart.visibleSeries[seriesIndex];\n        var legend = this.legendCollections[legendIndex];\n        var changeDetection = 'isProtectedOnChange';\n        if (chart.legendSettings.mode === 'Series') {\n            var legendClickArgs = {\n                legendText: legend.text, legendShape: legend.shape,\n                series: series, cancel: false\n            };\n            this.chart.trigger(legendClick, legendClickArgs);\n            series.legendShape = legendClickArgs.legendShape;\n            if (!legendClickArgs.cancel) {\n                if (series.fill !== null) {\n                    chart.visibleSeries[index].interior = series.fill;\n                }\n                if (chart.legendSettings.toggleVisibility) {\n                    series.chart[changeDetection] = true;\n                    this.changeSeriesVisiblity(series, series.visible);\n                    legend.visible = series.visible;\n                    this.refreshLegendToggle(chart, series);\n                }\n                else if (chart.highlight3DModule) {\n                    chart.highlight3DModule.legendSelection(chart, index, event.target, event.type);\n                }\n                else if (chart.selection3DModule) {\n                    chart.selection3DModule.legendSelection(chart, index, event.target, event.type);\n                }\n                series.chart[changeDetection] = false;\n            }\n        }\n        else if (chart.legendSettings.mode === 'Point') {\n            var point = series.points[index];\n            var legendClickArgs = {\n                legendText: legend.text, legendShape: legend.shape,\n                series: series, cancel: false\n            };\n            this.chart.trigger(legendClick, legendClickArgs);\n            if (chart.legendSettings.toggleVisibility && !legendClickArgs.cancel) {\n                point.visible = !point.visible;\n                var legendOption = this.legendCollections[index];\n                legendOption.visible = point.visible;\n                this.refreshLegendToggle(chart, series);\n            }\n        }\n    };\n    /**\n     * Refreshes the legend toggle behavior for the specified series in a 3D chart.\n     *\n     * @param {Chart3D} chart - The 3D chart containing the legend and series.\n     * @param {Chart3DSeries} series - The series for which the legend toggle behavior is refreshed.\n     * @returns {void}\n     * @private\n     */\n    Legend3D.prototype.refreshLegendToggle = function (chart, series) {\n        var selectedDataIndexes = [];\n        if (chart.selection3DModule) {\n            selectedDataIndexes = extend([], chart.selection3DModule.selectedDataIndexes, null, true);\n        }\n        if ((chart.svgObject.childNodes.length > 0)) {\n            while (chart.svgObject.lastChild) {\n                chart.svgObject.removeChild(chart.svgObject.lastChild);\n            }\n            remove(chart.svgObject);\n        }\n        chart.animateSeries = false;\n        removeElement(getElement(chart.element.id + '_Secondary_Element').querySelectorAll('.ejSVGTooltip')[0]);\n        this.redrawSeriesElements(series, chart);\n        chart.removeSvg();\n        chart.refreshAxis();\n        series.refreshAxisLabel();\n        this.refreshSeries(chart.visibleSeries);\n        chart.polygons = [];\n        chart.refreshBound();\n        chart.trigger('loaded', { chart: chart });\n        if (selectedDataIndexes.length > 0) {\n            chart.selection3DModule.selectedDataIndexes = selectedDataIndexes;\n            chart.selection3DModule.redrawSelection(chart, chart.selectionMode);\n        }\n        if (chart.highlight3DModule && chart.highlightMode !== 'None' || chart.legendSettings.enableHighlight) {\n            chart.highlight3DModule.redrawSelection(chart, chart.highlightMode);\n        }\n        chart.redraw = false;\n    };\n    /**\n     * Changes the visibility of the specified series in a 3D chart.\n     *\n     * @param {Chart3DSeries} series - The series whose visibility is being changed.\n     * @param {boolean} visibility - The new visibility state for the series (true for visible, false for hidden).\n     * @returns {void}\n     * @private\n     */\n    Legend3D.prototype.changeSeriesVisiblity = function (series, visibility) {\n        series.visible = !visibility;\n        if (this.isSecondaryAxis(series.xAxis)) {\n            series.xAxis.internalVisibility = series.xAxis.series.some(function (value) { return (value.visible); });\n        }\n        if (this.isSecondaryAxis(series.yAxis)) {\n            series.yAxis.internalVisibility = series.yAxis.series.some(function (value) { return (value.visible); });\n        }\n    };\n    /**\n     * Checks whether the specified axis is a secondary axis within the 3D chart.\n     *\n     * @param {Chart3DAxis} axis - The axis to be checked.\n     * @returns {boolean} - True if the axis is a secondary axis, otherwise, false.\n     * @private\n     */\n    Legend3D.prototype.isSecondaryAxis = function (axis) {\n        return (this.chart.axes.indexOf(axis) > -1);\n    };\n    /**\n     * Redraws the elements of a 3D series on the chart.\n     *\n     * @param {Chart3DSeries} series - The 3D series to redraw.\n     * @param {Chart3D} chart - The 3D chart instance.\n     * @returns {void}\n     * @private\n     */\n    Legend3D.prototype.redrawSeriesElements = function (series, chart) {\n        if (!chart.redraw) {\n            return null;\n        }\n        removeElement(chart.element.id + '_Series_' + (series.index === undefined ? series.category : series.index) +\n            '_DataLabelCollections');\n    };\n    /**\n     * Refreshes the position information of each series in a collection.\n     *\n     * @param {Chart3DSeries[]} seriesCollection - The collection of 3D series to refresh.\n     * @returns {void}\n     * @private\n     */\n    Legend3D.prototype.refreshSeries = function (seriesCollection) {\n        for (var _i = 0, seriesCollection_1 = seriesCollection; _i < seriesCollection_1.length; _i++) {\n            var series = seriesCollection_1[_i];\n            series.position = undefined;\n        }\n    };\n    /**\n     * To show the tooltip for the trimmed text in legend.\n     *\n     * @param {Event | PointerEvent} event - Specifies the event.\n     * @returns {void}\n     * @private\n     */\n    Legend3D.prototype.click = function (event) {\n        if (!this.chart.legendSettings.visible) {\n            return;\n        }\n        var targetId = event.target.id.indexOf('_chart_legend_g_') > -1 ?\n            event.target.firstChild['id'] : event.target.id;\n        var legendItemsId = [this.legendID + '_text_', this.legendID + '_shape_marker_',\n            this.legendID + '_shape_'];\n        var seriesIndex;\n        for (var _i = 0, legendItemsId_2 = legendItemsId; _i < legendItemsId_2.length; _i++) {\n            var id = legendItemsId_2[_i];\n            if (targetId.indexOf(id) > -1) {\n                seriesIndex = parseInt(targetId.split(id)[1], 10);\n                this.LegendClick(seriesIndex, event);\n                break;\n            }\n        }\n        if (targetId.indexOf(this.legendID + '_pageup') > -1) {\n            this.changePage(event, true);\n        }\n        else if (targetId.indexOf(this.legendID + '_pagedown') > -1) {\n            this.changePage(event, false);\n        }\n    };\n    /**\n     * Get module name\n     *\n     * @returns {string} - Returns the module name\n     */\n    Legend3D.prototype.getModuleName = function () {\n        return 'Legend3D';\n    };\n    /**\n     * To destroy the legend module.\n     *\n     * @returns {void}\n     * @private\n     */\n    Legend3D.prototype.destroy = function () {\n        this.removeEventListener();\n    };\n    return Legend3D;\n}(BaseLegend));\nexport { Legend3D };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}