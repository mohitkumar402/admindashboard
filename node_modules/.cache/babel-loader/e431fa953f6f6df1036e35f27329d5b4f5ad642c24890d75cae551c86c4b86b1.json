{"ast":null,"code":"import { measureText, TextOption, renderTextElement, CircleOption, PathOption, RectOption } from '../../smithchart/utils/helper';\nimport { SmithchartRect } from '../../smithchart/utils/utils';\nimport { legendRender } from '../model/constant';\nvar SmithchartLegend = /** @class */function () {\n  function SmithchartLegend() {\n    this.legendSeries = [];\n  }\n  SmithchartLegend.prototype.renderLegend = function (smithchart) {\n    this._drawLegend(smithchart);\n  };\n  SmithchartLegend.prototype.calculateLegendBounds = function (smithchart) {\n    this.legendSeries = [];\n    var padding = 10;\n    var legend = smithchart.legendSettings;\n    var legendSizeHeight = legend.height;\n    var legendSizeWidth = legend.width;\n    var itemPadding = legend.itemPadding > 0 ? legend.itemPadding : 0;\n    var position = legend.position.toLowerCase();\n    var font = legend.title.textStyle;\n    var width = 0;\n    var height = 0;\n    var legendItemWidth = 0;\n    var legendItemHeight = 0;\n    var legendHeight = 0;\n    var svgObjectWidth = smithchart.availableSize.width - (smithchart.elementSpacing * 4 - legend.border.width * 2 + smithchart.border.width * 2);\n    var rowCount = legend.rowCount;\n    var columnCount = legend.columnCount;\n    var titleSize = measureText(smithchart.legendSettings['title']['text'], font, smithchart.themeStyle.legendTitleFont);\n    var maxRowWidth = 0;\n    var totalRowHeight = 0;\n    var curRowWidth = 0;\n    var curRowHeight = 0;\n    var allowItems;\n    var itemsCountRow = 0;\n    var length = smithchart.series.length;\n    var legendBounds;\n    if (smithchart.legendSettings.visible && length !== 0) {\n      if (position === 'bottom' || position === 'top' || position === 'custom') {\n        if (rowCount && columnCount && rowCount <= columnCount) {\n          rowCount = length / columnCount;\n        } else if (rowCount == null && columnCount != null) {\n          rowCount = length / columnCount;\n        } else if (rowCount == null && columnCount == null) {\n          rowCount = 1;\n        }\n        if (rowCount) {\n          allowItems = Math.ceil(length / rowCount);\n        }\n      } else {\n        if (rowCount && columnCount && rowCount <= columnCount) {\n          columnCount = length / rowCount;\n        } else if (rowCount != null && columnCount == null) {\n          columnCount = length / rowCount;\n        } else if (rowCount == null && columnCount == null) {\n          columnCount = 1;\n        }\n        if (columnCount) {\n          allowItems = columnCount;\n        }\n      }\n      for (var i = 0; i < length; i++) {\n        this.legendSeries.push({\n          text: smithchart.series[i]['name'] ? smithchart.series[i]['name'] : 'series' + i,\n          seriesIndex: i,\n          shape: smithchart.legendSettings.shape,\n          fill: smithchart.series[i].fill || smithchart.seriesColors[i % smithchart.seriesColors.length],\n          bounds: null\n        });\n        var legendsize = this._getLegendSize(smithchart, this.legendSeries[i]);\n        legendItemWidth = Math.max(legendsize['width'], legendItemWidth);\n        legendItemHeight = Math.max(legendsize['height'], legendItemHeight);\n        this.legendSeries[i]['bounds'] = {\n          width: legendItemWidth,\n          height: legendItemHeight\n        };\n        itemsCountRow = itemsCountRow + 1;\n        curRowWidth = curRowWidth + legendItemWidth + itemPadding;\n        curRowHeight = Math.max(legendItemHeight, curRowHeight);\n        if (position === 'top' || position === 'bottom' || position === 'custom') {\n          if (curRowWidth > svgObjectWidth) {\n            curRowWidth -= legendsize.width + itemPadding;\n            maxRowWidth = Math.max(maxRowWidth, curRowWidth);\n            curRowWidth = legendsize.width + itemPadding;\n            totalRowHeight = totalRowHeight + curRowHeight + itemPadding;\n          }\n        }\n        if (itemsCountRow === allowItems || i === length - 1) {\n          maxRowWidth = Math.max(maxRowWidth, curRowWidth);\n          totalRowHeight = totalRowHeight + curRowHeight + itemPadding;\n          legendHeight = totalRowHeight;\n          itemsCountRow = 0;\n          curRowHeight = 0;\n          curRowWidth = 0;\n        }\n      }\n      width = titleSize.width > maxRowWidth - itemPadding ? titleSize.width + padding * 2 + itemPadding : maxRowWidth + padding * 2 - smithchart.border.width * 2;\n      height = legendHeight + smithchart.elementSpacing;\n      legendBounds = {\n        x: 0,\n        y: 0,\n        width: width,\n        height: height\n      };\n    }\n    this.legendActualBounds = legendBounds;\n    if (legendSizeWidth != null) {\n      this.legendActualBounds.width = legendSizeWidth;\n    }\n    if (legendSizeHeight != null) {\n      this.legendActualBounds.height = legendSizeHeight;\n    }\n    return this.legendActualBounds;\n  };\n  SmithchartLegend.prototype._getLegendSize = function (smithchart, series) {\n    var legend = smithchart.legendSettings;\n    var symbolWidth = legend.itemStyle.width;\n    var symbolHeight = legend.itemStyle.height;\n    var textSize = measureText(series.text, legend.textStyle, smithchart.themeStyle.legendLabelFont);\n    var width = symbolWidth + textSize.width + legend.shapePadding;\n    var height = Math.max(symbolHeight, textSize.height);\n    return {\n      width: width,\n      height: height\n    };\n  };\n  SmithchartLegend.prototype._drawLegend = function (smithchart) {\n    var legend = smithchart.legendSettings;\n    var legendPosition = legend.position.toLowerCase();\n    var alignment = legend.alignment;\n    var legendBounds = this.legendActualBounds;\n    var maxWidth = 0;\n    var startX;\n    var startY;\n    var titleFont = smithchart.title.font ? smithchart.title.font : smithchart.title.textStyle;\n    var smithchartTitleHeight = measureText(smithchart.title.text, titleFont, smithchart.themeStyle.legendLabelFont).height;\n    var smithchartSubtitleHeight = measureText(smithchart.title.subtitle.text, smithchart.title.subtitle.textStyle, smithchart.themeStyle.legendLabelFont).height;\n    var elementSpacing = smithchart.elementSpacing;\n    var offset = smithchartTitleHeight + smithchartSubtitleHeight + elementSpacing + smithchart.margin.top;\n    var itemPadding = legend.itemPadding > 0 ? legend.itemPadding : 0;\n    var svgObjectWidth = smithchart.availableSize.width;\n    var svgObjectHeight = smithchart.availableSize.height;\n    var legendBorder = legend.border.width;\n    var legendWidth = 0;\n    var titleSize = measureText(legend['title']['text'], legend.title.textStyle, smithchart.themeStyle.legendLabelFont);\n    var legendTitleHeight = titleSize.height;\n    var borderSize = smithchart.border.width;\n    var svgWidth = svgObjectWidth - borderSize * 2;\n    var svgHeight = svgObjectHeight - borderSize * 2;\n    legendBounds.height += legendTitleHeight;\n    if (legendPosition !== 'custom') {\n      switch (legendPosition) {\n        case 'bottom':\n          legendBounds.y = svgHeight - (legendBounds.height + legendBorder + elementSpacing);\n          break;\n        case 'top':\n          legendBounds.y = borderSize + offset;\n          break;\n        case 'right':\n          legendBounds.x = svgWidth - legendBounds.width - elementSpacing * 2;\n          break;\n        case 'left':\n          legendBounds.x = borderSize + elementSpacing * 2;\n          break;\n      }\n      if (legendPosition === 'left' || legendPosition === 'right') {\n        switch (alignment) {\n          case 'Center':\n            legendBounds.y = svgHeight / 2 - (legendBounds.height + legendBorder * 2) / 2 + elementSpacing / 2;\n            break;\n          case 'Near':\n            legendBounds.y = borderSize + elementSpacing * 2 + offset;\n            break;\n          case 'Far':\n            legendBounds.y = svgHeight - (legendBounds.height + legendBorder) - elementSpacing * 2;\n            break;\n        }\n      } else {\n        switch (alignment) {\n          case 'Center':\n            legendBounds.x = svgWidth / 2 - (legendBounds.width + legendBorder * 2) / 2 + elementSpacing / 2;\n            break;\n          case 'Near':\n            legendBounds.x = borderSize + elementSpacing * 2;\n            break;\n          case 'Far':\n            legendBounds.x = svgWidth - (legendBounds.width + legendBorder) - elementSpacing * 2;\n            break;\n        }\n      }\n    } else {\n      legendBounds.y = legend.location.y < svgHeight ? legend.location.y : 0;\n      legendBounds.x = legend.location.x < svgWidth ? legend.location.x : 0;\n    }\n    if (legendPosition === 'bottom' || legendPosition === 'top') {\n      for (var i = 0; i < this.legendSeries.length; i++) {\n        legendWidth += this.legendSeries[i].bounds.width + itemPadding;\n        if (legendWidth > svgWidth) {\n          legendBounds.x = svgWidth / 2 - (legendBounds.width + legendBorder * 2) / 2 + elementSpacing / 2;\n          break;\n        }\n      }\n    }\n    var gLegendEle = smithchart.renderer.createGroup({\n      'id': smithchart.element.id + '_legend_group'\n    });\n    smithchart.svgObject.appendChild(gLegendEle);\n    this.legendItemGroup = smithchart.renderer.createGroup({\n      'id': smithchart.element.id + 'legendItem_Group'\n    });\n    var currentX = startX = elementSpacing;\n    var currentY = startY = elementSpacing;\n    if (legend.title.text !== '' && legend.title.visible) {\n      gLegendEle.appendChild(this.drawLegendTitle(smithchart, legend, legendBounds, gLegendEle));\n      currentY = startY = elementSpacing + legendTitleHeight;\n    }\n    for (var k = 0; k < this.legendSeries.length; k++) {\n      if ((legend.rowCount < legend.columnCount || legend.rowCount === legend.columnCount) && (legendPosition === 'top' || legendPosition === 'bottom' || legendPosition === 'custom')) {\n        if (currentX + this.legendSeries[k]['bounds'].width > legendBounds.width + startX) {\n          currentX = elementSpacing;\n          currentY += this.legendSeries[k]['bounds'].height + itemPadding;\n        }\n        this.legendGroup = this.drawLegendItem(smithchart, legend, this.legendSeries[k], k, currentX, currentY);\n        gLegendEle.appendChild(this.legendGroup);\n        currentX += this.legendSeries[k]['bounds'].width + itemPadding;\n      } else {\n        if (currentY + this.legendSeries[k]['bounds'].height + itemPadding + legendTitleHeight + borderSize > legendBounds.height + startY) {\n          currentY = startY;\n          currentX += maxWidth + itemPadding;\n        }\n        this.legendGroup = this.drawLegendItem(smithchart, legend, this.legendSeries[k], k, currentX, currentY);\n        gLegendEle.appendChild(this.legendGroup);\n        currentY += this.legendSeries[k]['bounds'].height + itemPadding;\n        maxWidth = Math.max(maxWidth, this.legendSeries[k]['bounds'].width);\n      }\n    }\n    gLegendEle.setAttribute('transform', 'translate(' + legendBounds.x.toString() + ',' + legendBounds.y.toString() + ')');\n    this.drawLegendBorder(gLegendEle, smithchart, legend, legendBounds);\n  };\n  SmithchartLegend.prototype.drawLegendBorder = function (gLegendEle, smithchart, legend, legendBounds) {\n    var borderRect = new RectOption(smithchart.element.id + '_svg' + '_legendRect', 'none', legend.border, 1, new SmithchartRect(0, 0, legendBounds.width, legendBounds.height));\n    gLegendEle.appendChild(smithchart.renderer.drawRectangle(borderRect));\n  };\n  SmithchartLegend.prototype.drawLegendTitle = function (smithchart, legend, legendBounds, gLegendEle) {\n    var elementSpacing = smithchart.elementSpacing;\n    var titleSize = measureText(legend.title.text, legend.title.textStyle, smithchart.themeStyle.legendLabelFont);\n    var titleWidth = titleSize.width;\n    var titleHeight = titleSize.height;\n    var textAlignment = legend.title.textAlignment;\n    var startX = 0;\n    var legendBoundsWidth = legendBounds.width;\n    var startY = elementSpacing + titleHeight / 2;\n    switch (textAlignment) {\n      case 'Far':\n        startX = legendBoundsWidth - titleWidth - startX;\n        break;\n      case 'Center':\n        startX = legendBoundsWidth / 2 - titleWidth / 2;\n        break;\n    }\n    if (startX < 0) {\n      startX = 0;\n      legendBoundsWidth = titleWidth;\n    }\n    if (legendBoundsWidth < titleWidth + startX) {\n      legendBoundsWidth = titleWidth + startX;\n    }\n    var options = new TextOption(smithchart.element.id + '_LegendTitleText', startX, startY, 'start', legend.title.text);\n    var element = renderTextElement(options, legend.title.textStyle, legend.title.textStyle.color || smithchart.themeStyle.legendTitleFont.color, gLegendEle, smithchart.themeStyle.legendTitleFont);\n    element.setAttribute('aria-label', legend.title.description || legend.title.text);\n    return element;\n  };\n  SmithchartLegend.prototype.drawLegendItem = function (smithchart, legend, legendSeries, k, x, y) {\n    var _this = this;\n    var symbol = legend.itemStyle;\n    var textHeight = measureText(legendSeries['text'], legend.textStyle, smithchart.themeStyle.legendLabelFont).height;\n    var location = {\n      x: x + symbol['width'] / 2,\n      y: y + (textHeight > symbol['height'] ? textHeight : symbol['height']) / 2\n    };\n    var legendGroup = smithchart.renderer.createGroup({\n      id: smithchart.element.id + '_svg' + '_Legend' + k.toString()\n    });\n    legendGroup['style']['cursor'] = legend.toggleVisibility ? 'pointer' : 'default';\n    legendGroup.setAttribute('tabindex', k === 0 ? '0' : '');\n    var legendEventArgs = {\n      text: legendSeries['text'],\n      fill: legendSeries['fill'],\n      shape: legendSeries['shape'],\n      name: legendRender,\n      cancel: false\n    };\n    var legendRenderSuccess = function (args) {\n      if (!args.cancel) {\n        var shape = _this.drawLegendShape(smithchart, legendSeries, location.x, location.y, k, legend, args);\n        legendGroup.appendChild(shape);\n        var options = new TextOption(smithchart.element.id + '_LegendItemText' + k.toString(), location.x + symbol['width'] / 2 + legend.shapePadding, location.y + textHeight / 4, 'start', args.text);\n        legend.textStyle.fontFamily = legend.textStyle.fontFamily || smithchart.themeStyle.legendLabelFont.fontFamily;\n        legend.textStyle.size = legend.textStyle.size || smithchart.themeStyle.legendLabelFont.size;\n        var element = renderTextElement(options, legend.textStyle, legend.textStyle.color || smithchart.themeStyle.legendLabelFont.color, legendGroup, smithchart.themeStyle.legendLabelFont);\n        legendGroup.setAttribute('aria-label', legend.description || 'Show ' + options.text);\n        legendGroup.setAttribute('role', 'button');\n        legendGroup.appendChild(element);\n        _this.legendItemGroup.appendChild(legendGroup);\n      }\n    };\n    legendRenderSuccess.bind(this);\n    smithchart.trigger(legendRender, legendEventArgs, legendRenderSuccess);\n    return this.legendItemGroup;\n  };\n  SmithchartLegend.prototype.drawLegendShape = function (smithchart, legendSeries, locX, locY, index, legend, legendEventArgs) {\n    var element;\n    var circleOptions;\n    var pathOptions;\n    var path;\n    var symbol = legend.itemStyle;\n    var width = symbol['width'];\n    var height = symbol['height'];\n    var x = locX + -width / 2;\n    var border = {\n      color: symbol.border.color,\n      width: symbol.border.width\n    };\n    var opacity = 1;\n    var fill = smithchart.series[index].visibility === 'visible' ? legendEventArgs.fill : 'grey';\n    var shape = legendEventArgs.shape.toLowerCase();\n    var radius = Math.sqrt(height * height + width * width) / 2;\n    switch (shape) {\n      case 'circle':\n        circleOptions = new CircleOption(smithchart.element.id + '_svg' + '_LegendItemShape' + index.toString(), fill, border, opacity, locX, locY, radius, null);\n        element = smithchart.renderer.drawCircle(circleOptions);\n        break;\n      case 'rectangle':\n        path = 'M' + ' ' + x + ' ' + (locY + -height / 2) + ' ' + 'L' + ' ' + (width / 2 + locX) + ' ' + (locY + -height / 2) + ' ' + 'L' + ' ' + (locX + width / 2) + ' ' + (locY + height / 2) + ' ' + 'L' + ' ' + x + ' ' + (locY + height / 2) + ' ' + 'L' + ' ' + x + ' ' + (locY + -height / 2) + ' z';\n        pathOptions = new PathOption(smithchart.element.id + '_svg' + '_LegendItemShape' + index.toString(), fill, border.width, border.color, 1, '', path);\n        element = smithchart.renderer.drawPath(pathOptions);\n        break;\n      case 'diamond':\n        path = 'M' + ' ' + x + ' ' + locY + ' ' + 'L' + ' ' + locX + ' ' + (locY + -height / 2) + ' ' + 'L' + ' ' + (width / 2 + locX) + ' ' + locY + ' ' + 'L' + ' ' + locX + ' ' + (locY + height / 2) + ' ' + 'L' + ' ' + x + ' ' + locY + ' z';\n        pathOptions = new PathOption(smithchart.element.id + '_svg' + '_LegendItemShape' + index.toString(), fill, border.width, border.color, 1, '', path);\n        element = smithchart.renderer.drawPath(pathOptions);\n        break;\n      case 'pentagon':\n        {\n          var eq = 72;\n          for (var j = 0; j <= 5; j++) {\n            var xValue = radius * Math.cos(Math.PI / 180 * (j * eq));\n            var yValue = radius * Math.sin(Math.PI / 180 * (j * eq));\n            if (j === 0) {\n              path = 'M' + ' ' + (xValue + locX) + ' ' + (locY + yValue) + ' ';\n            } else {\n              path = path.concat('L' + ' ' + (locX + xValue) + ' ' + (locY + yValue) + ' ');\n            }\n          }\n          path = path.concat('Z');\n          pathOptions = new PathOption(smithchart.element.id + '_svg' + '_LegendItemShape' + index.toString(), fill, border.width, border.color, 1, '', path);\n          element = smithchart.renderer.drawPath(pathOptions);\n          break;\n        }\n      case 'triangle':\n        path = 'M' + ' ' + x + ' ' + (height / 2 + locY) + ' ' + 'L' + ' ' + locX + ' ' + (locY + -height / 2) + ' ' + 'L' + ' ' + (locX + width / 2) + ' ' + (locY + height / 2) + ' ' + 'L' + ' ' + x + ' ' + (locY + height / 2) + ' Z';\n        pathOptions = new PathOption(smithchart.element.id + '_svg' + '_LegendItemShape' + index.toString(), fill, border.width, border.color, 1, '', path);\n        element = smithchart.renderer.drawPath(pathOptions);\n        break;\n    }\n    return element;\n  };\n  /**\n   * Get module name.\n   *\n   * @returns {string} - To get the module name.\n   */\n  SmithchartLegend.prototype.getModuleName = function () {\n    return 'SmithchartLegend';\n  };\n  /**\n   * To destroy the legend.\n   *\n   * @returns {void}\n   * @private\n   */\n  SmithchartLegend.prototype.destroy = function () {\n    /**\n     * Destroy method performed here\n     */\n  };\n  return SmithchartLegend;\n}();\nexport { SmithchartLegend };","map":{"version":3,"names":["measureText","TextOption","renderTextElement","CircleOption","PathOption","RectOption","SmithchartRect","legendRender","SmithchartLegend","legendSeries","prototype","renderLegend","smithchart","_drawLegend","calculateLegendBounds","padding","legend","legendSettings","legendSizeHeight","height","legendSizeWidth","width","itemPadding","position","toLowerCase","font","title","textStyle","legendItemWidth","legendItemHeight","legendHeight","svgObjectWidth","availableSize","elementSpacing","border","rowCount","columnCount","titleSize","themeStyle","legendTitleFont","maxRowWidth","totalRowHeight","curRowWidth","curRowHeight","allowItems","itemsCountRow","length","series","legendBounds","visible","Math","ceil","i","push","text","seriesIndex","shape","fill","seriesColors","bounds","legendsize","_getLegendSize","max","x","y","legendActualBounds","symbolWidth","itemStyle","symbolHeight","textSize","legendLabelFont","shapePadding","legendPosition","alignment","maxWidth","startX","startY","titleFont","smithchartTitleHeight","smithchartSubtitleHeight","subtitle","offset","margin","top","svgObjectHeight","legendBorder","legendWidth","legendTitleHeight","borderSize","svgWidth","svgHeight","location","gLegendEle","renderer","createGroup","element","id","svgObject","appendChild","legendItemGroup","currentX","currentY","drawLegendTitle","k","legendGroup","drawLegendItem","setAttribute","toString","drawLegendBorder","borderRect","drawRectangle","titleWidth","titleHeight","textAlignment","legendBoundsWidth","options","color","description","_this","symbol","textHeight","toggleVisibility","legendEventArgs","name","cancel","legendRenderSuccess","args","drawLegendShape","fontFamily","size","bind","trigger","locX","locY","index","circleOptions","pathOptions","path","opacity","visibility","radius","sqrt","drawCircle","drawPath","eq","j","xValue","cos","PI","yValue","sin","concat","getModuleName","destroy"],"sources":["C:/Users/mkfun/Desktop/ct assignment/admin/node_modules/@syncfusion/ej2-charts/src/smithchart/legend/legendrender.js"],"sourcesContent":["import { measureText, TextOption, renderTextElement, CircleOption, PathOption, RectOption } from '../../smithchart/utils/helper';\nimport { SmithchartRect } from '../../smithchart/utils/utils';\nimport { legendRender } from '../model/constant';\nvar SmithchartLegend = /** @class */ (function () {\n    function SmithchartLegend() {\n        this.legendSeries = [];\n    }\n    SmithchartLegend.prototype.renderLegend = function (smithchart) {\n        this._drawLegend(smithchart);\n    };\n    SmithchartLegend.prototype.calculateLegendBounds = function (smithchart) {\n        this.legendSeries = [];\n        var padding = 10;\n        var legend = smithchart.legendSettings;\n        var legendSizeHeight = legend.height;\n        var legendSizeWidth = legend.width;\n        var itemPadding = legend.itemPadding > 0 ? legend.itemPadding : 0;\n        var position = legend.position.toLowerCase();\n        var font = legend.title.textStyle;\n        var width = 0;\n        var height = 0;\n        var legendItemWidth = 0;\n        var legendItemHeight = 0;\n        var legendHeight = 0;\n        var svgObjectWidth = smithchart.availableSize.width - ((smithchart.elementSpacing * 4) - (legend.border.width * 2)\n            + (smithchart.border.width * 2));\n        var rowCount = legend.rowCount;\n        var columnCount = legend.columnCount;\n        var titleSize = measureText(smithchart.legendSettings['title']['text'], font, smithchart.themeStyle.legendTitleFont);\n        var maxRowWidth = 0;\n        var totalRowHeight = 0;\n        var curRowWidth = 0;\n        var curRowHeight = 0;\n        var allowItems;\n        var itemsCountRow = 0;\n        var length = smithchart.series.length;\n        var legendBounds;\n        if (smithchart.legendSettings.visible && length !== 0) {\n            if (position === 'bottom' || position === 'top' || position === 'custom') {\n                if ((rowCount && columnCount) && (rowCount <= columnCount)) {\n                    rowCount = length / columnCount;\n                }\n                else if (rowCount == null && columnCount != null) {\n                    rowCount = length / columnCount;\n                }\n                else if (rowCount == null && columnCount == null) {\n                    rowCount = 1;\n                }\n                if (rowCount) {\n                    allowItems = Math.ceil(length / rowCount);\n                }\n            }\n            else {\n                if ((rowCount && columnCount) && (rowCount <= columnCount)) {\n                    columnCount = length / rowCount;\n                }\n                else if (rowCount != null && columnCount == null) {\n                    columnCount = length / rowCount;\n                }\n                else if (rowCount == null && columnCount == null) {\n                    columnCount = 1;\n                }\n                if (columnCount) {\n                    allowItems = columnCount;\n                }\n            }\n            for (var i = 0; i < length; i++) {\n                this.legendSeries.push({\n                    text: smithchart.series[i]['name'] ? smithchart.series[i]['name'] : 'series' + i,\n                    seriesIndex: i,\n                    shape: smithchart.legendSettings.shape,\n                    fill: smithchart.series[i].fill || smithchart.seriesColors[i % smithchart.seriesColors.length],\n                    bounds: null\n                });\n                var legendsize = this._getLegendSize(smithchart, this.legendSeries[i]);\n                legendItemWidth = Math.max(legendsize['width'], legendItemWidth);\n                legendItemHeight = Math.max(legendsize['height'], legendItemHeight);\n                this.legendSeries[i]['bounds'] = { width: legendItemWidth, height: legendItemHeight };\n                itemsCountRow = itemsCountRow + 1;\n                curRowWidth = curRowWidth + legendItemWidth + itemPadding;\n                curRowHeight = Math.max(legendItemHeight, curRowHeight);\n                if (position === 'top' || position === 'bottom' || position === 'custom') {\n                    if (curRowWidth > svgObjectWidth) {\n                        curRowWidth -= legendsize.width + itemPadding;\n                        maxRowWidth = Math.max(maxRowWidth, curRowWidth);\n                        curRowWidth = legendsize.width + itemPadding;\n                        totalRowHeight = totalRowHeight + curRowHeight + itemPadding;\n                    }\n                }\n                if (itemsCountRow === allowItems || i === length - 1) {\n                    maxRowWidth = Math.max(maxRowWidth, curRowWidth);\n                    totalRowHeight = totalRowHeight + curRowHeight + itemPadding;\n                    legendHeight = totalRowHeight;\n                    itemsCountRow = 0;\n                    curRowHeight = 0;\n                    curRowWidth = 0;\n                }\n            }\n            width = (titleSize.width) > maxRowWidth - itemPadding ? (titleSize.width + padding * 2 + itemPadding) :\n                maxRowWidth + padding * 2 - (smithchart.border.width * 2);\n            height = legendHeight + smithchart.elementSpacing;\n            legendBounds = { x: 0, y: 0, width: width, height: height };\n        }\n        this.legendActualBounds = legendBounds;\n        if (legendSizeWidth != null) {\n            this.legendActualBounds.width = legendSizeWidth;\n        }\n        if (legendSizeHeight != null) {\n            this.legendActualBounds.height = legendSizeHeight;\n        }\n        return this.legendActualBounds;\n    };\n    SmithchartLegend.prototype._getLegendSize = function (smithchart, series) {\n        var legend = smithchart.legendSettings;\n        var symbolWidth = legend.itemStyle.width;\n        var symbolHeight = legend.itemStyle.height;\n        var textSize = measureText(series.text, legend.textStyle, smithchart.themeStyle.legendLabelFont);\n        var width = symbolWidth + textSize.width + legend.shapePadding;\n        var height = Math.max(symbolHeight, textSize.height);\n        return { width: width, height: height };\n    };\n    SmithchartLegend.prototype._drawLegend = function (smithchart) {\n        var legend = smithchart.legendSettings;\n        var legendPosition = legend.position.toLowerCase();\n        var alignment = legend.alignment;\n        var legendBounds = this.legendActualBounds;\n        var maxWidth = 0;\n        var startX;\n        var startY;\n        var titleFont = smithchart.title.font ? smithchart.title.font : smithchart.title.textStyle;\n        var smithchartTitleHeight = measureText(smithchart.title.text, titleFont, smithchart.themeStyle.legendLabelFont).height;\n        var smithchartSubtitleHeight = measureText(smithchart.title.subtitle.text, smithchart.title.subtitle.textStyle, smithchart.themeStyle.legendLabelFont).height;\n        var elementSpacing = smithchart.elementSpacing;\n        var offset = smithchartTitleHeight + smithchartSubtitleHeight + elementSpacing + smithchart.margin.top;\n        var itemPadding = legend.itemPadding > 0 ? legend.itemPadding : 0;\n        var svgObjectWidth = smithchart.availableSize.width;\n        var svgObjectHeight = smithchart.availableSize.height;\n        var legendBorder = legend.border.width;\n        var legendWidth = 0;\n        var titleSize = measureText(legend['title']['text'], legend.title.textStyle, smithchart.themeStyle.legendLabelFont);\n        var legendTitleHeight = titleSize.height;\n        var borderSize = smithchart.border.width;\n        var svgWidth = svgObjectWidth - ((borderSize * 2));\n        var svgHeight = svgObjectHeight - ((borderSize * 2));\n        legendBounds.height += legendTitleHeight;\n        if (legendPosition !== 'custom') {\n            switch (legendPosition) {\n                case 'bottom':\n                    legendBounds.y = svgHeight - (legendBounds.height + (legendBorder) + elementSpacing);\n                    break;\n                case 'top':\n                    legendBounds.y = borderSize + offset;\n                    break;\n                case 'right':\n                    legendBounds.x = svgWidth - legendBounds.width - (elementSpacing * 2);\n                    break;\n                case 'left':\n                    legendBounds.x = borderSize + (elementSpacing * 2);\n                    break;\n            }\n            if (legendPosition === 'left' || legendPosition === 'right') {\n                switch (alignment) {\n                    case 'Center':\n                        legendBounds.y = (svgHeight / 2) - ((legendBounds.height + legendBorder * 2) / 2) + (elementSpacing / 2);\n                        break;\n                    case 'Near':\n                        legendBounds.y = borderSize + (elementSpacing * 2) + offset;\n                        break;\n                    case 'Far':\n                        legendBounds.y = svgHeight - (legendBounds.height + (legendBorder)) - (elementSpacing * 2);\n                        break;\n                }\n            }\n            else {\n                switch (alignment) {\n                    case 'Center':\n                        legendBounds.x = (svgWidth / 2) - ((legendBounds.width + legendBorder * 2) / 2) + (elementSpacing / 2);\n                        break;\n                    case 'Near':\n                        legendBounds.x = borderSize + (elementSpacing * 2);\n                        break;\n                    case 'Far':\n                        legendBounds.x = svgWidth - (legendBounds.width + (legendBorder)) - (elementSpacing * 2);\n                        break;\n                }\n            }\n        }\n        else {\n            legendBounds.y = (legend.location.y < svgHeight) ? legend.location.y : 0;\n            legendBounds.x = (legend.location.x < svgWidth) ? legend.location.x : 0;\n        }\n        if (legendPosition === 'bottom' || legendPosition === 'top') {\n            for (var i = 0; i < this.legendSeries.length; i++) {\n                legendWidth += this.legendSeries[i].bounds.width + itemPadding;\n                if (legendWidth > svgWidth) {\n                    legendBounds.x = (svgWidth / 2) - ((legendBounds.width + legendBorder * 2) / 2) + (elementSpacing / 2);\n                    break;\n                }\n            }\n        }\n        var gLegendEle = smithchart.renderer.createGroup({ 'id': smithchart.element.id + '_legend_group' });\n        smithchart.svgObject.appendChild(gLegendEle);\n        this.legendItemGroup = smithchart.renderer.createGroup({ 'id': smithchart.element.id + 'legendItem_Group' });\n        var currentX = startX = elementSpacing;\n        var currentY = startY = elementSpacing;\n        if (legend.title.text !== '' && legend.title.visible) {\n            gLegendEle.appendChild(this.drawLegendTitle(smithchart, legend, legendBounds, gLegendEle));\n            currentY = startY = elementSpacing + legendTitleHeight;\n        }\n        for (var k = 0; k < this.legendSeries.length; k++) {\n            if ((legend.rowCount < legend.columnCount || legend.rowCount === legend.columnCount) &&\n                (legendPosition === 'top' || legendPosition === 'bottom' || legendPosition === 'custom')) {\n                if ((currentX + this.legendSeries[k]['bounds'].width) > legendBounds.width + startX) {\n                    currentX = elementSpacing;\n                    currentY += this.legendSeries[k]['bounds'].height + itemPadding;\n                }\n                this.legendGroup = this.drawLegendItem(smithchart, legend, this.legendSeries[k], k, currentX, (currentY));\n                gLegendEle.appendChild(this.legendGroup);\n                currentX += this.legendSeries[k]['bounds'].width + itemPadding;\n            }\n            else {\n                if (((currentY + this.legendSeries[k]['bounds'].height + itemPadding) +\n                    legendTitleHeight + borderSize > legendBounds.height + startY)) {\n                    currentY = startY;\n                    currentX += maxWidth + (itemPadding);\n                }\n                this.legendGroup = this.drawLegendItem(smithchart, legend, this.legendSeries[k], k, (currentX), (currentY));\n                gLegendEle.appendChild(this.legendGroup);\n                currentY += this.legendSeries[k]['bounds'].height + itemPadding;\n                maxWidth = Math.max(maxWidth, this.legendSeries[k]['bounds'].width);\n            }\n        }\n        gLegendEle.setAttribute('transform', 'translate(' + legendBounds.x.toString() + ',' + legendBounds.y.toString() + ')');\n        this.drawLegendBorder(gLegendEle, smithchart, legend, legendBounds);\n    };\n    SmithchartLegend.prototype.drawLegendBorder = function (gLegendEle, smithchart, legend, legendBounds) {\n        var borderRect = new RectOption(smithchart.element.id + '_svg' + '_legendRect', 'none', legend.border, 1, new SmithchartRect(0, 0, legendBounds.width, legendBounds.height));\n        gLegendEle.appendChild(smithchart.renderer.drawRectangle(borderRect));\n    };\n    SmithchartLegend.prototype.drawLegendTitle = function (smithchart, legend, legendBounds, gLegendEle) {\n        var elementSpacing = smithchart.elementSpacing;\n        var titleSize = measureText(legend.title.text, legend.title.textStyle, smithchart.themeStyle.legendLabelFont);\n        var titleWidth = titleSize.width;\n        var titleHeight = titleSize.height;\n        var textAlignment = legend.title.textAlignment;\n        var startX = 0;\n        var legendBoundsWidth = legendBounds.width;\n        var startY = elementSpacing + (titleHeight / 2);\n        switch (textAlignment) {\n            case 'Far':\n                startX = legendBoundsWidth - titleWidth - startX;\n                break;\n            case 'Center':\n                startX = legendBoundsWidth / 2 - (titleWidth) / 2;\n                break;\n        }\n        if (startX < 0) {\n            startX = 0;\n            legendBoundsWidth = titleWidth;\n        }\n        if (legendBoundsWidth < titleWidth + startX) {\n            legendBoundsWidth = titleWidth + startX;\n        }\n        var options = new TextOption(smithchart.element.id + '_LegendTitleText', startX, startY, 'start', legend.title.text);\n        var element = renderTextElement(options, legend.title.textStyle, legend.title.textStyle.color ||\n            smithchart.themeStyle.legendTitleFont.color, gLegendEle, smithchart.themeStyle.legendTitleFont);\n        element.setAttribute('aria-label', legend.title.description || legend.title.text);\n        return element;\n    };\n    SmithchartLegend.prototype.drawLegendItem = function (smithchart, legend, legendSeries, k, x, y) {\n        var _this = this;\n        var symbol = legend.itemStyle;\n        var textHeight = measureText(legendSeries['text'], legend.textStyle, smithchart.themeStyle.legendLabelFont).height;\n        var location = {\n            x: x + symbol['width'] / 2,\n            y: (y + (textHeight > symbol['height'] ? textHeight : symbol['height']) / 2)\n        };\n        var legendGroup = smithchart.renderer.createGroup({ id: smithchart.element.id + '_svg' + '_Legend' + k.toString() });\n        legendGroup['style']['cursor'] = legend.toggleVisibility ? 'pointer' : 'default';\n        legendGroup.setAttribute('tabindex', k === 0 ? '0' : '');\n        var legendEventArgs = {\n            text: legendSeries['text'],\n            fill: legendSeries['fill'],\n            shape: legendSeries['shape'],\n            name: legendRender,\n            cancel: false\n        };\n        var legendRenderSuccess = function (args) {\n            if (!args.cancel) {\n                var shape = _this.drawLegendShape(smithchart, legendSeries, location.x, location.y, k, legend, args);\n                legendGroup.appendChild(shape);\n                var options = new TextOption(smithchart.element.id + '_LegendItemText' + k.toString(), location.x + symbol['width'] / 2 + legend.shapePadding, location.y + textHeight / 4, 'start', args.text);\n                legend.textStyle.fontFamily = legend.textStyle.fontFamily || smithchart.themeStyle.legendLabelFont.fontFamily;\n                legend.textStyle.size = legend.textStyle.size || smithchart.themeStyle.legendLabelFont.size;\n                var element = renderTextElement(options, legend.textStyle, legend.textStyle.color ||\n                    smithchart.themeStyle.legendLabelFont.color, legendGroup, smithchart.themeStyle.legendLabelFont);\n                legendGroup.setAttribute('aria-label', legend.description || ('Show ' + options.text));\n                legendGroup.setAttribute('role', 'button');\n                legendGroup.appendChild(element);\n                _this.legendItemGroup.appendChild(legendGroup);\n            }\n        };\n        legendRenderSuccess.bind(this);\n        smithchart.trigger(legendRender, legendEventArgs, legendRenderSuccess);\n        return this.legendItemGroup;\n    };\n    SmithchartLegend.prototype.drawLegendShape = function (smithchart, legendSeries, locX, locY, index, legend, legendEventArgs) {\n        var element;\n        var circleOptions;\n        var pathOptions;\n        var path;\n        var symbol = legend.itemStyle;\n        var width = symbol['width'];\n        var height = symbol['height'];\n        var x = locX + (-width / 2);\n        var border = { color: symbol.border.color, width: symbol.border.width };\n        var opacity = 1;\n        var fill = (smithchart.series[index].visibility === 'visible') ? legendEventArgs.fill : 'grey';\n        var shape = legendEventArgs.shape.toLowerCase();\n        var radius = Math.sqrt(height * height + width * width) / 2;\n        switch (shape) {\n            case 'circle':\n                circleOptions = new CircleOption(smithchart.element.id + '_svg' + '_LegendItemShape' + index.toString(), fill, border, opacity, locX, locY, radius, null);\n                element = smithchart.renderer.drawCircle(circleOptions);\n                break;\n            case 'rectangle':\n                path = 'M' + ' ' + x + ' ' + (locY + (-height / 2)) + ' ' +\n                    'L' + ' ' + ((width / 2) + locX) + ' ' + (locY + (-height / 2)) + ' ' +\n                    'L' + ' ' + (locX + (width / 2)) + ' ' + (locY + (height / 2)) + ' ' +\n                    'L' + ' ' + x + ' ' + (locY + (height / 2)) + ' ' +\n                    'L' + ' ' + x + ' ' + (locY + (-height / 2)) + ' z';\n                pathOptions = new PathOption(smithchart.element.id + '_svg' + '_LegendItemShape' + index.toString(), fill, border.width, border.color, 1, '', path);\n                element = smithchart.renderer.drawPath(pathOptions);\n                break;\n            case 'diamond':\n                path = 'M' + ' ' + x + ' ' + locY + ' ' +\n                    'L' + ' ' + locX + ' ' + (locY + (-height / 2)) + ' ' +\n                    'L' + ' ' + ((width / 2) + locX) + ' ' + locY + ' ' +\n                    'L' + ' ' + locX + ' ' + (locY + (height / 2)) + ' ' +\n                    'L' + ' ' + x + ' ' + locY + ' z';\n                pathOptions = new PathOption(smithchart.element.id + '_svg' + '_LegendItemShape' + index.toString(), fill, border.width, border.color, 1, '', path);\n                element = smithchart.renderer.drawPath(pathOptions);\n                break;\n            case 'pentagon': {\n                var eq = 72;\n                for (var j = 0; j <= 5; j++) {\n                    var xValue = radius * Math.cos((Math.PI / 180) * (j * eq));\n                    var yValue = radius * Math.sin((Math.PI / 180) * (j * eq));\n                    if (j === 0) {\n                        path = 'M' + ' ' + (xValue + locX) + ' ' + (locY + yValue) + ' ';\n                    }\n                    else {\n                        path = path.concat('L' + ' ' + (locX + xValue) + ' ' + (locY + yValue) + ' ');\n                    }\n                }\n                path = path.concat('Z');\n                pathOptions = new PathOption(smithchart.element.id + '_svg' + '_LegendItemShape' + index.toString(), fill, border.width, border.color, 1, '', path);\n                element = smithchart.renderer.drawPath(pathOptions);\n                break;\n            }\n            case 'triangle':\n                path = 'M' + ' ' + x + ' ' + ((height / 2) + locY) + ' ' +\n                    'L' + ' ' + locX + ' ' + (locY + (-height / 2)) + ' ' +\n                    'L' + ' ' + (locX + (width / 2)) + ' ' + (locY + (height / 2)) + ' ' +\n                    'L' + ' ' + x + ' ' + (locY + (height / 2)) + ' Z';\n                pathOptions = new PathOption(smithchart.element.id + '_svg' + '_LegendItemShape' + index.toString(), fill, border.width, border.color, 1, '', path);\n                element = smithchart.renderer.drawPath(pathOptions);\n                break;\n        }\n        return element;\n    };\n    /**\n     * Get module name.\n     *\n     * @returns {string} - To get the module name.\n     */\n    SmithchartLegend.prototype.getModuleName = function () {\n        return 'SmithchartLegend';\n    };\n    /**\n     * To destroy the legend.\n     *\n     * @returns {void}\n     * @private\n     */\n    SmithchartLegend.prototype.destroy = function () {\n        /**\n         * Destroy method performed here\n         */\n    };\n    return SmithchartLegend;\n}());\nexport { SmithchartLegend };\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,UAAU,EAAEC,iBAAiB,EAAEC,YAAY,EAAEC,UAAU,EAAEC,UAAU,QAAQ,+BAA+B;AAChI,SAASC,cAAc,QAAQ,8BAA8B;AAC7D,SAASC,YAAY,QAAQ,mBAAmB;AAChD,IAAIC,gBAAgB,GAAG,aAAe,YAAY;EAC9C,SAASA,gBAAgBA,CAAA,EAAG;IACxB,IAAI,CAACC,YAAY,GAAG,EAAE;EAC1B;EACAD,gBAAgB,CAACE,SAAS,CAACC,YAAY,GAAG,UAAUC,UAAU,EAAE;IAC5D,IAAI,CAACC,WAAW,CAACD,UAAU,CAAC;EAChC,CAAC;EACDJ,gBAAgB,CAACE,SAAS,CAACI,qBAAqB,GAAG,UAAUF,UAAU,EAAE;IACrE,IAAI,CAACH,YAAY,GAAG,EAAE;IACtB,IAAIM,OAAO,GAAG,EAAE;IAChB,IAAIC,MAAM,GAAGJ,UAAU,CAACK,cAAc;IACtC,IAAIC,gBAAgB,GAAGF,MAAM,CAACG,MAAM;IACpC,IAAIC,eAAe,GAAGJ,MAAM,CAACK,KAAK;IAClC,IAAIC,WAAW,GAAGN,MAAM,CAACM,WAAW,GAAG,CAAC,GAAGN,MAAM,CAACM,WAAW,GAAG,CAAC;IACjE,IAAIC,QAAQ,GAAGP,MAAM,CAACO,QAAQ,CAACC,WAAW,CAAC,CAAC;IAC5C,IAAIC,IAAI,GAAGT,MAAM,CAACU,KAAK,CAACC,SAAS;IACjC,IAAIN,KAAK,GAAG,CAAC;IACb,IAAIF,MAAM,GAAG,CAAC;IACd,IAAIS,eAAe,GAAG,CAAC;IACvB,IAAIC,gBAAgB,GAAG,CAAC;IACxB,IAAIC,YAAY,GAAG,CAAC;IACpB,IAAIC,cAAc,GAAGnB,UAAU,CAACoB,aAAa,CAACX,KAAK,IAAKT,UAAU,CAACqB,cAAc,GAAG,CAAC,GAAKjB,MAAM,CAACkB,MAAM,CAACb,KAAK,GAAG,CAAE,GAC3GT,UAAU,CAACsB,MAAM,CAACb,KAAK,GAAG,CAAE,CAAC;IACpC,IAAIc,QAAQ,GAAGnB,MAAM,CAACmB,QAAQ;IAC9B,IAAIC,WAAW,GAAGpB,MAAM,CAACoB,WAAW;IACpC,IAAIC,SAAS,GAAGrC,WAAW,CAACY,UAAU,CAACK,cAAc,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,EAAEQ,IAAI,EAAEb,UAAU,CAAC0B,UAAU,CAACC,eAAe,CAAC;IACpH,IAAIC,WAAW,GAAG,CAAC;IACnB,IAAIC,cAAc,GAAG,CAAC;IACtB,IAAIC,WAAW,GAAG,CAAC;IACnB,IAAIC,YAAY,GAAG,CAAC;IACpB,IAAIC,UAAU;IACd,IAAIC,aAAa,GAAG,CAAC;IACrB,IAAIC,MAAM,GAAGlC,UAAU,CAACmC,MAAM,CAACD,MAAM;IACrC,IAAIE,YAAY;IAChB,IAAIpC,UAAU,CAACK,cAAc,CAACgC,OAAO,IAAIH,MAAM,KAAK,CAAC,EAAE;MACnD,IAAIvB,QAAQ,KAAK,QAAQ,IAAIA,QAAQ,KAAK,KAAK,IAAIA,QAAQ,KAAK,QAAQ,EAAE;QACtE,IAAKY,QAAQ,IAAIC,WAAW,IAAMD,QAAQ,IAAIC,WAAY,EAAE;UACxDD,QAAQ,GAAGW,MAAM,GAAGV,WAAW;QACnC,CAAC,MACI,IAAID,QAAQ,IAAI,IAAI,IAAIC,WAAW,IAAI,IAAI,EAAE;UAC9CD,QAAQ,GAAGW,MAAM,GAAGV,WAAW;QACnC,CAAC,MACI,IAAID,QAAQ,IAAI,IAAI,IAAIC,WAAW,IAAI,IAAI,EAAE;UAC9CD,QAAQ,GAAG,CAAC;QAChB;QACA,IAAIA,QAAQ,EAAE;UACVS,UAAU,GAAGM,IAAI,CAACC,IAAI,CAACL,MAAM,GAAGX,QAAQ,CAAC;QAC7C;MACJ,CAAC,MACI;QACD,IAAKA,QAAQ,IAAIC,WAAW,IAAMD,QAAQ,IAAIC,WAAY,EAAE;UACxDA,WAAW,GAAGU,MAAM,GAAGX,QAAQ;QACnC,CAAC,MACI,IAAIA,QAAQ,IAAI,IAAI,IAAIC,WAAW,IAAI,IAAI,EAAE;UAC9CA,WAAW,GAAGU,MAAM,GAAGX,QAAQ;QACnC,CAAC,MACI,IAAIA,QAAQ,IAAI,IAAI,IAAIC,WAAW,IAAI,IAAI,EAAE;UAC9CA,WAAW,GAAG,CAAC;QACnB;QACA,IAAIA,WAAW,EAAE;UACbQ,UAAU,GAAGR,WAAW;QAC5B;MACJ;MACA,KAAK,IAAIgB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,MAAM,EAAEM,CAAC,EAAE,EAAE;QAC7B,IAAI,CAAC3C,YAAY,CAAC4C,IAAI,CAAC;UACnBC,IAAI,EAAE1C,UAAU,CAACmC,MAAM,CAACK,CAAC,CAAC,CAAC,MAAM,CAAC,GAAGxC,UAAU,CAACmC,MAAM,CAACK,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,QAAQ,GAAGA,CAAC;UAChFG,WAAW,EAAEH,CAAC;UACdI,KAAK,EAAE5C,UAAU,CAACK,cAAc,CAACuC,KAAK;UACtCC,IAAI,EAAE7C,UAAU,CAACmC,MAAM,CAACK,CAAC,CAAC,CAACK,IAAI,IAAI7C,UAAU,CAAC8C,YAAY,CAACN,CAAC,GAAGxC,UAAU,CAAC8C,YAAY,CAACZ,MAAM,CAAC;UAC9Fa,MAAM,EAAE;QACZ,CAAC,CAAC;QACF,IAAIC,UAAU,GAAG,IAAI,CAACC,cAAc,CAACjD,UAAU,EAAE,IAAI,CAACH,YAAY,CAAC2C,CAAC,CAAC,CAAC;QACtExB,eAAe,GAAGsB,IAAI,CAACY,GAAG,CAACF,UAAU,CAAC,OAAO,CAAC,EAAEhC,eAAe,CAAC;QAChEC,gBAAgB,GAAGqB,IAAI,CAACY,GAAG,CAACF,UAAU,CAAC,QAAQ,CAAC,EAAE/B,gBAAgB,CAAC;QACnE,IAAI,CAACpB,YAAY,CAAC2C,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG;UAAE/B,KAAK,EAAEO,eAAe;UAAET,MAAM,EAAEU;QAAiB,CAAC;QACrFgB,aAAa,GAAGA,aAAa,GAAG,CAAC;QACjCH,WAAW,GAAGA,WAAW,GAAGd,eAAe,GAAGN,WAAW;QACzDqB,YAAY,GAAGO,IAAI,CAACY,GAAG,CAACjC,gBAAgB,EAAEc,YAAY,CAAC;QACvD,IAAIpB,QAAQ,KAAK,KAAK,IAAIA,QAAQ,KAAK,QAAQ,IAAIA,QAAQ,KAAK,QAAQ,EAAE;UACtE,IAAImB,WAAW,GAAGX,cAAc,EAAE;YAC9BW,WAAW,IAAIkB,UAAU,CAACvC,KAAK,GAAGC,WAAW;YAC7CkB,WAAW,GAAGU,IAAI,CAACY,GAAG,CAACtB,WAAW,EAAEE,WAAW,CAAC;YAChDA,WAAW,GAAGkB,UAAU,CAACvC,KAAK,GAAGC,WAAW;YAC5CmB,cAAc,GAAGA,cAAc,GAAGE,YAAY,GAAGrB,WAAW;UAChE;QACJ;QACA,IAAIuB,aAAa,KAAKD,UAAU,IAAIQ,CAAC,KAAKN,MAAM,GAAG,CAAC,EAAE;UAClDN,WAAW,GAAGU,IAAI,CAACY,GAAG,CAACtB,WAAW,EAAEE,WAAW,CAAC;UAChDD,cAAc,GAAGA,cAAc,GAAGE,YAAY,GAAGrB,WAAW;UAC5DQ,YAAY,GAAGW,cAAc;UAC7BI,aAAa,GAAG,CAAC;UACjBF,YAAY,GAAG,CAAC;UAChBD,WAAW,GAAG,CAAC;QACnB;MACJ;MACArB,KAAK,GAAIgB,SAAS,CAAChB,KAAK,GAAImB,WAAW,GAAGlB,WAAW,GAAIe,SAAS,CAAChB,KAAK,GAAGN,OAAO,GAAG,CAAC,GAAGO,WAAW,GAChGkB,WAAW,GAAGzB,OAAO,GAAG,CAAC,GAAIH,UAAU,CAACsB,MAAM,CAACb,KAAK,GAAG,CAAE;MAC7DF,MAAM,GAAGW,YAAY,GAAGlB,UAAU,CAACqB,cAAc;MACjDe,YAAY,GAAG;QAAEe,CAAC,EAAE,CAAC;QAAEC,CAAC,EAAE,CAAC;QAAE3C,KAAK,EAAEA,KAAK;QAAEF,MAAM,EAAEA;MAAO,CAAC;IAC/D;IACA,IAAI,CAAC8C,kBAAkB,GAAGjB,YAAY;IACtC,IAAI5B,eAAe,IAAI,IAAI,EAAE;MACzB,IAAI,CAAC6C,kBAAkB,CAAC5C,KAAK,GAAGD,eAAe;IACnD;IACA,IAAIF,gBAAgB,IAAI,IAAI,EAAE;MAC1B,IAAI,CAAC+C,kBAAkB,CAAC9C,MAAM,GAAGD,gBAAgB;IACrD;IACA,OAAO,IAAI,CAAC+C,kBAAkB;EAClC,CAAC;EACDzD,gBAAgB,CAACE,SAAS,CAACmD,cAAc,GAAG,UAAUjD,UAAU,EAAEmC,MAAM,EAAE;IACtE,IAAI/B,MAAM,GAAGJ,UAAU,CAACK,cAAc;IACtC,IAAIiD,WAAW,GAAGlD,MAAM,CAACmD,SAAS,CAAC9C,KAAK;IACxC,IAAI+C,YAAY,GAAGpD,MAAM,CAACmD,SAAS,CAAChD,MAAM;IAC1C,IAAIkD,QAAQ,GAAGrE,WAAW,CAAC+C,MAAM,CAACO,IAAI,EAAEtC,MAAM,CAACW,SAAS,EAAEf,UAAU,CAAC0B,UAAU,CAACgC,eAAe,CAAC;IAChG,IAAIjD,KAAK,GAAG6C,WAAW,GAAGG,QAAQ,CAAChD,KAAK,GAAGL,MAAM,CAACuD,YAAY;IAC9D,IAAIpD,MAAM,GAAG+B,IAAI,CAACY,GAAG,CAACM,YAAY,EAAEC,QAAQ,CAAClD,MAAM,CAAC;IACpD,OAAO;MAAEE,KAAK,EAAEA,KAAK;MAAEF,MAAM,EAAEA;IAAO,CAAC;EAC3C,CAAC;EACDX,gBAAgB,CAACE,SAAS,CAACG,WAAW,GAAG,UAAUD,UAAU,EAAE;IAC3D,IAAII,MAAM,GAAGJ,UAAU,CAACK,cAAc;IACtC,IAAIuD,cAAc,GAAGxD,MAAM,CAACO,QAAQ,CAACC,WAAW,CAAC,CAAC;IAClD,IAAIiD,SAAS,GAAGzD,MAAM,CAACyD,SAAS;IAChC,IAAIzB,YAAY,GAAG,IAAI,CAACiB,kBAAkB;IAC1C,IAAIS,QAAQ,GAAG,CAAC;IAChB,IAAIC,MAAM;IACV,IAAIC,MAAM;IACV,IAAIC,SAAS,GAAGjE,UAAU,CAACc,KAAK,CAACD,IAAI,GAAGb,UAAU,CAACc,KAAK,CAACD,IAAI,GAAGb,UAAU,CAACc,KAAK,CAACC,SAAS;IAC1F,IAAImD,qBAAqB,GAAG9E,WAAW,CAACY,UAAU,CAACc,KAAK,CAAC4B,IAAI,EAAEuB,SAAS,EAAEjE,UAAU,CAAC0B,UAAU,CAACgC,eAAe,CAAC,CAACnD,MAAM;IACvH,IAAI4D,wBAAwB,GAAG/E,WAAW,CAACY,UAAU,CAACc,KAAK,CAACsD,QAAQ,CAAC1B,IAAI,EAAE1C,UAAU,CAACc,KAAK,CAACsD,QAAQ,CAACrD,SAAS,EAAEf,UAAU,CAAC0B,UAAU,CAACgC,eAAe,CAAC,CAACnD,MAAM;IAC7J,IAAIc,cAAc,GAAGrB,UAAU,CAACqB,cAAc;IAC9C,IAAIgD,MAAM,GAAGH,qBAAqB,GAAGC,wBAAwB,GAAG9C,cAAc,GAAGrB,UAAU,CAACsE,MAAM,CAACC,GAAG;IACtG,IAAI7D,WAAW,GAAGN,MAAM,CAACM,WAAW,GAAG,CAAC,GAAGN,MAAM,CAACM,WAAW,GAAG,CAAC;IACjE,IAAIS,cAAc,GAAGnB,UAAU,CAACoB,aAAa,CAACX,KAAK;IACnD,IAAI+D,eAAe,GAAGxE,UAAU,CAACoB,aAAa,CAACb,MAAM;IACrD,IAAIkE,YAAY,GAAGrE,MAAM,CAACkB,MAAM,CAACb,KAAK;IACtC,IAAIiE,WAAW,GAAG,CAAC;IACnB,IAAIjD,SAAS,GAAGrC,WAAW,CAACgB,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,EAAEA,MAAM,CAACU,KAAK,CAACC,SAAS,EAAEf,UAAU,CAAC0B,UAAU,CAACgC,eAAe,CAAC;IACnH,IAAIiB,iBAAiB,GAAGlD,SAAS,CAAClB,MAAM;IACxC,IAAIqE,UAAU,GAAG5E,UAAU,CAACsB,MAAM,CAACb,KAAK;IACxC,IAAIoE,QAAQ,GAAG1D,cAAc,GAAKyD,UAAU,GAAG,CAAG;IAClD,IAAIE,SAAS,GAAGN,eAAe,GAAKI,UAAU,GAAG,CAAG;IACpDxC,YAAY,CAAC7B,MAAM,IAAIoE,iBAAiB;IACxC,IAAIf,cAAc,KAAK,QAAQ,EAAE;MAC7B,QAAQA,cAAc;QAClB,KAAK,QAAQ;UACTxB,YAAY,CAACgB,CAAC,GAAG0B,SAAS,IAAI1C,YAAY,CAAC7B,MAAM,GAAIkE,YAAa,GAAGpD,cAAc,CAAC;UACpF;QACJ,KAAK,KAAK;UACNe,YAAY,CAACgB,CAAC,GAAGwB,UAAU,GAAGP,MAAM;UACpC;QACJ,KAAK,OAAO;UACRjC,YAAY,CAACe,CAAC,GAAG0B,QAAQ,GAAGzC,YAAY,CAAC3B,KAAK,GAAIY,cAAc,GAAG,CAAE;UACrE;QACJ,KAAK,MAAM;UACPe,YAAY,CAACe,CAAC,GAAGyB,UAAU,GAAIvD,cAAc,GAAG,CAAE;UAClD;MACR;MACA,IAAIuC,cAAc,KAAK,MAAM,IAAIA,cAAc,KAAK,OAAO,EAAE;QACzD,QAAQC,SAAS;UACb,KAAK,QAAQ;YACTzB,YAAY,CAACgB,CAAC,GAAI0B,SAAS,GAAG,CAAC,GAAK,CAAC1C,YAAY,CAAC7B,MAAM,GAAGkE,YAAY,GAAG,CAAC,IAAI,CAAE,GAAIpD,cAAc,GAAG,CAAE;YACxG;UACJ,KAAK,MAAM;YACPe,YAAY,CAACgB,CAAC,GAAGwB,UAAU,GAAIvD,cAAc,GAAG,CAAE,GAAGgD,MAAM;YAC3D;UACJ,KAAK,KAAK;YACNjC,YAAY,CAACgB,CAAC,GAAG0B,SAAS,IAAI1C,YAAY,CAAC7B,MAAM,GAAIkE,YAAa,CAAC,GAAIpD,cAAc,GAAG,CAAE;YAC1F;QACR;MACJ,CAAC,MACI;QACD,QAAQwC,SAAS;UACb,KAAK,QAAQ;YACTzB,YAAY,CAACe,CAAC,GAAI0B,QAAQ,GAAG,CAAC,GAAK,CAACzC,YAAY,CAAC3B,KAAK,GAAGgE,YAAY,GAAG,CAAC,IAAI,CAAE,GAAIpD,cAAc,GAAG,CAAE;YACtG;UACJ,KAAK,MAAM;YACPe,YAAY,CAACe,CAAC,GAAGyB,UAAU,GAAIvD,cAAc,GAAG,CAAE;YAClD;UACJ,KAAK,KAAK;YACNe,YAAY,CAACe,CAAC,GAAG0B,QAAQ,IAAIzC,YAAY,CAAC3B,KAAK,GAAIgE,YAAa,CAAC,GAAIpD,cAAc,GAAG,CAAE;YACxF;QACR;MACJ;IACJ,CAAC,MACI;MACDe,YAAY,CAACgB,CAAC,GAAIhD,MAAM,CAAC2E,QAAQ,CAAC3B,CAAC,GAAG0B,SAAS,GAAI1E,MAAM,CAAC2E,QAAQ,CAAC3B,CAAC,GAAG,CAAC;MACxEhB,YAAY,CAACe,CAAC,GAAI/C,MAAM,CAAC2E,QAAQ,CAAC5B,CAAC,GAAG0B,QAAQ,GAAIzE,MAAM,CAAC2E,QAAQ,CAAC5B,CAAC,GAAG,CAAC;IAC3E;IACA,IAAIS,cAAc,KAAK,QAAQ,IAAIA,cAAc,KAAK,KAAK,EAAE;MACzD,KAAK,IAAIpB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC3C,YAAY,CAACqC,MAAM,EAAEM,CAAC,EAAE,EAAE;QAC/CkC,WAAW,IAAI,IAAI,CAAC7E,YAAY,CAAC2C,CAAC,CAAC,CAACO,MAAM,CAACtC,KAAK,GAAGC,WAAW;QAC9D,IAAIgE,WAAW,GAAGG,QAAQ,EAAE;UACxBzC,YAAY,CAACe,CAAC,GAAI0B,QAAQ,GAAG,CAAC,GAAK,CAACzC,YAAY,CAAC3B,KAAK,GAAGgE,YAAY,GAAG,CAAC,IAAI,CAAE,GAAIpD,cAAc,GAAG,CAAE;UACtG;QACJ;MACJ;IACJ;IACA,IAAI2D,UAAU,GAAGhF,UAAU,CAACiF,QAAQ,CAACC,WAAW,CAAC;MAAE,IAAI,EAAElF,UAAU,CAACmF,OAAO,CAACC,EAAE,GAAG;IAAgB,CAAC,CAAC;IACnGpF,UAAU,CAACqF,SAAS,CAACC,WAAW,CAACN,UAAU,CAAC;IAC5C,IAAI,CAACO,eAAe,GAAGvF,UAAU,CAACiF,QAAQ,CAACC,WAAW,CAAC;MAAE,IAAI,EAAElF,UAAU,CAACmF,OAAO,CAACC,EAAE,GAAG;IAAmB,CAAC,CAAC;IAC5G,IAAII,QAAQ,GAAGzB,MAAM,GAAG1C,cAAc;IACtC,IAAIoE,QAAQ,GAAGzB,MAAM,GAAG3C,cAAc;IACtC,IAAIjB,MAAM,CAACU,KAAK,CAAC4B,IAAI,KAAK,EAAE,IAAItC,MAAM,CAACU,KAAK,CAACuB,OAAO,EAAE;MAClD2C,UAAU,CAACM,WAAW,CAAC,IAAI,CAACI,eAAe,CAAC1F,UAAU,EAAEI,MAAM,EAAEgC,YAAY,EAAE4C,UAAU,CAAC,CAAC;MAC1FS,QAAQ,GAAGzB,MAAM,GAAG3C,cAAc,GAAGsD,iBAAiB;IAC1D;IACA,KAAK,IAAIgB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC9F,YAAY,CAACqC,MAAM,EAAEyD,CAAC,EAAE,EAAE;MAC/C,IAAI,CAACvF,MAAM,CAACmB,QAAQ,GAAGnB,MAAM,CAACoB,WAAW,IAAIpB,MAAM,CAACmB,QAAQ,KAAKnB,MAAM,CAACoB,WAAW,MAC9EoC,cAAc,KAAK,KAAK,IAAIA,cAAc,KAAK,QAAQ,IAAIA,cAAc,KAAK,QAAQ,CAAC,EAAE;QAC1F,IAAK4B,QAAQ,GAAG,IAAI,CAAC3F,YAAY,CAAC8F,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAClF,KAAK,GAAI2B,YAAY,CAAC3B,KAAK,GAAGsD,MAAM,EAAE;UACjFyB,QAAQ,GAAGnE,cAAc;UACzBoE,QAAQ,IAAI,IAAI,CAAC5F,YAAY,CAAC8F,CAAC,CAAC,CAAC,QAAQ,CAAC,CAACpF,MAAM,GAAGG,WAAW;QACnE;QACA,IAAI,CAACkF,WAAW,GAAG,IAAI,CAACC,cAAc,CAAC7F,UAAU,EAAEI,MAAM,EAAE,IAAI,CAACP,YAAY,CAAC8F,CAAC,CAAC,EAAEA,CAAC,EAAEH,QAAQ,EAAGC,QAAS,CAAC;QACzGT,UAAU,CAACM,WAAW,CAAC,IAAI,CAACM,WAAW,CAAC;QACxCJ,QAAQ,IAAI,IAAI,CAAC3F,YAAY,CAAC8F,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAClF,KAAK,GAAGC,WAAW;MAClE,CAAC,MACI;QACD,IAAM+E,QAAQ,GAAG,IAAI,CAAC5F,YAAY,CAAC8F,CAAC,CAAC,CAAC,QAAQ,CAAC,CAACpF,MAAM,GAAGG,WAAW,GAChEiE,iBAAiB,GAAGC,UAAU,GAAGxC,YAAY,CAAC7B,MAAM,GAAGyD,MAAM,EAAG;UAChEyB,QAAQ,GAAGzB,MAAM;UACjBwB,QAAQ,IAAI1B,QAAQ,GAAIpD,WAAY;QACxC;QACA,IAAI,CAACkF,WAAW,GAAG,IAAI,CAACC,cAAc,CAAC7F,UAAU,EAAEI,MAAM,EAAE,IAAI,CAACP,YAAY,CAAC8F,CAAC,CAAC,EAAEA,CAAC,EAAGH,QAAQ,EAAIC,QAAS,CAAC;QAC3GT,UAAU,CAACM,WAAW,CAAC,IAAI,CAACM,WAAW,CAAC;QACxCH,QAAQ,IAAI,IAAI,CAAC5F,YAAY,CAAC8F,CAAC,CAAC,CAAC,QAAQ,CAAC,CAACpF,MAAM,GAAGG,WAAW;QAC/DoD,QAAQ,GAAGxB,IAAI,CAACY,GAAG,CAACY,QAAQ,EAAE,IAAI,CAACjE,YAAY,CAAC8F,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAClF,KAAK,CAAC;MACvE;IACJ;IACAuE,UAAU,CAACc,YAAY,CAAC,WAAW,EAAE,YAAY,GAAG1D,YAAY,CAACe,CAAC,CAAC4C,QAAQ,CAAC,CAAC,GAAG,GAAG,GAAG3D,YAAY,CAACgB,CAAC,CAAC2C,QAAQ,CAAC,CAAC,GAAG,GAAG,CAAC;IACtH,IAAI,CAACC,gBAAgB,CAAChB,UAAU,EAAEhF,UAAU,EAAEI,MAAM,EAAEgC,YAAY,CAAC;EACvE,CAAC;EACDxC,gBAAgB,CAACE,SAAS,CAACkG,gBAAgB,GAAG,UAAUhB,UAAU,EAAEhF,UAAU,EAAEI,MAAM,EAAEgC,YAAY,EAAE;IAClG,IAAI6D,UAAU,GAAG,IAAIxG,UAAU,CAACO,UAAU,CAACmF,OAAO,CAACC,EAAE,GAAG,MAAM,GAAG,aAAa,EAAE,MAAM,EAAEhF,MAAM,CAACkB,MAAM,EAAE,CAAC,EAAE,IAAI5B,cAAc,CAAC,CAAC,EAAE,CAAC,EAAE0C,YAAY,CAAC3B,KAAK,EAAE2B,YAAY,CAAC7B,MAAM,CAAC,CAAC;IAC5KyE,UAAU,CAACM,WAAW,CAACtF,UAAU,CAACiF,QAAQ,CAACiB,aAAa,CAACD,UAAU,CAAC,CAAC;EACzE,CAAC;EACDrG,gBAAgB,CAACE,SAAS,CAAC4F,eAAe,GAAG,UAAU1F,UAAU,EAAEI,MAAM,EAAEgC,YAAY,EAAE4C,UAAU,EAAE;IACjG,IAAI3D,cAAc,GAAGrB,UAAU,CAACqB,cAAc;IAC9C,IAAII,SAAS,GAAGrC,WAAW,CAACgB,MAAM,CAACU,KAAK,CAAC4B,IAAI,EAAEtC,MAAM,CAACU,KAAK,CAACC,SAAS,EAAEf,UAAU,CAAC0B,UAAU,CAACgC,eAAe,CAAC;IAC7G,IAAIyC,UAAU,GAAG1E,SAAS,CAAChB,KAAK;IAChC,IAAI2F,WAAW,GAAG3E,SAAS,CAAClB,MAAM;IAClC,IAAI8F,aAAa,GAAGjG,MAAM,CAACU,KAAK,CAACuF,aAAa;IAC9C,IAAItC,MAAM,GAAG,CAAC;IACd,IAAIuC,iBAAiB,GAAGlE,YAAY,CAAC3B,KAAK;IAC1C,IAAIuD,MAAM,GAAG3C,cAAc,GAAI+E,WAAW,GAAG,CAAE;IAC/C,QAAQC,aAAa;MACjB,KAAK,KAAK;QACNtC,MAAM,GAAGuC,iBAAiB,GAAGH,UAAU,GAAGpC,MAAM;QAChD;MACJ,KAAK,QAAQ;QACTA,MAAM,GAAGuC,iBAAiB,GAAG,CAAC,GAAIH,UAAU,GAAI,CAAC;QACjD;IACR;IACA,IAAIpC,MAAM,GAAG,CAAC,EAAE;MACZA,MAAM,GAAG,CAAC;MACVuC,iBAAiB,GAAGH,UAAU;IAClC;IACA,IAAIG,iBAAiB,GAAGH,UAAU,GAAGpC,MAAM,EAAE;MACzCuC,iBAAiB,GAAGH,UAAU,GAAGpC,MAAM;IAC3C;IACA,IAAIwC,OAAO,GAAG,IAAIlH,UAAU,CAACW,UAAU,CAACmF,OAAO,CAACC,EAAE,GAAG,kBAAkB,EAAErB,MAAM,EAAEC,MAAM,EAAE,OAAO,EAAE5D,MAAM,CAACU,KAAK,CAAC4B,IAAI,CAAC;IACpH,IAAIyC,OAAO,GAAG7F,iBAAiB,CAACiH,OAAO,EAAEnG,MAAM,CAACU,KAAK,CAACC,SAAS,EAAEX,MAAM,CAACU,KAAK,CAACC,SAAS,CAACyF,KAAK,IACzFxG,UAAU,CAAC0B,UAAU,CAACC,eAAe,CAAC6E,KAAK,EAAExB,UAAU,EAAEhF,UAAU,CAAC0B,UAAU,CAACC,eAAe,CAAC;IACnGwD,OAAO,CAACW,YAAY,CAAC,YAAY,EAAE1F,MAAM,CAACU,KAAK,CAAC2F,WAAW,IAAIrG,MAAM,CAACU,KAAK,CAAC4B,IAAI,CAAC;IACjF,OAAOyC,OAAO;EAClB,CAAC;EACDvF,gBAAgB,CAACE,SAAS,CAAC+F,cAAc,GAAG,UAAU7F,UAAU,EAAEI,MAAM,EAAEP,YAAY,EAAE8F,CAAC,EAAExC,CAAC,EAAEC,CAAC,EAAE;IAC7F,IAAIsD,KAAK,GAAG,IAAI;IAChB,IAAIC,MAAM,GAAGvG,MAAM,CAACmD,SAAS;IAC7B,IAAIqD,UAAU,GAAGxH,WAAW,CAACS,YAAY,CAAC,MAAM,CAAC,EAAEO,MAAM,CAACW,SAAS,EAAEf,UAAU,CAAC0B,UAAU,CAACgC,eAAe,CAAC,CAACnD,MAAM;IAClH,IAAIwE,QAAQ,GAAG;MACX5B,CAAC,EAAEA,CAAC,GAAGwD,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC;MAC1BvD,CAAC,EAAGA,CAAC,GAAG,CAACwD,UAAU,GAAGD,MAAM,CAAC,QAAQ,CAAC,GAAGC,UAAU,GAAGD,MAAM,CAAC,QAAQ,CAAC,IAAI;IAC9E,CAAC;IACD,IAAIf,WAAW,GAAG5F,UAAU,CAACiF,QAAQ,CAACC,WAAW,CAAC;MAAEE,EAAE,EAAEpF,UAAU,CAACmF,OAAO,CAACC,EAAE,GAAG,MAAM,GAAG,SAAS,GAAGO,CAAC,CAACI,QAAQ,CAAC;IAAE,CAAC,CAAC;IACpHH,WAAW,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,GAAGxF,MAAM,CAACyG,gBAAgB,GAAG,SAAS,GAAG,SAAS;IAChFjB,WAAW,CAACE,YAAY,CAAC,UAAU,EAAEH,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC;IACxD,IAAImB,eAAe,GAAG;MAClBpE,IAAI,EAAE7C,YAAY,CAAC,MAAM,CAAC;MAC1BgD,IAAI,EAAEhD,YAAY,CAAC,MAAM,CAAC;MAC1B+C,KAAK,EAAE/C,YAAY,CAAC,OAAO,CAAC;MAC5BkH,IAAI,EAAEpH,YAAY;MAClBqH,MAAM,EAAE;IACZ,CAAC;IACD,IAAIC,mBAAmB,GAAG,SAAAA,CAAUC,IAAI,EAAE;MACtC,IAAI,CAACA,IAAI,CAACF,MAAM,EAAE;QACd,IAAIpE,KAAK,GAAG8D,KAAK,CAACS,eAAe,CAACnH,UAAU,EAAEH,YAAY,EAAEkF,QAAQ,CAAC5B,CAAC,EAAE4B,QAAQ,CAAC3B,CAAC,EAAEuC,CAAC,EAAEvF,MAAM,EAAE8G,IAAI,CAAC;QACpGtB,WAAW,CAACN,WAAW,CAAC1C,KAAK,CAAC;QAC9B,IAAI2D,OAAO,GAAG,IAAIlH,UAAU,CAACW,UAAU,CAACmF,OAAO,CAACC,EAAE,GAAG,iBAAiB,GAAGO,CAAC,CAACI,QAAQ,CAAC,CAAC,EAAEhB,QAAQ,CAAC5B,CAAC,GAAGwD,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,GAAGvG,MAAM,CAACuD,YAAY,EAAEoB,QAAQ,CAAC3B,CAAC,GAAGwD,UAAU,GAAG,CAAC,EAAE,OAAO,EAAEM,IAAI,CAACxE,IAAI,CAAC;QAC/LtC,MAAM,CAACW,SAAS,CAACqG,UAAU,GAAGhH,MAAM,CAACW,SAAS,CAACqG,UAAU,IAAIpH,UAAU,CAAC0B,UAAU,CAACgC,eAAe,CAAC0D,UAAU;QAC7GhH,MAAM,CAACW,SAAS,CAACsG,IAAI,GAAGjH,MAAM,CAACW,SAAS,CAACsG,IAAI,IAAIrH,UAAU,CAAC0B,UAAU,CAACgC,eAAe,CAAC2D,IAAI;QAC3F,IAAIlC,OAAO,GAAG7F,iBAAiB,CAACiH,OAAO,EAAEnG,MAAM,CAACW,SAAS,EAAEX,MAAM,CAACW,SAAS,CAACyF,KAAK,IAC7ExG,UAAU,CAAC0B,UAAU,CAACgC,eAAe,CAAC8C,KAAK,EAAEZ,WAAW,EAAE5F,UAAU,CAAC0B,UAAU,CAACgC,eAAe,CAAC;QACpGkC,WAAW,CAACE,YAAY,CAAC,YAAY,EAAE1F,MAAM,CAACqG,WAAW,IAAK,OAAO,GAAGF,OAAO,CAAC7D,IAAK,CAAC;QACtFkD,WAAW,CAACE,YAAY,CAAC,MAAM,EAAE,QAAQ,CAAC;QAC1CF,WAAW,CAACN,WAAW,CAACH,OAAO,CAAC;QAChCuB,KAAK,CAACnB,eAAe,CAACD,WAAW,CAACM,WAAW,CAAC;MAClD;IACJ,CAAC;IACDqB,mBAAmB,CAACK,IAAI,CAAC,IAAI,CAAC;IAC9BtH,UAAU,CAACuH,OAAO,CAAC5H,YAAY,EAAEmH,eAAe,EAAEG,mBAAmB,CAAC;IACtE,OAAO,IAAI,CAAC1B,eAAe;EAC/B,CAAC;EACD3F,gBAAgB,CAACE,SAAS,CAACqH,eAAe,GAAG,UAAUnH,UAAU,EAAEH,YAAY,EAAE2H,IAAI,EAAEC,IAAI,EAAEC,KAAK,EAAEtH,MAAM,EAAE0G,eAAe,EAAE;IACzH,IAAI3B,OAAO;IACX,IAAIwC,aAAa;IACjB,IAAIC,WAAW;IACf,IAAIC,IAAI;IACR,IAAIlB,MAAM,GAAGvG,MAAM,CAACmD,SAAS;IAC7B,IAAI9C,KAAK,GAAGkG,MAAM,CAAC,OAAO,CAAC;IAC3B,IAAIpG,MAAM,GAAGoG,MAAM,CAAC,QAAQ,CAAC;IAC7B,IAAIxD,CAAC,GAAGqE,IAAI,GAAI,CAAC/G,KAAK,GAAG,CAAE;IAC3B,IAAIa,MAAM,GAAG;MAAEkF,KAAK,EAAEG,MAAM,CAACrF,MAAM,CAACkF,KAAK;MAAE/F,KAAK,EAAEkG,MAAM,CAACrF,MAAM,CAACb;IAAM,CAAC;IACvE,IAAIqH,OAAO,GAAG,CAAC;IACf,IAAIjF,IAAI,GAAI7C,UAAU,CAACmC,MAAM,CAACuF,KAAK,CAAC,CAACK,UAAU,KAAK,SAAS,GAAIjB,eAAe,CAACjE,IAAI,GAAG,MAAM;IAC9F,IAAID,KAAK,GAAGkE,eAAe,CAAClE,KAAK,CAAChC,WAAW,CAAC,CAAC;IAC/C,IAAIoH,MAAM,GAAG1F,IAAI,CAAC2F,IAAI,CAAC1H,MAAM,GAAGA,MAAM,GAAGE,KAAK,GAAGA,KAAK,CAAC,GAAG,CAAC;IAC3D,QAAQmC,KAAK;MACT,KAAK,QAAQ;QACT+E,aAAa,GAAG,IAAIpI,YAAY,CAACS,UAAU,CAACmF,OAAO,CAACC,EAAE,GAAG,MAAM,GAAG,kBAAkB,GAAGsC,KAAK,CAAC3B,QAAQ,CAAC,CAAC,EAAElD,IAAI,EAAEvB,MAAM,EAAEwG,OAAO,EAAEN,IAAI,EAAEC,IAAI,EAAEO,MAAM,EAAE,IAAI,CAAC;QACzJ7C,OAAO,GAAGnF,UAAU,CAACiF,QAAQ,CAACiD,UAAU,CAACP,aAAa,CAAC;QACvD;MACJ,KAAK,WAAW;QACZE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG1E,CAAC,GAAG,GAAG,IAAIsE,IAAI,GAAI,CAAClH,MAAM,GAAG,CAAE,CAAC,GAAG,GAAG,GACrD,GAAG,GAAG,GAAG,IAAKE,KAAK,GAAG,CAAC,GAAI+G,IAAI,CAAC,GAAG,GAAG,IAAIC,IAAI,GAAI,CAAClH,MAAM,GAAG,CAAE,CAAC,GAAG,GAAG,GACrE,GAAG,GAAG,GAAG,IAAIiH,IAAI,GAAI/G,KAAK,GAAG,CAAE,CAAC,GAAG,GAAG,IAAIgH,IAAI,GAAIlH,MAAM,GAAG,CAAE,CAAC,GAAG,GAAG,GACpE,GAAG,GAAG,GAAG,GAAG4C,CAAC,GAAG,GAAG,IAAIsE,IAAI,GAAIlH,MAAM,GAAG,CAAE,CAAC,GAAG,GAAG,GACjD,GAAG,GAAG,GAAG,GAAG4C,CAAC,GAAG,GAAG,IAAIsE,IAAI,GAAI,CAAClH,MAAM,GAAG,CAAE,CAAC,GAAG,IAAI;QACvDqH,WAAW,GAAG,IAAIpI,UAAU,CAACQ,UAAU,CAACmF,OAAO,CAACC,EAAE,GAAG,MAAM,GAAG,kBAAkB,GAAGsC,KAAK,CAAC3B,QAAQ,CAAC,CAAC,EAAElD,IAAI,EAAEvB,MAAM,CAACb,KAAK,EAAEa,MAAM,CAACkF,KAAK,EAAE,CAAC,EAAE,EAAE,EAAEqB,IAAI,CAAC;QACnJ1C,OAAO,GAAGnF,UAAU,CAACiF,QAAQ,CAACkD,QAAQ,CAACP,WAAW,CAAC;QACnD;MACJ,KAAK,SAAS;QACVC,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG1E,CAAC,GAAG,GAAG,GAAGsE,IAAI,GAAG,GAAG,GACnC,GAAG,GAAG,GAAG,GAAGD,IAAI,GAAG,GAAG,IAAIC,IAAI,GAAI,CAAClH,MAAM,GAAG,CAAE,CAAC,GAAG,GAAG,GACrD,GAAG,GAAG,GAAG,IAAKE,KAAK,GAAG,CAAC,GAAI+G,IAAI,CAAC,GAAG,GAAG,GAAGC,IAAI,GAAG,GAAG,GACnD,GAAG,GAAG,GAAG,GAAGD,IAAI,GAAG,GAAG,IAAIC,IAAI,GAAIlH,MAAM,GAAG,CAAE,CAAC,GAAG,GAAG,GACpD,GAAG,GAAG,GAAG,GAAG4C,CAAC,GAAG,GAAG,GAAGsE,IAAI,GAAG,IAAI;QACrCG,WAAW,GAAG,IAAIpI,UAAU,CAACQ,UAAU,CAACmF,OAAO,CAACC,EAAE,GAAG,MAAM,GAAG,kBAAkB,GAAGsC,KAAK,CAAC3B,QAAQ,CAAC,CAAC,EAAElD,IAAI,EAAEvB,MAAM,CAACb,KAAK,EAAEa,MAAM,CAACkF,KAAK,EAAE,CAAC,EAAE,EAAE,EAAEqB,IAAI,CAAC;QACnJ1C,OAAO,GAAGnF,UAAU,CAACiF,QAAQ,CAACkD,QAAQ,CAACP,WAAW,CAAC;QACnD;MACJ,KAAK,UAAU;QAAE;UACb,IAAIQ,EAAE,GAAG,EAAE;UACX,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;YACzB,IAAIC,MAAM,GAAGN,MAAM,GAAG1F,IAAI,CAACiG,GAAG,CAAEjG,IAAI,CAACkG,EAAE,GAAG,GAAG,IAAKH,CAAC,GAAGD,EAAE,CAAC,CAAC;YAC1D,IAAIK,MAAM,GAAGT,MAAM,GAAG1F,IAAI,CAACoG,GAAG,CAAEpG,IAAI,CAACkG,EAAE,GAAG,GAAG,IAAKH,CAAC,GAAGD,EAAE,CAAC,CAAC;YAC1D,IAAIC,CAAC,KAAK,CAAC,EAAE;cACTR,IAAI,GAAG,GAAG,GAAG,GAAG,IAAIS,MAAM,GAAGd,IAAI,CAAC,GAAG,GAAG,IAAIC,IAAI,GAAGgB,MAAM,CAAC,GAAG,GAAG;YACpE,CAAC,MACI;cACDZ,IAAI,GAAGA,IAAI,CAACc,MAAM,CAAC,GAAG,GAAG,GAAG,IAAInB,IAAI,GAAGc,MAAM,CAAC,GAAG,GAAG,IAAIb,IAAI,GAAGgB,MAAM,CAAC,GAAG,GAAG,CAAC;YACjF;UACJ;UACAZ,IAAI,GAAGA,IAAI,CAACc,MAAM,CAAC,GAAG,CAAC;UACvBf,WAAW,GAAG,IAAIpI,UAAU,CAACQ,UAAU,CAACmF,OAAO,CAACC,EAAE,GAAG,MAAM,GAAG,kBAAkB,GAAGsC,KAAK,CAAC3B,QAAQ,CAAC,CAAC,EAAElD,IAAI,EAAEvB,MAAM,CAACb,KAAK,EAAEa,MAAM,CAACkF,KAAK,EAAE,CAAC,EAAE,EAAE,EAAEqB,IAAI,CAAC;UACnJ1C,OAAO,GAAGnF,UAAU,CAACiF,QAAQ,CAACkD,QAAQ,CAACP,WAAW,CAAC;UACnD;QACJ;MACA,KAAK,UAAU;QACXC,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG1E,CAAC,GAAG,GAAG,IAAK5C,MAAM,GAAG,CAAC,GAAIkH,IAAI,CAAC,GAAG,GAAG,GACpD,GAAG,GAAG,GAAG,GAAGD,IAAI,GAAG,GAAG,IAAIC,IAAI,GAAI,CAAClH,MAAM,GAAG,CAAE,CAAC,GAAG,GAAG,GACrD,GAAG,GAAG,GAAG,IAAIiH,IAAI,GAAI/G,KAAK,GAAG,CAAE,CAAC,GAAG,GAAG,IAAIgH,IAAI,GAAIlH,MAAM,GAAG,CAAE,CAAC,GAAG,GAAG,GACpE,GAAG,GAAG,GAAG,GAAG4C,CAAC,GAAG,GAAG,IAAIsE,IAAI,GAAIlH,MAAM,GAAG,CAAE,CAAC,GAAG,IAAI;QACtDqH,WAAW,GAAG,IAAIpI,UAAU,CAACQ,UAAU,CAACmF,OAAO,CAACC,EAAE,GAAG,MAAM,GAAG,kBAAkB,GAAGsC,KAAK,CAAC3B,QAAQ,CAAC,CAAC,EAAElD,IAAI,EAAEvB,MAAM,CAACb,KAAK,EAAEa,MAAM,CAACkF,KAAK,EAAE,CAAC,EAAE,EAAE,EAAEqB,IAAI,CAAC;QACnJ1C,OAAO,GAAGnF,UAAU,CAACiF,QAAQ,CAACkD,QAAQ,CAACP,WAAW,CAAC;QACnD;IACR;IACA,OAAOzC,OAAO;EAClB,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIvF,gBAAgB,CAACE,SAAS,CAAC8I,aAAa,GAAG,YAAY;IACnD,OAAO,kBAAkB;EAC7B,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIhJ,gBAAgB,CAACE,SAAS,CAAC+I,OAAO,GAAG,YAAY;IAC7C;AACR;AACA;EAFQ,CAGH;EACD,OAAOjJ,gBAAgB;AAC3B,CAAC,CAAC,CAAE;AACJ,SAASA,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}